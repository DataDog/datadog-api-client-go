/*
 * (C) Datadog, Inc. 2019
 * All rights reserved
 * Licensed under a 3-clause BSD style license (see LICENSE)
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog_v1

import (
	"encoding/json"
)

// MonitorOptions struct for MonitorOptions
type MonitorOptions struct {
	Aggregation *string `json:"aggregation,omitempty"`

	DeviceIds *[]string `json:"device_ids,omitempty"`

	EnableLogsSample *bool `json:"enable_logs_sample,omitempty"`

	EscalationMessage *string `json:"escalation_message,omitempty"`

	EvaluationDelay *int64 `json:"evaluation_delay,omitempty"`

	IncludeTags *bool `json:"include_tags,omitempty"`

	Locked *bool `json:"locked,omitempty"`

	MinFailureDuration *int64 `json:"min_failure_duration,omitempty"`

	MinLocationFailed *int64 `json:"min_location_failed,omitempty"`

	NewHostDelay *int64 `json:"new_host_delay,omitempty"`

	NoDataTimeframe *int64 `json:"no_data_timeframe,omitempty"`

	NotifyAudit *bool `json:"notify_audit,omitempty"`

	NotifyNoData *bool `json:"notify_no_data,omitempty"`

	RenotifyInterval *int64 `json:"renotify_interval,omitempty"`

	RequireFullWindow *bool `json:"require_full_window,omitempty"`

	Silenced *map[string]int64 `json:"silenced,omitempty"`

	SyntheticsCheckId *int64 `json:"synthetics_check_id,omitempty"`

	ThresholdWindows *MonitorThresholdWindowOptions `json:"threshold_windows,omitempty"`

	Thresholds *MonitorThresholds `json:"thresholds,omitempty"`

	TimeoutH *int32 `json:"timeout_h,omitempty"`
}

// GetAggregation returns the Aggregation field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetAggregation() string {
	if o == nil || o.Aggregation == nil {
		var ret string
		return ret
	}
	return *o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetAggregationOk() (string, bool) {
	if o == nil || o.Aggregation == nil {
		var ret string
		return ret, false
	}
	return *o.Aggregation, true
}

// HasAggregation returns a boolean if a field has been set.
func (o *MonitorOptions) HasAggregation() bool {
	if o != nil && o.Aggregation != nil {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given string and assigns it to the Aggregation field.
func (o *MonitorOptions) SetAggregation(v string) {
	o.Aggregation = &v
}

// GetDeviceIds returns the DeviceIds field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetDeviceIds() []string {
	if o == nil || o.DeviceIds == nil {
		var ret []string
		return ret
	}
	return *o.DeviceIds
}

// GetDeviceIdsOk returns a tuple with the DeviceIds field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetDeviceIdsOk() ([]string, bool) {
	if o == nil || o.DeviceIds == nil {
		var ret []string
		return ret, false
	}
	return *o.DeviceIds, true
}

// HasDeviceIds returns a boolean if a field has been set.
func (o *MonitorOptions) HasDeviceIds() bool {
	if o != nil && o.DeviceIds != nil {
		return true
	}

	return false
}

// SetDeviceIds gets a reference to the given []string and assigns it to the DeviceIds field.
func (o *MonitorOptions) SetDeviceIds(v []string) {
	o.DeviceIds = &v
}

// GetEnableLogsSample returns the EnableLogsSample field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetEnableLogsSample() bool {
	if o == nil || o.EnableLogsSample == nil {
		var ret bool
		return ret
	}
	return *o.EnableLogsSample
}

// GetEnableLogsSampleOk returns a tuple with the EnableLogsSample field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetEnableLogsSampleOk() (bool, bool) {
	if o == nil || o.EnableLogsSample == nil {
		var ret bool
		return ret, false
	}
	return *o.EnableLogsSample, true
}

// HasEnableLogsSample returns a boolean if a field has been set.
func (o *MonitorOptions) HasEnableLogsSample() bool {
	if o != nil && o.EnableLogsSample != nil {
		return true
	}

	return false
}

// SetEnableLogsSample gets a reference to the given bool and assigns it to the EnableLogsSample field.
func (o *MonitorOptions) SetEnableLogsSample(v bool) {
	o.EnableLogsSample = &v
}

// GetEscalationMessage returns the EscalationMessage field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetEscalationMessage() string {
	if o == nil || o.EscalationMessage == nil {
		var ret string
		return ret
	}
	return *o.EscalationMessage
}

// GetEscalationMessageOk returns a tuple with the EscalationMessage field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetEscalationMessageOk() (string, bool) {
	if o == nil || o.EscalationMessage == nil {
		var ret string
		return ret, false
	}
	return *o.EscalationMessage, true
}

// HasEscalationMessage returns a boolean if a field has been set.
func (o *MonitorOptions) HasEscalationMessage() bool {
	if o != nil && o.EscalationMessage != nil {
		return true
	}

	return false
}

// SetEscalationMessage gets a reference to the given string and assigns it to the EscalationMessage field.
func (o *MonitorOptions) SetEscalationMessage(v string) {
	o.EscalationMessage = &v
}

// GetEvaluationDelay returns the EvaluationDelay field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetEvaluationDelay() int64 {
	if o == nil || o.EvaluationDelay == nil {
		var ret int64
		return ret
	}
	return *o.EvaluationDelay
}

// GetEvaluationDelayOk returns a tuple with the EvaluationDelay field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetEvaluationDelayOk() (int64, bool) {
	if o == nil || o.EvaluationDelay == nil {
		var ret int64
		return ret, false
	}
	return *o.EvaluationDelay, true
}

// HasEvaluationDelay returns a boolean if a field has been set.
func (o *MonitorOptions) HasEvaluationDelay() bool {
	if o != nil && o.EvaluationDelay != nil {
		return true
	}

	return false
}

// SetEvaluationDelay gets a reference to the given int64 and assigns it to the EvaluationDelay field.
func (o *MonitorOptions) SetEvaluationDelay(v int64) {
	o.EvaluationDelay = &v
}

// GetIncludeTags returns the IncludeTags field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetIncludeTags() bool {
	if o == nil || o.IncludeTags == nil {
		var ret bool
		return ret
	}
	return *o.IncludeTags
}

// GetIncludeTagsOk returns a tuple with the IncludeTags field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetIncludeTagsOk() (bool, bool) {
	if o == nil || o.IncludeTags == nil {
		var ret bool
		return ret, false
	}
	return *o.IncludeTags, true
}

// HasIncludeTags returns a boolean if a field has been set.
func (o *MonitorOptions) HasIncludeTags() bool {
	if o != nil && o.IncludeTags != nil {
		return true
	}

	return false
}

// SetIncludeTags gets a reference to the given bool and assigns it to the IncludeTags field.
func (o *MonitorOptions) SetIncludeTags(v bool) {
	o.IncludeTags = &v
}

// GetLocked returns the Locked field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetLocked() bool {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetLockedOk() (bool, bool) {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret, false
	}
	return *o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *MonitorOptions) HasLocked() bool {
	if o != nil && o.Locked != nil {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *MonitorOptions) SetLocked(v bool) {
	o.Locked = &v
}

// GetMinFailureDuration returns the MinFailureDuration field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetMinFailureDuration() int64 {
	if o == nil || o.MinFailureDuration == nil {
		var ret int64
		return ret
	}
	return *o.MinFailureDuration
}

// GetMinFailureDurationOk returns a tuple with the MinFailureDuration field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetMinFailureDurationOk() (int64, bool) {
	if o == nil || o.MinFailureDuration == nil {
		var ret int64
		return ret, false
	}
	return *o.MinFailureDuration, true
}

// HasMinFailureDuration returns a boolean if a field has been set.
func (o *MonitorOptions) HasMinFailureDuration() bool {
	if o != nil && o.MinFailureDuration != nil {
		return true
	}

	return false
}

// SetMinFailureDuration gets a reference to the given int64 and assigns it to the MinFailureDuration field.
func (o *MonitorOptions) SetMinFailureDuration(v int64) {
	o.MinFailureDuration = &v
}

// GetMinLocationFailed returns the MinLocationFailed field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetMinLocationFailed() int64 {
	if o == nil || o.MinLocationFailed == nil {
		var ret int64
		return ret
	}
	return *o.MinLocationFailed
}

// GetMinLocationFailedOk returns a tuple with the MinLocationFailed field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetMinLocationFailedOk() (int64, bool) {
	if o == nil || o.MinLocationFailed == nil {
		var ret int64
		return ret, false
	}
	return *o.MinLocationFailed, true
}

// HasMinLocationFailed returns a boolean if a field has been set.
func (o *MonitorOptions) HasMinLocationFailed() bool {
	if o != nil && o.MinLocationFailed != nil {
		return true
	}

	return false
}

// SetMinLocationFailed gets a reference to the given int64 and assigns it to the MinLocationFailed field.
func (o *MonitorOptions) SetMinLocationFailed(v int64) {
	o.MinLocationFailed = &v
}

// GetNewHostDelay returns the NewHostDelay field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetNewHostDelay() int64 {
	if o == nil || o.NewHostDelay == nil {
		var ret int64
		return ret
	}
	return *o.NewHostDelay
}

// GetNewHostDelayOk returns a tuple with the NewHostDelay field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetNewHostDelayOk() (int64, bool) {
	if o == nil || o.NewHostDelay == nil {
		var ret int64
		return ret, false
	}
	return *o.NewHostDelay, true
}

// HasNewHostDelay returns a boolean if a field has been set.
func (o *MonitorOptions) HasNewHostDelay() bool {
	if o != nil && o.NewHostDelay != nil {
		return true
	}

	return false
}

// SetNewHostDelay gets a reference to the given int64 and assigns it to the NewHostDelay field.
func (o *MonitorOptions) SetNewHostDelay(v int64) {
	o.NewHostDelay = &v
}

// GetNoDataTimeframe returns the NoDataTimeframe field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetNoDataTimeframe() int64 {
	if o == nil || o.NoDataTimeframe == nil {
		var ret int64
		return ret
	}
	return *o.NoDataTimeframe
}

// GetNoDataTimeframeOk returns a tuple with the NoDataTimeframe field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetNoDataTimeframeOk() (int64, bool) {
	if o == nil || o.NoDataTimeframe == nil {
		var ret int64
		return ret, false
	}
	return *o.NoDataTimeframe, true
}

// HasNoDataTimeframe returns a boolean if a field has been set.
func (o *MonitorOptions) HasNoDataTimeframe() bool {
	if o != nil && o.NoDataTimeframe != nil {
		return true
	}

	return false
}

// SetNoDataTimeframe gets a reference to the given int64 and assigns it to the NoDataTimeframe field.
func (o *MonitorOptions) SetNoDataTimeframe(v int64) {
	o.NoDataTimeframe = &v
}

// GetNotifyAudit returns the NotifyAudit field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetNotifyAudit() bool {
	if o == nil || o.NotifyAudit == nil {
		var ret bool
		return ret
	}
	return *o.NotifyAudit
}

// GetNotifyAuditOk returns a tuple with the NotifyAudit field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetNotifyAuditOk() (bool, bool) {
	if o == nil || o.NotifyAudit == nil {
		var ret bool
		return ret, false
	}
	return *o.NotifyAudit, true
}

// HasNotifyAudit returns a boolean if a field has been set.
func (o *MonitorOptions) HasNotifyAudit() bool {
	if o != nil && o.NotifyAudit != nil {
		return true
	}

	return false
}

// SetNotifyAudit gets a reference to the given bool and assigns it to the NotifyAudit field.
func (o *MonitorOptions) SetNotifyAudit(v bool) {
	o.NotifyAudit = &v
}

// GetNotifyNoData returns the NotifyNoData field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetNotifyNoData() bool {
	if o == nil || o.NotifyNoData == nil {
		var ret bool
		return ret
	}
	return *o.NotifyNoData
}

// GetNotifyNoDataOk returns a tuple with the NotifyNoData field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetNotifyNoDataOk() (bool, bool) {
	if o == nil || o.NotifyNoData == nil {
		var ret bool
		return ret, false
	}
	return *o.NotifyNoData, true
}

// HasNotifyNoData returns a boolean if a field has been set.
func (o *MonitorOptions) HasNotifyNoData() bool {
	if o != nil && o.NotifyNoData != nil {
		return true
	}

	return false
}

// SetNotifyNoData gets a reference to the given bool and assigns it to the NotifyNoData field.
func (o *MonitorOptions) SetNotifyNoData(v bool) {
	o.NotifyNoData = &v
}

// GetRenotifyInterval returns the RenotifyInterval field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetRenotifyInterval() int64 {
	if o == nil || o.RenotifyInterval == nil {
		var ret int64
		return ret
	}
	return *o.RenotifyInterval
}

// GetRenotifyIntervalOk returns a tuple with the RenotifyInterval field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetRenotifyIntervalOk() (int64, bool) {
	if o == nil || o.RenotifyInterval == nil {
		var ret int64
		return ret, false
	}
	return *o.RenotifyInterval, true
}

// HasRenotifyInterval returns a boolean if a field has been set.
func (o *MonitorOptions) HasRenotifyInterval() bool {
	if o != nil && o.RenotifyInterval != nil {
		return true
	}

	return false
}

// SetRenotifyInterval gets a reference to the given int64 and assigns it to the RenotifyInterval field.
func (o *MonitorOptions) SetRenotifyInterval(v int64) {
	o.RenotifyInterval = &v
}

// GetRequireFullWindow returns the RequireFullWindow field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetRequireFullWindow() bool {
	if o == nil || o.RequireFullWindow == nil {
		var ret bool
		return ret
	}
	return *o.RequireFullWindow
}

// GetRequireFullWindowOk returns a tuple with the RequireFullWindow field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetRequireFullWindowOk() (bool, bool) {
	if o == nil || o.RequireFullWindow == nil {
		var ret bool
		return ret, false
	}
	return *o.RequireFullWindow, true
}

// HasRequireFullWindow returns a boolean if a field has been set.
func (o *MonitorOptions) HasRequireFullWindow() bool {
	if o != nil && o.RequireFullWindow != nil {
		return true
	}

	return false
}

// SetRequireFullWindow gets a reference to the given bool and assigns it to the RequireFullWindow field.
func (o *MonitorOptions) SetRequireFullWindow(v bool) {
	o.RequireFullWindow = &v
}

// GetSilenced returns the Silenced field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetSilenced() map[string]int64 {
	if o == nil || o.Silenced == nil {
		var ret map[string]int64
		return ret
	}
	return *o.Silenced
}

// GetSilencedOk returns a tuple with the Silenced field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetSilencedOk() (map[string]int64, bool) {
	if o == nil || o.Silenced == nil {
		var ret map[string]int64
		return ret, false
	}
	return *o.Silenced, true
}

// HasSilenced returns a boolean if a field has been set.
func (o *MonitorOptions) HasSilenced() bool {
	if o != nil && o.Silenced != nil {
		return true
	}

	return false
}

// SetSilenced gets a reference to the given map[string]int64 and assigns it to the Silenced field.
func (o *MonitorOptions) SetSilenced(v map[string]int64) {
	o.Silenced = &v
}

// GetSyntheticsCheckId returns the SyntheticsCheckId field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetSyntheticsCheckId() int64 {
	if o == nil || o.SyntheticsCheckId == nil {
		var ret int64
		return ret
	}
	return *o.SyntheticsCheckId
}

// GetSyntheticsCheckIdOk returns a tuple with the SyntheticsCheckId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetSyntheticsCheckIdOk() (int64, bool) {
	if o == nil || o.SyntheticsCheckId == nil {
		var ret int64
		return ret, false
	}
	return *o.SyntheticsCheckId, true
}

// HasSyntheticsCheckId returns a boolean if a field has been set.
func (o *MonitorOptions) HasSyntheticsCheckId() bool {
	if o != nil && o.SyntheticsCheckId != nil {
		return true
	}

	return false
}

// SetSyntheticsCheckId gets a reference to the given int64 and assigns it to the SyntheticsCheckId field.
func (o *MonitorOptions) SetSyntheticsCheckId(v int64) {
	o.SyntheticsCheckId = &v
}

// GetThresholdWindows returns the ThresholdWindows field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetThresholdWindows() MonitorThresholdWindowOptions {
	if o == nil || o.ThresholdWindows == nil {
		var ret MonitorThresholdWindowOptions
		return ret
	}
	return *o.ThresholdWindows
}

// GetThresholdWindowsOk returns a tuple with the ThresholdWindows field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetThresholdWindowsOk() (MonitorThresholdWindowOptions, bool) {
	if o == nil || o.ThresholdWindows == nil {
		var ret MonitorThresholdWindowOptions
		return ret, false
	}
	return *o.ThresholdWindows, true
}

// HasThresholdWindows returns a boolean if a field has been set.
func (o *MonitorOptions) HasThresholdWindows() bool {
	if o != nil && o.ThresholdWindows != nil {
		return true
	}

	return false
}

// SetThresholdWindows gets a reference to the given MonitorThresholdWindowOptions and assigns it to the ThresholdWindows field.
func (o *MonitorOptions) SetThresholdWindows(v MonitorThresholdWindowOptions) {
	o.ThresholdWindows = &v
}

// GetThresholds returns the Thresholds field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetThresholds() MonitorThresholds {
	if o == nil || o.Thresholds == nil {
		var ret MonitorThresholds
		return ret
	}
	return *o.Thresholds
}

// GetThresholdsOk returns a tuple with the Thresholds field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetThresholdsOk() (MonitorThresholds, bool) {
	if o == nil || o.Thresholds == nil {
		var ret MonitorThresholds
		return ret, false
	}
	return *o.Thresholds, true
}

// HasThresholds returns a boolean if a field has been set.
func (o *MonitorOptions) HasThresholds() bool {
	if o != nil && o.Thresholds != nil {
		return true
	}

	return false
}

// SetThresholds gets a reference to the given MonitorThresholds and assigns it to the Thresholds field.
func (o *MonitorOptions) SetThresholds(v MonitorThresholds) {
	o.Thresholds = &v
}

// GetTimeoutH returns the TimeoutH field if non-nil, zero value otherwise.
func (o *MonitorOptions) GetTimeoutH() int32 {
	if o == nil || o.TimeoutH == nil {
		var ret int32
		return ret
	}
	return *o.TimeoutH
}

// GetTimeoutHOk returns a tuple with the TimeoutH field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetTimeoutHOk() (int32, bool) {
	if o == nil || o.TimeoutH == nil {
		var ret int32
		return ret, false
	}
	return *o.TimeoutH, true
}

// HasTimeoutH returns a boolean if a field has been set.
func (o *MonitorOptions) HasTimeoutH() bool {
	if o != nil && o.TimeoutH != nil {
		return true
	}

	return false
}

// SetTimeoutH gets a reference to the given int32 and assigns it to the TimeoutH field.
func (o *MonitorOptions) SetTimeoutH(v int32) {
	o.TimeoutH = &v
}

// MarshalJSON returns the JSON representation of the model.
func (o MonitorOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Aggregation != nil {
		toSerialize["aggregation"] = o.Aggregation
	}
	if o.DeviceIds != nil {
		toSerialize["device_ids"] = o.DeviceIds
	}
	if o.EnableLogsSample != nil {
		toSerialize["enable_logs_sample"] = o.EnableLogsSample
	}
	if o.EscalationMessage != nil {
		toSerialize["escalation_message"] = o.EscalationMessage
	}
	if o.EvaluationDelay != nil {
		toSerialize["evaluation_delay"] = o.EvaluationDelay
	}
	if o.IncludeTags != nil {
		toSerialize["include_tags"] = o.IncludeTags
	}
	if o.Locked != nil {
		toSerialize["locked"] = o.Locked
	}
	if o.MinFailureDuration != nil {
		toSerialize["min_failure_duration"] = o.MinFailureDuration
	}
	if o.MinLocationFailed != nil {
		toSerialize["min_location_failed"] = o.MinLocationFailed
	}
	if o.NewHostDelay != nil {
		toSerialize["new_host_delay"] = o.NewHostDelay
	}
	if o.NoDataTimeframe != nil {
		toSerialize["no_data_timeframe"] = o.NoDataTimeframe
	}
	if o.NotifyAudit != nil {
		toSerialize["notify_audit"] = o.NotifyAudit
	}
	if o.NotifyNoData != nil {
		toSerialize["notify_no_data"] = o.NotifyNoData
	}
	if o.RenotifyInterval != nil {
		toSerialize["renotify_interval"] = o.RenotifyInterval
	}
	if o.RequireFullWindow != nil {
		toSerialize["require_full_window"] = o.RequireFullWindow
	}
	if o.Silenced != nil {
		toSerialize["silenced"] = o.Silenced
	}
	if o.SyntheticsCheckId != nil {
		toSerialize["synthetics_check_id"] = o.SyntheticsCheckId
	}
	if o.ThresholdWindows != nil {
		toSerialize["threshold_windows"] = o.ThresholdWindows
	}
	if o.Thresholds != nil {
		toSerialize["thresholds"] = o.Thresholds
	}
	if o.TimeoutH != nil {
		toSerialize["timeout_h"] = o.TimeoutH
	}
	return json.Marshal(toSerialize)
}
