/*
 * (C) Datadog, Inc. 2019
 * All rights reserved
 * Licensed under a 3-clause BSD style license (see LICENSE)
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog_v1

import (
	"encoding/json"
	"errors"
)

// ServiceLevelObjectiveQuery A metric SLI query. Required if type is \"metric\".
type ServiceLevelObjectiveQuery struct {
	// A Datadog metric query for total (valid) events.
	Denominator *string `json:"denominator,omitempty"`

	// A Datadog metric query for good events.
	Numerator *string `json:"numerator,omitempty"`
}

// GetDenominator returns the Denominator field if non-nil, zero value otherwise.
func (o *ServiceLevelObjectiveQuery) GetDenominator() string {
	if o == nil || o.Denominator == nil {
		var ret string
		return ret
	}
	return *o.Denominator
}

// GetDenominatorOk returns a tuple with the Denominator field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ServiceLevelObjectiveQuery) GetDenominatorOk() (string, bool) {
	if o == nil || o.Denominator == nil {
		var ret string
		return ret, false
	}
	return *o.Denominator, true
}

// HasDenominator returns a boolean if a field has been set.
func (o *ServiceLevelObjectiveQuery) HasDenominator() bool {
	if o != nil && o.Denominator != nil {
		return true
	}

	return false
}

// SetDenominator gets a reference to the given string and assigns it to the Denominator field.
func (o *ServiceLevelObjectiveQuery) SetDenominator(v string) {
	o.Denominator = &v
}

// GetNumerator returns the Numerator field if non-nil, zero value otherwise.
func (o *ServiceLevelObjectiveQuery) GetNumerator() string {
	if o == nil || o.Numerator == nil {
		var ret string
		return ret
	}
	return *o.Numerator
}

// GetNumeratorOk returns a tuple with the Numerator field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ServiceLevelObjectiveQuery) GetNumeratorOk() (string, bool) {
	if o == nil || o.Numerator == nil {
		var ret string
		return ret, false
	}
	return *o.Numerator, true
}

// HasNumerator returns a boolean if a field has been set.
func (o *ServiceLevelObjectiveQuery) HasNumerator() bool {
	if o != nil && o.Numerator != nil {
		return true
	}

	return false
}

// SetNumerator gets a reference to the given string and assigns it to the Numerator field.
func (o *ServiceLevelObjectiveQuery) SetNumerator(v string) {
	o.Numerator = &v
}

// MarshalJSON returns the JSON representation of the model.
func (o ServiceLevelObjectiveQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Denominator == nil {
		return nil, errors.New("Denominator is required and not nullable, but was not set on ServiceLevelObjectiveQuery")
	}
	if o.Denominator != nil {
		toSerialize["denominator"] = o.Denominator
	}
	if o.Numerator == nil {
		return nil, errors.New("Numerator is required and not nullable, but was not set on ServiceLevelObjectiveQuery")
	}
	if o.Numerator != nil {
		toSerialize["numerator"] = o.Numerator
	}
	return json.Marshal(toSerialize)
}
