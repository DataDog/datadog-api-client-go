/*
 * (C) Datadog, Inc. 2019
 * All rights reserved
 * Licensed under a 3-clause BSD style license (see LICENSE)
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog_v1

import (
	"encoding/json"
)

// HistoryServiceLevelObjectiveResponseError struct for HistoryServiceLevelObjectiveResponseError
type HistoryServiceLevelObjectiveResponseError struct {
	// human readable error
	Error *string `json:"error,omitempty"`
}

// GetError returns the Error field if non-nil, zero value otherwise.
func (o *HistoryServiceLevelObjectiveResponseError) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *HistoryServiceLevelObjectiveResponseError) GetErrorOk() (string, bool) {
	if o == nil || o.Error == nil {
		var ret string
		return ret, false
	}
	return *o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *HistoryServiceLevelObjectiveResponseError) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *HistoryServiceLevelObjectiveResponseError) SetError(v string) {
	o.Error = &v
}

// MarshalJSON returns the JSON representation of the model.
func (o HistoryServiceLevelObjectiveResponseError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}
