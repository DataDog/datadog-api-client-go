/*
 * (C) Datadog, Inc. 2019
 * All rights reserved
 * Licensed under a 3-clause BSD style license (see LICENSE)
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog_v1

import (
	"encoding/json"
	"errors"
	"time"
)

// Monitor struct for Monitor
type Monitor struct {
	Created *time.Time `json:"created,omitempty"`

	Creator *Creator `json:"creator,omitempty"`

	Deleted *time.Time `json:"deleted,omitempty"`

	// ID of this monitor
	Id *int64 `json:"id,omitempty"`

	// A message to include with notifications for this monitor.
	Message *string `json:"message,omitempty"`

	Modified *time.Time `json:"modified,omitempty"`

	Multi *bool `json:"multi,omitempty"`

	Name *string `json:"name,omitempty"`

	Options *MonitorOptions `json:"options,omitempty"`

	OverallState *MonitorOverallStates `json:"overall_state,omitempty"`

	Query *string `json:"query,omitempty"`

	State *MonitorState `json:"state,omitempty"`

	Tags *[]string `json:"tags,omitempty"`

	// The type of the monitor
	Type *string `json:"type,omitempty"`
}

// GetCreated returns the Created field if non-nil, zero value otherwise.
func (o *Monitor) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetCreatedOk() (time.Time, bool) {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret, false
	}
	return *o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Monitor) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Monitor) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreator returns the Creator field if non-nil, zero value otherwise.
func (o *Monitor) GetCreator() Creator {
	if o == nil || o.Creator == nil {
		var ret Creator
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetCreatorOk() (Creator, bool) {
	if o == nil || o.Creator == nil {
		var ret Creator
		return ret, false
	}
	return *o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *Monitor) HasCreator() bool {
	if o != nil && o.Creator != nil {
		return true
	}

	return false
}

// SetCreator gets a reference to the given Creator and assigns it to the Creator field.
func (o *Monitor) SetCreator(v Creator) {
	o.Creator = &v
}

// GetDeleted returns the Deleted field if non-nil, zero value otherwise.
func (o *Monitor) GetDeleted() time.Time {
	if o == nil || o.Deleted == nil {
		var ret time.Time
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetDeletedOk() (time.Time, bool) {
	if o == nil || o.Deleted == nil {
		var ret time.Time
		return ret, false
	}
	return *o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Monitor) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given time.Time and assigns it to the Deleted field.
func (o *Monitor) SetDeleted(v time.Time) {
	o.Deleted = &v
}

// GetId returns the Id field if non-nil, zero value otherwise.
func (o *Monitor) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetIdOk() (int64, bool) {
	if o == nil || o.Id == nil {
		var ret int64
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Monitor) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Monitor) SetId(v int64) {
	o.Id = &v
}

// GetMessage returns the Message field if non-nil, zero value otherwise.
func (o *Monitor) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetMessageOk() (string, bool) {
	if o == nil || o.Message == nil {
		var ret string
		return ret, false
	}
	return *o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Monitor) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Monitor) SetMessage(v string) {
	o.Message = &v
}

// GetModified returns the Modified field if non-nil, zero value otherwise.
func (o *Monitor) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetModifiedOk() (time.Time, bool) {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret, false
	}
	return *o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *Monitor) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *Monitor) SetModified(v time.Time) {
	o.Modified = &v
}

// GetMulti returns the Multi field if non-nil, zero value otherwise.
func (o *Monitor) GetMulti() bool {
	if o == nil || o.Multi == nil {
		var ret bool
		return ret
	}
	return *o.Multi
}

// GetMultiOk returns a tuple with the Multi field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetMultiOk() (bool, bool) {
	if o == nil || o.Multi == nil {
		var ret bool
		return ret, false
	}
	return *o.Multi, true
}

// HasMulti returns a boolean if a field has been set.
func (o *Monitor) HasMulti() bool {
	if o != nil && o.Multi != nil {
		return true
	}

	return false
}

// SetMulti gets a reference to the given bool and assigns it to the Multi field.
func (o *Monitor) SetMulti(v bool) {
	o.Multi = &v
}

// GetName returns the Name field if non-nil, zero value otherwise.
func (o *Monitor) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Monitor) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Monitor) SetName(v string) {
	o.Name = &v
}

// GetOptions returns the Options field if non-nil, zero value otherwise.
func (o *Monitor) GetOptions() MonitorOptions {
	if o == nil || o.Options == nil {
		var ret MonitorOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetOptionsOk() (MonitorOptions, bool) {
	if o == nil || o.Options == nil {
		var ret MonitorOptions
		return ret, false
	}
	return *o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Monitor) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given MonitorOptions and assigns it to the Options field.
func (o *Monitor) SetOptions(v MonitorOptions) {
	o.Options = &v
}

// GetOverallState returns the OverallState field if non-nil, zero value otherwise.
func (o *Monitor) GetOverallState() MonitorOverallStates {
	if o == nil || o.OverallState == nil {
		var ret MonitorOverallStates
		return ret
	}
	return *o.OverallState
}

// GetOverallStateOk returns a tuple with the OverallState field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetOverallStateOk() (MonitorOverallStates, bool) {
	if o == nil || o.OverallState == nil {
		var ret MonitorOverallStates
		return ret, false
	}
	return *o.OverallState, true
}

// HasOverallState returns a boolean if a field has been set.
func (o *Monitor) HasOverallState() bool {
	if o != nil && o.OverallState != nil {
		return true
	}

	return false
}

// SetOverallState gets a reference to the given MonitorOverallStates and assigns it to the OverallState field.
func (o *Monitor) SetOverallState(v MonitorOverallStates) {
	o.OverallState = &v
}

// GetQuery returns the Query field if non-nil, zero value otherwise.
func (o *Monitor) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetQueryOk() (string, bool) {
	if o == nil || o.Query == nil {
		var ret string
		return ret, false
	}
	return *o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *Monitor) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *Monitor) SetQuery(v string) {
	o.Query = &v
}

// GetState returns the State field if non-nil, zero value otherwise.
func (o *Monitor) GetState() MonitorState {
	if o == nil || o.State == nil {
		var ret MonitorState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetStateOk() (MonitorState, bool) {
	if o == nil || o.State == nil {
		var ret MonitorState
		return ret, false
	}
	return *o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Monitor) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given MonitorState and assigns it to the State field.
func (o *Monitor) SetState(v MonitorState) {
	o.State = &v
}

// GetTags returns the Tags field if non-nil, zero value otherwise.
func (o *Monitor) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret, false
	}
	return *o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Monitor) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Monitor) SetTags(v []string) {
	o.Tags = &v
}

// GetType returns the Type field if non-nil, zero value otherwise.
func (o *Monitor) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetTypeOk() (string, bool) {
	if o == nil || o.Type == nil {
		var ret string
		return ret, false
	}
	return *o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Monitor) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Monitor) SetType(v string) {
	o.Type = &v
}

// MarshalJSON returns the JSON representation of the model.
func (o Monitor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Creator != nil {
		toSerialize["creator"] = o.Creator
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.Multi != nil {
		toSerialize["multi"] = o.Multi
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	if o.OverallState != nil {
		toSerialize["overall_state"] = o.OverallState
	}
	if o.Query == nil {
		return nil, errors.New("Query is required and not nullable, but was not set on Monitor")
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Type == nil {
		return nil, errors.New("Type is required and not nullable, but was not set on Monitor")
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}
