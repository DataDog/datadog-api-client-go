/*
 * (C) Datadog, Inc. 2019
 * All rights reserved
 * Licensed under a 3-clause BSD style license (see LICENSE)
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"bytes"
	"encoding/json"
)

// CanDeleteMonitorResponse struct for CanDeleteMonitorResponse
type CanDeleteMonitorResponse struct {
	Data CanDeleteMonitorResponseData `json:"data"`
	// A mapping of Monitor ID to strings denoting where it's used.
	Errors *map[string]string `json:"errors,omitempty"`
}

// GetData returns the Data field value
func (o *CanDeleteMonitorResponse) GetData() CanDeleteMonitorResponseData {
	if o == nil {
		var ret CanDeleteMonitorResponseData
		return ret
	}

	return o.Data
}

// SetData sets field value
func (o *CanDeleteMonitorResponse) SetData(v CanDeleteMonitorResponseData) {
	o.Data = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *CanDeleteMonitorResponse) GetErrors() map[string]string {
	if o == nil || o.Errors == nil {
		var ret map[string]string
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CanDeleteMonitorResponse) GetErrorsOk() (map[string]string, bool) {
	if o == nil || o.Errors == nil {
		var ret map[string]string
		return ret, false
	}
	return *o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *CanDeleteMonitorResponse) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given map[string]string and assigns it to the Errors field.
func (o *CanDeleteMonitorResponse) SetErrors(v map[string]string) {
	o.Errors = &v
}

type NullableCanDeleteMonitorResponse struct {
	Value        CanDeleteMonitorResponse
	ExplicitNull bool
}

func (v NullableCanDeleteMonitorResponse) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableCanDeleteMonitorResponse) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
