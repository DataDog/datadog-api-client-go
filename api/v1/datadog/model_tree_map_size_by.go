/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// TreeMapSizeBy The attribute used to determine size in the widget.
type TreeMapSizeBy string

// List of TreeMapSizeBy
const (
	TREEMAPSIZEBY_PCT_CPU TreeMapSizeBy = "pct_cpu"
	TREEMAPSIZEBY_PCT_MEM TreeMapSizeBy = "pct_mem"
)

var allowedTreeMapSizeByEnumValues = []TreeMapSizeBy{
	"pct_cpu",
	"pct_mem",
}

func (w *TreeMapSizeBy) GetAllowedValues() []TreeMapSizeBy {
	return allowedTreeMapSizeByEnumValues
}

func (v *TreeMapSizeBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TreeMapSizeBy(value)
	for _, existing := range allowedTreeMapSizeByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TreeMapSizeBy", value)
}

// NewTreeMapSizeByFromValue returns a pointer to a valid TreeMapSizeBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTreeMapSizeByFromValue(v string) (*TreeMapSizeBy, error) {
	ev := TreeMapSizeBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TreeMapSizeBy: valid values are %v", v, allowedTreeMapSizeByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TreeMapSizeBy) IsValid() bool {
	for _, existing := range allowedTreeMapSizeByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TreeMapSizeBy value
func (v TreeMapSizeBy) Ptr() *TreeMapSizeBy {
	return &v
}

type NullableTreeMapSizeBy struct {
	value *TreeMapSizeBy
	isSet bool
}

func (v NullableTreeMapSizeBy) Get() *TreeMapSizeBy {
	return v.value
}

func (v *NullableTreeMapSizeBy) Set(val *TreeMapSizeBy) {
	v.value = val
	v.isSet = true
}

func (v NullableTreeMapSizeBy) IsSet() bool {
	return v.isSet
}

func (v *NullableTreeMapSizeBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTreeMapSizeBy(val *TreeMapSizeBy) *NullableTreeMapSizeBy {
	return &NullableTreeMapSizeBy{value: val, isSet: true}
}

func (v NullableTreeMapSizeBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTreeMapSizeBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
