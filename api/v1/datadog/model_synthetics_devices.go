/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// SyntheticsDevices TODO.
type SyntheticsDevices struct {
	// TODO.
	Devices *[]SyntheticsDevice `json:"devices,omitempty"`
}

// NewSyntheticsDevices instantiates a new SyntheticsDevices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticsDevices() *SyntheticsDevices {
	this := SyntheticsDevices{}
	return &this
}

// NewSyntheticsDevicesWithDefaults instantiates a new SyntheticsDevices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticsDevicesWithDefaults() *SyntheticsDevices {
	this := SyntheticsDevices{}
	return &this
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *SyntheticsDevices) GetDevices() []SyntheticsDevice {
	if o == nil || o.Devices == nil {
		var ret []SyntheticsDevice
		return ret
	}
	return *o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsDevices) GetDevicesOk() (*[]SyntheticsDevice, bool) {
	if o == nil || o.Devices == nil {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *SyntheticsDevices) HasDevices() bool {
	if o != nil && o.Devices != nil {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []SyntheticsDevice and assigns it to the Devices field.
func (o *SyntheticsDevices) SetDevices(v []SyntheticsDevice) {
	o.Devices = &v
}

func (o SyntheticsDevices) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Devices != nil {
		toSerialize["devices"] = o.Devices
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticsDevices struct {
	value *SyntheticsDevices
	isSet bool
}

func (v NullableSyntheticsDevices) Get() *SyntheticsDevices {
	return v.value
}

func (v *NullableSyntheticsDevices) Set(val *SyntheticsDevices) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticsDevices) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticsDevices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticsDevices(val *SyntheticsDevices) *NullableSyntheticsDevices {
	return &NullableSyntheticsDevices{value: val, isSet: true}
}

func (v NullableSyntheticsDevices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticsDevices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
