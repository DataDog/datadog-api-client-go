/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// TimeSeriesFormulaAndFunctionEventQueryGroupBy List of objects used to group by.
type TimeSeriesFormulaAndFunctionEventQueryGroupBy struct {
	// Event facet.
	Facet string `json:"facet"`
	// Number of groups to return.
	Limit *int64                                             `json:"limit,omitempty"`
	Sort  *TimeSeriesFormulaAndFunctionEventQueryGroupBySort `json:"sort,omitempty"`
}

// NewTimeSeriesFormulaAndFunctionEventQueryGroupBy instantiates a new TimeSeriesFormulaAndFunctionEventQueryGroupBy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeSeriesFormulaAndFunctionEventQueryGroupBy(facet string) *TimeSeriesFormulaAndFunctionEventQueryGroupBy {
	this := TimeSeriesFormulaAndFunctionEventQueryGroupBy{}
	this.Facet = facet
	return &this
}

// NewTimeSeriesFormulaAndFunctionEventQueryGroupByWithDefaults instantiates a new TimeSeriesFormulaAndFunctionEventQueryGroupBy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeSeriesFormulaAndFunctionEventQueryGroupByWithDefaults() *TimeSeriesFormulaAndFunctionEventQueryGroupBy {
	this := TimeSeriesFormulaAndFunctionEventQueryGroupBy{}
	return &this
}

// GetFacet returns the Facet field value
func (o *TimeSeriesFormulaAndFunctionEventQueryGroupBy) GetFacet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Facet
}

// GetFacetOk returns a tuple with the Facet field value
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryGroupBy) GetFacetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Facet, true
}

// SetFacet sets field value
func (o *TimeSeriesFormulaAndFunctionEventQueryGroupBy) SetFacet(v string) {
	o.Facet = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *TimeSeriesFormulaAndFunctionEventQueryGroupBy) GetLimit() int64 {
	if o == nil || o.Limit == nil {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryGroupBy) GetLimitOk() (*int64, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryGroupBy) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *TimeSeriesFormulaAndFunctionEventQueryGroupBy) SetLimit(v int64) {
	o.Limit = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *TimeSeriesFormulaAndFunctionEventQueryGroupBy) GetSort() TimeSeriesFormulaAndFunctionEventQueryGroupBySort {
	if o == nil || o.Sort == nil {
		var ret TimeSeriesFormulaAndFunctionEventQueryGroupBySort
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryGroupBy) GetSortOk() (*TimeSeriesFormulaAndFunctionEventQueryGroupBySort, bool) {
	if o == nil || o.Sort == nil {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryGroupBy) HasSort() bool {
	if o != nil && o.Sort != nil {
		return true
	}

	return false
}

// SetSort gets a reference to the given TimeSeriesFormulaAndFunctionEventQueryGroupBySort and assigns it to the Sort field.
func (o *TimeSeriesFormulaAndFunctionEventQueryGroupBy) SetSort(v TimeSeriesFormulaAndFunctionEventQueryGroupBySort) {
	o.Sort = &v
}

func (o TimeSeriesFormulaAndFunctionEventQueryGroupBy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["facet"] = o.Facet
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.Sort != nil {
		toSerialize["sort"] = o.Sort
	}
	return json.Marshal(toSerialize)
}

type NullableTimeSeriesFormulaAndFunctionEventQueryGroupBy struct {
	value *TimeSeriesFormulaAndFunctionEventQueryGroupBy
	isSet bool
}

func (v NullableTimeSeriesFormulaAndFunctionEventQueryGroupBy) Get() *TimeSeriesFormulaAndFunctionEventQueryGroupBy {
	return v.value
}

func (v *NullableTimeSeriesFormulaAndFunctionEventQueryGroupBy) Set(val *TimeSeriesFormulaAndFunctionEventQueryGroupBy) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeSeriesFormulaAndFunctionEventQueryGroupBy) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeSeriesFormulaAndFunctionEventQueryGroupBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeSeriesFormulaAndFunctionEventQueryGroupBy(val *TimeSeriesFormulaAndFunctionEventQueryGroupBy) *NullableTimeSeriesFormulaAndFunctionEventQueryGroupBy {
	return &NullableTimeSeriesFormulaAndFunctionEventQueryGroupBy{value: val, isSet: true}
}

func (v NullableTimeSeriesFormulaAndFunctionEventQueryGroupBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeSeriesFormulaAndFunctionEventQueryGroupBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
