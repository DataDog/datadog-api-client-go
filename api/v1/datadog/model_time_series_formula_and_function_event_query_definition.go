/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// TimeSeriesFormulaAndFunctionEventQueryDefinition A timeseries formula and functions events query.
type TimeSeriesFormulaAndFunctionEventQueryDefinition struct {
	Compute    TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute `json:"compute"`
	DataSource FormulaAndFunctionEventsDataSource                      `json:"data_source"`
	// Group by options.
	GroupBy *[]TimeSeriesFormulaAndFunctionEventQueryDefinitionGroupBy `json:"group_by,omitempty"`
	// An array of index names to query in the stream. Omit or use `[]` to query all indexes at once.
	Indexes *[]string `json:"indexes,omitempty"`
	// Name of the query for use in formulas.
	Name   *string                                                 `json:"name,omitempty"`
	Search *TimeSeriesFormulaAndFunctionEventQueryDefinitionSearch `json:"search,omitempty"`
}

// NewTimeSeriesFormulaAndFunctionEventQueryDefinition instantiates a new TimeSeriesFormulaAndFunctionEventQueryDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeSeriesFormulaAndFunctionEventQueryDefinition(compute TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute, dataSource FormulaAndFunctionEventsDataSource) *TimeSeriesFormulaAndFunctionEventQueryDefinition {
	this := TimeSeriesFormulaAndFunctionEventQueryDefinition{}
	this.Compute = compute
	this.DataSource = dataSource
	return &this
}

// NewTimeSeriesFormulaAndFunctionEventQueryDefinitionWithDefaults instantiates a new TimeSeriesFormulaAndFunctionEventQueryDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeSeriesFormulaAndFunctionEventQueryDefinitionWithDefaults() *TimeSeriesFormulaAndFunctionEventQueryDefinition {
	this := TimeSeriesFormulaAndFunctionEventQueryDefinition{}
	return &this
}

// GetCompute returns the Compute field value
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) GetCompute() TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute {
	if o == nil {
		var ret TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute
		return ret
	}

	return o.Compute
}

// GetComputeOk returns a tuple with the Compute field value
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) GetComputeOk() (*TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Compute, true
}

// SetCompute sets field value
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) SetCompute(v TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) {
	o.Compute = v
}

// GetDataSource returns the DataSource field value
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) GetDataSource() FormulaAndFunctionEventsDataSource {
	if o == nil {
		var ret FormulaAndFunctionEventsDataSource
		return ret
	}

	return o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) GetDataSourceOk() (*FormulaAndFunctionEventsDataSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSource, true
}

// SetDataSource sets field value
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) SetDataSource(v FormulaAndFunctionEventsDataSource) {
	o.DataSource = v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) GetGroupBy() []TimeSeriesFormulaAndFunctionEventQueryDefinitionGroupBy {
	if o == nil || o.GroupBy == nil {
		var ret []TimeSeriesFormulaAndFunctionEventQueryDefinitionGroupBy
		return ret
	}
	return *o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) GetGroupByOk() (*[]TimeSeriesFormulaAndFunctionEventQueryDefinitionGroupBy, bool) {
	if o == nil || o.GroupBy == nil {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) HasGroupBy() bool {
	if o != nil && o.GroupBy != nil {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given []TimeSeriesFormulaAndFunctionEventQueryDefinitionGroupBy and assigns it to the GroupBy field.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) SetGroupBy(v []TimeSeriesFormulaAndFunctionEventQueryDefinitionGroupBy) {
	o.GroupBy = &v
}

// GetIndexes returns the Indexes field value if set, zero value otherwise.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) GetIndexes() []string {
	if o == nil || o.Indexes == nil {
		var ret []string
		return ret
	}
	return *o.Indexes
}

// GetIndexesOk returns a tuple with the Indexes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) GetIndexesOk() (*[]string, bool) {
	if o == nil || o.Indexes == nil {
		return nil, false
	}
	return o.Indexes, true
}

// HasIndexes returns a boolean if a field has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) HasIndexes() bool {
	if o != nil && o.Indexes != nil {
		return true
	}

	return false
}

// SetIndexes gets a reference to the given []string and assigns it to the Indexes field.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) SetIndexes(v []string) {
	o.Indexes = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) SetName(v string) {
	o.Name = &v
}

// GetSearch returns the Search field value if set, zero value otherwise.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) GetSearch() TimeSeriesFormulaAndFunctionEventQueryDefinitionSearch {
	if o == nil || o.Search == nil {
		var ret TimeSeriesFormulaAndFunctionEventQueryDefinitionSearch
		return ret
	}
	return *o.Search
}

// GetSearchOk returns a tuple with the Search field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) GetSearchOk() (*TimeSeriesFormulaAndFunctionEventQueryDefinitionSearch, bool) {
	if o == nil || o.Search == nil {
		return nil, false
	}
	return o.Search, true
}

// HasSearch returns a boolean if a field has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) HasSearch() bool {
	if o != nil && o.Search != nil {
		return true
	}

	return false
}

// SetSearch gets a reference to the given TimeSeriesFormulaAndFunctionEventQueryDefinitionSearch and assigns it to the Search field.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinition) SetSearch(v TimeSeriesFormulaAndFunctionEventQueryDefinitionSearch) {
	o.Search = &v
}

func (o TimeSeriesFormulaAndFunctionEventQueryDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["compute"] = o.Compute
	}
	if true {
		toSerialize["data_source"] = o.DataSource
	}
	if o.GroupBy != nil {
		toSerialize["group_by"] = o.GroupBy
	}
	if o.Indexes != nil {
		toSerialize["indexes"] = o.Indexes
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Search != nil {
		toSerialize["search"] = o.Search
	}
	return json.Marshal(toSerialize)
}

type NullableTimeSeriesFormulaAndFunctionEventQueryDefinition struct {
	value *TimeSeriesFormulaAndFunctionEventQueryDefinition
	isSet bool
}

func (v NullableTimeSeriesFormulaAndFunctionEventQueryDefinition) Get() *TimeSeriesFormulaAndFunctionEventQueryDefinition {
	return v.value
}

func (v *NullableTimeSeriesFormulaAndFunctionEventQueryDefinition) Set(val *TimeSeriesFormulaAndFunctionEventQueryDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeSeriesFormulaAndFunctionEventQueryDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeSeriesFormulaAndFunctionEventQueryDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeSeriesFormulaAndFunctionEventQueryDefinition(val *TimeSeriesFormulaAndFunctionEventQueryDefinition) *NullableTimeSeriesFormulaAndFunctionEventQueryDefinition {
	return &NullableTimeSeriesFormulaAndFunctionEventQueryDefinition{value: val, isSet: true}
}

func (v NullableTimeSeriesFormulaAndFunctionEventQueryDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeSeriesFormulaAndFunctionEventQueryDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
