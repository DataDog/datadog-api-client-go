/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// AwsAccount struct for AwsAccount
type AwsAccount struct {
	AccessKeyId                   *string          `json:"access_key_id,omitempty"`
	AccountId                     *string          `json:"account_id,omitempty"`
	AccountSpecificNamespaceRules *map[string]bool `json:"account_specific_namespace_rules,omitempty"`
	FilterTags                    *[]string        `json:"filter_tags,omitempty"`
	HostTags                      *[]string        `json:"host_tags,omitempty"`
	RoleName                      *string          `json:"role_name,omitempty"`
}

// NewAwsAccount instantiates a new AwsAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsAccount() *AwsAccount {
	this := AwsAccount{}
	return &this
}

// NewAwsAccountWithDefaults instantiates a new AwsAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsAccountWithDefaults() *AwsAccount {
	this := AwsAccount{}
	return &this
}

// GetAccessKeyId returns the AccessKeyId field value if set, zero value otherwise.
func (o *AwsAccount) GetAccessKeyId() string {
	if o == nil || o.AccessKeyId == nil {
		var ret string
		return ret
	}
	return *o.AccessKeyId
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AwsAccount) GetAccessKeyIdOk() (string, bool) {
	if o == nil || o.AccessKeyId == nil {
		var ret string
		return ret, false
	}
	return *o.AccessKeyId, true
}

// HasAccessKeyId returns a boolean if a field has been set.
func (o *AwsAccount) HasAccessKeyId() bool {
	if o != nil && o.AccessKeyId != nil {
		return true
	}

	return false
}

// SetAccessKeyId gets a reference to the given string and assigns it to the AccessKeyId field.
func (o *AwsAccount) SetAccessKeyId(v string) {
	o.AccessKeyId = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *AwsAccount) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AwsAccount) GetAccountIdOk() (string, bool) {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret, false
	}
	return *o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *AwsAccount) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *AwsAccount) SetAccountId(v string) {
	o.AccountId = &v
}

// GetAccountSpecificNamespaceRules returns the AccountSpecificNamespaceRules field value if set, zero value otherwise.
func (o *AwsAccount) GetAccountSpecificNamespaceRules() map[string]bool {
	if o == nil || o.AccountSpecificNamespaceRules == nil {
		var ret map[string]bool
		return ret
	}
	return *o.AccountSpecificNamespaceRules
}

// GetAccountSpecificNamespaceRulesOk returns a tuple with the AccountSpecificNamespaceRules field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AwsAccount) GetAccountSpecificNamespaceRulesOk() (map[string]bool, bool) {
	if o == nil || o.AccountSpecificNamespaceRules == nil {
		var ret map[string]bool
		return ret, false
	}
	return *o.AccountSpecificNamespaceRules, true
}

// HasAccountSpecificNamespaceRules returns a boolean if a field has been set.
func (o *AwsAccount) HasAccountSpecificNamespaceRules() bool {
	if o != nil && o.AccountSpecificNamespaceRules != nil {
		return true
	}

	return false
}

// SetAccountSpecificNamespaceRules gets a reference to the given map[string]bool and assigns it to the AccountSpecificNamespaceRules field.
func (o *AwsAccount) SetAccountSpecificNamespaceRules(v map[string]bool) {
	o.AccountSpecificNamespaceRules = &v
}

// GetFilterTags returns the FilterTags field value if set, zero value otherwise.
func (o *AwsAccount) GetFilterTags() []string {
	if o == nil || o.FilterTags == nil {
		var ret []string
		return ret
	}
	return *o.FilterTags
}

// GetFilterTagsOk returns a tuple with the FilterTags field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AwsAccount) GetFilterTagsOk() ([]string, bool) {
	if o == nil || o.FilterTags == nil {
		var ret []string
		return ret, false
	}
	return *o.FilterTags, true
}

// HasFilterTags returns a boolean if a field has been set.
func (o *AwsAccount) HasFilterTags() bool {
	if o != nil && o.FilterTags != nil {
		return true
	}

	return false
}

// SetFilterTags gets a reference to the given []string and assigns it to the FilterTags field.
func (o *AwsAccount) SetFilterTags(v []string) {
	o.FilterTags = &v
}

// GetHostTags returns the HostTags field value if set, zero value otherwise.
func (o *AwsAccount) GetHostTags() []string {
	if o == nil || o.HostTags == nil {
		var ret []string
		return ret
	}
	return *o.HostTags
}

// GetHostTagsOk returns a tuple with the HostTags field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AwsAccount) GetHostTagsOk() ([]string, bool) {
	if o == nil || o.HostTags == nil {
		var ret []string
		return ret, false
	}
	return *o.HostTags, true
}

// HasHostTags returns a boolean if a field has been set.
func (o *AwsAccount) HasHostTags() bool {
	if o != nil && o.HostTags != nil {
		return true
	}

	return false
}

// SetHostTags gets a reference to the given []string and assigns it to the HostTags field.
func (o *AwsAccount) SetHostTags(v []string) {
	o.HostTags = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *AwsAccount) GetRoleName() string {
	if o == nil || o.RoleName == nil {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AwsAccount) GetRoleNameOk() (string, bool) {
	if o == nil || o.RoleName == nil {
		var ret string
		return ret, false
	}
	return *o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *AwsAccount) HasRoleName() bool {
	if o != nil && o.RoleName != nil {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *AwsAccount) SetRoleName(v string) {
	o.RoleName = &v
}

func (o AwsAccount) MarshalJSON() ([]byte, error) {
	//TODO: serialize parents?
	toSerialize := map[string]interface{}{}
	if o.AccessKeyId != nil {
		toSerialize["access_key_id"] = o.AccessKeyId
	}
	if o.AccountId != nil {
		toSerialize["account_id"] = o.AccountId
	}
	if o.AccountSpecificNamespaceRules != nil {
		toSerialize["account_specific_namespace_rules"] = o.AccountSpecificNamespaceRules
	}
	if o.FilterTags != nil {
		toSerialize["filter_tags"] = o.FilterTags
	}
	if o.HostTags != nil {
		toSerialize["host_tags"] = o.HostTags
	}
	if o.RoleName != nil {
		toSerialize["role_name"] = o.RoleName
	}
	return json.Marshal(toSerialize)
}

type NullableAwsAccount struct {
	value *AwsAccount
	isSet bool
}

func (v NullableAwsAccount) Get() *AwsAccount {
	return v.value
}

func (v NullableAwsAccount) Set(val *AwsAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsAccount) IsSet() bool {
	return v.isSet
}

func (v NullableAwsAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsAccount(val *AwsAccount) *NullableAwsAccount {
	return &NullableAwsAccount{value: val, isSet: true}
}

func (v NullableAwsAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
