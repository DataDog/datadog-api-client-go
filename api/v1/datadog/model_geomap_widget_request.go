/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// GeomapWidgetRequest An updated geomap widget.
type GeomapWidgetRequest struct {
	LogQuery *LogQueryDefinition `json:"log_query,omitempty"`
	// The widget metrics query.
	Q        *string             `json:"q,omitempty"`
	RumQuery *LogQueryDefinition `json:"rum_query,omitempty"`
}

// NewGeomapWidgetRequest instantiates a new GeomapWidgetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeomapWidgetRequest() *GeomapWidgetRequest {
	this := GeomapWidgetRequest{}
	return &this
}

// NewGeomapWidgetRequestWithDefaults instantiates a new GeomapWidgetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeomapWidgetRequestWithDefaults() *GeomapWidgetRequest {
	this := GeomapWidgetRequest{}
	return &this
}

// GetLogQuery returns the LogQuery field value if set, zero value otherwise.
func (o *GeomapWidgetRequest) GetLogQuery() LogQueryDefinition {
	if o == nil || o.LogQuery == nil {
		var ret LogQueryDefinition
		return ret
	}
	return *o.LogQuery
}

// GetLogQueryOk returns a tuple with the LogQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeomapWidgetRequest) GetLogQueryOk() (*LogQueryDefinition, bool) {
	if o == nil || o.LogQuery == nil {
		return nil, false
	}
	return o.LogQuery, true
}

// HasLogQuery returns a boolean if a field has been set.
func (o *GeomapWidgetRequest) HasLogQuery() bool {
	if o != nil && o.LogQuery != nil {
		return true
	}

	return false
}

// SetLogQuery gets a reference to the given LogQueryDefinition and assigns it to the LogQuery field.
func (o *GeomapWidgetRequest) SetLogQuery(v LogQueryDefinition) {
	o.LogQuery = &v
}

// GetQ returns the Q field value if set, zero value otherwise.
func (o *GeomapWidgetRequest) GetQ() string {
	if o == nil || o.Q == nil {
		var ret string
		return ret
	}
	return *o.Q
}

// GetQOk returns a tuple with the Q field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeomapWidgetRequest) GetQOk() (*string, bool) {
	if o == nil || o.Q == nil {
		return nil, false
	}
	return o.Q, true
}

// HasQ returns a boolean if a field has been set.
func (o *GeomapWidgetRequest) HasQ() bool {
	if o != nil && o.Q != nil {
		return true
	}

	return false
}

// SetQ gets a reference to the given string and assigns it to the Q field.
func (o *GeomapWidgetRequest) SetQ(v string) {
	o.Q = &v
}

// GetRumQuery returns the RumQuery field value if set, zero value otherwise.
func (o *GeomapWidgetRequest) GetRumQuery() LogQueryDefinition {
	if o == nil || o.RumQuery == nil {
		var ret LogQueryDefinition
		return ret
	}
	return *o.RumQuery
}

// GetRumQueryOk returns a tuple with the RumQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeomapWidgetRequest) GetRumQueryOk() (*LogQueryDefinition, bool) {
	if o == nil || o.RumQuery == nil {
		return nil, false
	}
	return o.RumQuery, true
}

// HasRumQuery returns a boolean if a field has been set.
func (o *GeomapWidgetRequest) HasRumQuery() bool {
	if o != nil && o.RumQuery != nil {
		return true
	}

	return false
}

// SetRumQuery gets a reference to the given LogQueryDefinition and assigns it to the RumQuery field.
func (o *GeomapWidgetRequest) SetRumQuery(v LogQueryDefinition) {
	o.RumQuery = &v
}

func (o GeomapWidgetRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LogQuery != nil {
		toSerialize["log_query"] = o.LogQuery
	}
	if o.Q != nil {
		toSerialize["q"] = o.Q
	}
	if o.RumQuery != nil {
		toSerialize["rum_query"] = o.RumQuery
	}
	return json.Marshal(toSerialize)
}

type NullableGeomapWidgetRequest struct {
	value *GeomapWidgetRequest
	isSet bool
}

func (v NullableGeomapWidgetRequest) Get() *GeomapWidgetRequest {
	return v.value
}

func (v *NullableGeomapWidgetRequest) Set(val *GeomapWidgetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGeomapWidgetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGeomapWidgetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeomapWidgetRequest(val *GeomapWidgetRequest) *NullableGeomapWidgetRequest {
	return &NullableGeomapWidgetRequest{value: val, isSet: true}
}

func (v NullableGeomapWidgetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeomapWidgetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
