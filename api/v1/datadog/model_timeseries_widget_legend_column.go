/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// TimeseriesWidgetLegendColumn Legend column.
type TimeseriesWidgetLegendColumn string

// List of TimeseriesWidgetLegendColumn
const (
	TIMESERIESWIDGETLEGENDCOLUMN_VALUE TimeseriesWidgetLegendColumn = "value"
	TIMESERIESWIDGETLEGENDCOLUMN_AVG   TimeseriesWidgetLegendColumn = "avg"
	TIMESERIESWIDGETLEGENDCOLUMN_SUM   TimeseriesWidgetLegendColumn = "sum"
	TIMESERIESWIDGETLEGENDCOLUMN_MIN   TimeseriesWidgetLegendColumn = "min"
	TIMESERIESWIDGETLEGENDCOLUMN_MAX   TimeseriesWidgetLegendColumn = "max"
)

var allowedTimeseriesWidgetLegendColumnEnumValues = []TimeseriesWidgetLegendColumn{
	"value",
	"avg",
	"sum",
	"min",
	"max",
}

func (w *TimeseriesWidgetLegendColumn) GetAllowedValues() []TimeseriesWidgetLegendColumn {
	return allowedTimeseriesWidgetLegendColumnEnumValues
}

func (v *TimeseriesWidgetLegendColumn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeseriesWidgetLegendColumn(value)
	for _, existing := range allowedTimeseriesWidgetLegendColumnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimeseriesWidgetLegendColumn", value)
}

// NewTimeseriesWidgetLegendColumnFromValue returns a pointer to a valid TimeseriesWidgetLegendColumn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeseriesWidgetLegendColumnFromValue(v string) (*TimeseriesWidgetLegendColumn, error) {
	ev := TimeseriesWidgetLegendColumn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimeseriesWidgetLegendColumn: valid values are %v", v, allowedTimeseriesWidgetLegendColumnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeseriesWidgetLegendColumn) IsValid() bool {
	for _, existing := range allowedTimeseriesWidgetLegendColumnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeseriesWidgetLegendColumn value
func (v TimeseriesWidgetLegendColumn) Ptr() *TimeseriesWidgetLegendColumn {
	return &v
}

type NullableTimeseriesWidgetLegendColumn struct {
	value *TimeseriesWidgetLegendColumn
	isSet bool
}

func (v NullableTimeseriesWidgetLegendColumn) Get() *TimeseriesWidgetLegendColumn {
	return v.value
}

func (v *NullableTimeseriesWidgetLegendColumn) Set(val *TimeseriesWidgetLegendColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeseriesWidgetLegendColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeseriesWidgetLegendColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeseriesWidgetLegendColumn(val *TimeseriesWidgetLegendColumn) *NullableTimeseriesWidgetLegendColumn {
	return &NullableTimeseriesWidgetLegendColumn{value: val, isSet: true}
}

func (v NullableTimeseriesWidgetLegendColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeseriesWidgetLegendColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
