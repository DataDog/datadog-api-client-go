/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"bytes"
	"encoding/json"
)

// HostTotals struct for HostTotals
type HostTotals struct {
	TotalActive *int64 `json:"total_active,omitempty"`
	TotalUp     *int64 `json:"total_up,omitempty"`
}

// GetTotalActive returns the TotalActive field value if set, zero value otherwise.
func (o *HostTotals) GetTotalActive() int64 {
	if o == nil || o.TotalActive == nil {
		var ret int64
		return ret
	}
	return *o.TotalActive
}

// GetTotalActiveOk returns a tuple with the TotalActive field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *HostTotals) GetTotalActiveOk() (int64, bool) {
	if o == nil || o.TotalActive == nil {
		var ret int64
		return ret, false
	}
	return *o.TotalActive, true
}

// HasTotalActive returns a boolean if a field has been set.
func (o *HostTotals) HasTotalActive() bool {
	if o != nil && o.TotalActive != nil {
		return true
	}

	return false
}

// SetTotalActive gets a reference to the given int64 and assigns it to the TotalActive field.
func (o *HostTotals) SetTotalActive(v int64) {
	o.TotalActive = &v
}

// GetTotalUp returns the TotalUp field value if set, zero value otherwise.
func (o *HostTotals) GetTotalUp() int64 {
	if o == nil || o.TotalUp == nil {
		var ret int64
		return ret
	}
	return *o.TotalUp
}

// GetTotalUpOk returns a tuple with the TotalUp field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *HostTotals) GetTotalUpOk() (int64, bool) {
	if o == nil || o.TotalUp == nil {
		var ret int64
		return ret, false
	}
	return *o.TotalUp, true
}

// HasTotalUp returns a boolean if a field has been set.
func (o *HostTotals) HasTotalUp() bool {
	if o != nil && o.TotalUp != nil {
		return true
	}

	return false
}

// SetTotalUp gets a reference to the given int64 and assigns it to the TotalUp field.
func (o *HostTotals) SetTotalUp(v int64) {
	o.TotalUp = &v
}

type NullableHostTotals struct {
	Value        HostTotals
	ExplicitNull bool
}

func (v NullableHostTotals) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableHostTotals) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
