/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"time"
)

// ChargebackOrgMonth Cost per product for a sub-org for a given month.
type ChargebackOrgMonth struct {
	// Charges by product and charge type.
	Charges *[]ChargebackSummaryCharge `json:"charges,omitempty"`
	// The month for the usage.
	Date *time.Time `json:"date,omitempty"`
	// ID of the sub-org.
	OrgId *int64 `json:"org_id,omitempty"`
	// Total cost for all products for the sub-org within the month.
	TotalCost *float64 `json:"total_cost,omitempty"`
	// UnparsedObject contains the raw value of the object if there was an error when deserializing into the struct
	UnparsedObject map[string]interface{} `json:-`
}

// NewChargebackOrgMonth instantiates a new ChargebackOrgMonth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargebackOrgMonth() *ChargebackOrgMonth {
	this := ChargebackOrgMonth{}
	return &this
}

// NewChargebackOrgMonthWithDefaults instantiates a new ChargebackOrgMonth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargebackOrgMonthWithDefaults() *ChargebackOrgMonth {
	this := ChargebackOrgMonth{}
	return &this
}

// GetCharges returns the Charges field value if set, zero value otherwise.
func (o *ChargebackOrgMonth) GetCharges() []ChargebackSummaryCharge {
	if o == nil || o.Charges == nil {
		var ret []ChargebackSummaryCharge
		return ret
	}
	return *o.Charges
}

// GetChargesOk returns a tuple with the Charges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargebackOrgMonth) GetChargesOk() (*[]ChargebackSummaryCharge, bool) {
	if o == nil || o.Charges == nil {
		return nil, false
	}
	return o.Charges, true
}

// HasCharges returns a boolean if a field has been set.
func (o *ChargebackOrgMonth) HasCharges() bool {
	if o != nil && o.Charges != nil {
		return true
	}

	return false
}

// SetCharges gets a reference to the given []ChargebackSummaryCharge and assigns it to the Charges field.
func (o *ChargebackOrgMonth) SetCharges(v []ChargebackSummaryCharge) {
	o.Charges = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ChargebackOrgMonth) GetDate() time.Time {
	if o == nil || o.Date == nil {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargebackOrgMonth) GetDateOk() (*time.Time, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ChargebackOrgMonth) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *ChargebackOrgMonth) SetDate(v time.Time) {
	o.Date = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *ChargebackOrgMonth) GetOrgId() int64 {
	if o == nil || o.OrgId == nil {
		var ret int64
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargebackOrgMonth) GetOrgIdOk() (*int64, bool) {
	if o == nil || o.OrgId == nil {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *ChargebackOrgMonth) HasOrgId() bool {
	if o != nil && o.OrgId != nil {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given int64 and assigns it to the OrgId field.
func (o *ChargebackOrgMonth) SetOrgId(v int64) {
	o.OrgId = &v
}

// GetTotalCost returns the TotalCost field value if set, zero value otherwise.
func (o *ChargebackOrgMonth) GetTotalCost() float64 {
	if o == nil || o.TotalCost == nil {
		var ret float64
		return ret
	}
	return *o.TotalCost
}

// GetTotalCostOk returns a tuple with the TotalCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargebackOrgMonth) GetTotalCostOk() (*float64, bool) {
	if o == nil || o.TotalCost == nil {
		return nil, false
	}
	return o.TotalCost, true
}

// HasTotalCost returns a boolean if a field has been set.
func (o *ChargebackOrgMonth) HasTotalCost() bool {
	if o != nil && o.TotalCost != nil {
		return true
	}

	return false
}

// SetTotalCost gets a reference to the given float64 and assigns it to the TotalCost field.
func (o *ChargebackOrgMonth) SetTotalCost(v float64) {
	o.TotalCost = &v
}

func (o ChargebackOrgMonth) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UnparsedObject != nil {
		return json.Marshal(o.UnparsedObject)
	}
	if o.Charges != nil {
		toSerialize["charges"] = o.Charges
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.OrgId != nil {
		toSerialize["org_id"] = o.OrgId
	}
	if o.TotalCost != nil {
		toSerialize["total_cost"] = o.TotalCost
	}
	return json.Marshal(toSerialize)
}

func (o *ChargebackOrgMonth) UnmarshalJSON(bytes []byte) (err error) {
	raw := map[string]interface{}{}
	all := struct {
		Charges   *[]ChargebackSummaryCharge `json:"charges,omitempty"`
		Date      *time.Time                 `json:"date,omitempty"`
		OrgId     *int64                     `json:"org_id,omitempty"`
		TotalCost *float64                   `json:"total_cost,omitempty"`
	}{}
	err = json.Unmarshal(bytes, &all)
	if err != nil {
		err = json.Unmarshal(bytes, &raw)
		if err != nil {
			return err
		}
		o.UnparsedObject = raw
		return nil
	}
	o.Charges = all.Charges
	o.Date = all.Date
	o.OrgId = all.OrgId
	o.TotalCost = all.TotalCost
	return nil
}

type NullableChargebackOrgMonth struct {
	value *ChargebackOrgMonth
	isSet bool
}

func (v NullableChargebackOrgMonth) Get() *ChargebackOrgMonth {
	return v.value
}

func (v *NullableChargebackOrgMonth) Set(val *ChargebackOrgMonth) {
	v.value = val
	v.isSet = true
}

func (v NullableChargebackOrgMonth) IsSet() bool {
	return v.isSet
}

func (v *NullableChargebackOrgMonth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargebackOrgMonth(val *ChargebackOrgMonth) *NullableChargebackOrgMonth {
	return &NullableChargebackOrgMonth{value: val, isSet: true}
}

func (v NullableChargebackOrgMonth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargebackOrgMonth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
