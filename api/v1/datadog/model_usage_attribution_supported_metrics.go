/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// UsageAttributionSupportedMetrics Supported fields for usage attribution requests (valid requests contain one or more metrics, or `*` for all).
type UsageAttributionSupportedMetrics string

// List of UsageAttributionSupportedMetrics
const (
	USAGEATTRIBUTIONSUPPORTEDMETRICS_CUSTOM_TIMESERIES_USAGE       UsageAttributionSupportedMetrics = "custom_timeseries_usage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_CONTAINER_USAGE               UsageAttributionSupportedMetrics = "container_usage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_SNMP_PERCENTAGE               UsageAttributionSupportedMetrics = "snmp_percentage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_APM_HOST_USAGE                UsageAttributionSupportedMetrics = "apm_host_usage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_BROWSER_USAGE                 UsageAttributionSupportedMetrics = "browser_usage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_NPM_HOST_PERCENTAGE           UsageAttributionSupportedMetrics = "npm_host_percentage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_INFRA_HOST_USAGE              UsageAttributionSupportedMetrics = "infra_host_usage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_CUSTOM_TIMESERIES_PERCENTAGE  UsageAttributionSupportedMetrics = "custom_timeseries_percentage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_CONTAINER_PERCENTAGE          UsageAttributionSupportedMetrics = "container_percentage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_LAMBDA_USAGE                  UsageAttributionSupportedMetrics = "lambda_usage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_API_USAGE                     UsageAttributionSupportedMetrics = "api_usage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_APM_HOST_PERCENTAGE           UsageAttributionSupportedMetrics = "apm_host_percentage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_INFRA_HOST_PERCENTAGE         UsageAttributionSupportedMetrics = "infra_host_percentage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_SNMP_USAGE                    UsageAttributionSupportedMetrics = "snmp_usage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_BROWSER_PERCENTAGE            UsageAttributionSupportedMetrics = "browser_percentage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_API_PERCENTAGE                UsageAttributionSupportedMetrics = "api_percentage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_LAMBDA_PERCENTAGE             UsageAttributionSupportedMetrics = "lambda_percentage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_NPM_HOST_USAGE                UsageAttributionSupportedMetrics = "npm_host_usage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_LAMBDA_FUNCTIONS_USAGE        UsageAttributionSupportedMetrics = "lambda_functions_usage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_LAMBDA_FUNCTIONS_PERCENTAGE   UsageAttributionSupportedMetrics = "lambda_functions_percentage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_LAMBDA_INVOCATIONS_USAGE      UsageAttributionSupportedMetrics = "lambda_invocations_usage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_LAMBDA_INVOCATIONS_PERCENTAGE UsageAttributionSupportedMetrics = "lambda_invocations_percentage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_FARGATE_USAGE                 UsageAttributionSupportedMetrics = "fargate_usage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_FARGATE_PERCENTAGE            UsageAttributionSupportedMetrics = "fargate_percentage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_PROFILED_HOST_USAGE           UsageAttributionSupportedMetrics = "profiled_host_usage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_PROFILED_HOST_PERCENTAGE      UsageAttributionSupportedMetrics = "profiled_host_percentage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_PROFILED_CONTAINER_USAGE      UsageAttributionSupportedMetrics = "profiled_container_usage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_PROFILED_CONTAINER_PERCENTAGE UsageAttributionSupportedMetrics = "profiled_container_percentage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_DBM_HOST_USAGE                UsageAttributionSupportedMetrics = "dbm_host_usage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_DBM_HOST_PERCENTAGE           UsageAttributionSupportedMetrics = "dbm_host_percentage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_DBM_QUERIES_USAGE             UsageAttributionSupportedMetrics = "dbm_queries_usage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_DBM_QUERIES_PERCENTAGE        UsageAttributionSupportedMetrics = "dbm_queries_percentage"
	USAGEATTRIBUTIONSUPPORTEDMETRICS_ALL                           UsageAttributionSupportedMetrics = "*"
)

var allowedUsageAttributionSupportedMetricsEnumValues = []UsageAttributionSupportedMetrics{
	"custom_timeseries_usage",
	"container_usage",
	"snmp_percentage",
	"apm_host_usage",
	"browser_usage",
	"npm_host_percentage",
	"infra_host_usage",
	"custom_timeseries_percentage",
	"container_percentage",
	"lambda_usage",
	"api_usage",
	"apm_host_percentage",
	"infra_host_percentage",
	"snmp_usage",
	"browser_percentage",
	"api_percentage",
	"lambda_percentage",
	"npm_host_usage",
	"lambda_functions_usage",
	"lambda_functions_percentage",
	"lambda_invocations_usage",
	"lambda_invocations_percentage",
	"fargate_usage",
	"fargate_percentage",
	"profiled_host_usage",
	"profiled_host_percentage",
	"profiled_container_usage",
	"profiled_container_percentage",
	"dbm_host_usage",
	"dbm_host_percentage",
	"dbm_queries_usage",
	"dbm_queries_percentage",
	"*",
}

func (w *UsageAttributionSupportedMetrics) GetAllowedValues() []UsageAttributionSupportedMetrics {
	return allowedUsageAttributionSupportedMetricsEnumValues
}

func (v *UsageAttributionSupportedMetrics) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	*v = UsageAttributionSupportedMetrics(value)
	return nil
}

// NewUsageAttributionSupportedMetricsFromValue returns a pointer to a valid UsageAttributionSupportedMetrics
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUsageAttributionSupportedMetricsFromValue(v string) (*UsageAttributionSupportedMetrics, error) {
	ev := UsageAttributionSupportedMetrics(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UsageAttributionSupportedMetrics: valid values are %v", v, allowedUsageAttributionSupportedMetricsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UsageAttributionSupportedMetrics) IsValid() bool {
	for _, existing := range allowedUsageAttributionSupportedMetricsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UsageAttributionSupportedMetrics value
func (v UsageAttributionSupportedMetrics) Ptr() *UsageAttributionSupportedMetrics {
	return &v
}

type NullableUsageAttributionSupportedMetrics struct {
	value *UsageAttributionSupportedMetrics
	isSet bool
}

func (v NullableUsageAttributionSupportedMetrics) Get() *UsageAttributionSupportedMetrics {
	return v.value
}

func (v *NullableUsageAttributionSupportedMetrics) Set(val *UsageAttributionSupportedMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageAttributionSupportedMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageAttributionSupportedMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageAttributionSupportedMetrics(val *UsageAttributionSupportedMetrics) *NullableUsageAttributionSupportedMetrics {
	return &NullableUsageAttributionSupportedMetrics{value: val, isSet: true}
}

func (v NullableUsageAttributionSupportedMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageAttributionSupportedMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
