/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// ChargebackSummaryCharge Cost breakdown for a product and charge type for a sub-org.
type ChargebackSummaryCharge struct {
	// The subscription type for the usage (`committed`, `on_demand`, or `committed_remaining`).
	ChargeType *string `json:"charge_type,omitempty"`
	// Cost of usage for product attributable to sub-org.
	Cost *float64 `json:"cost,omitempty"`
	// Price in dollars per unit of usage.
	PricePerUnit *float64 `json:"price_per_unit,omitempty"`
	// Name of product.
	ProductName *string `json:"product_name,omitempty"`
	// Number of billed units attributable to sub-org.
	Units *float64 `json:"units,omitempty"`
	// UnparsedObject contains the raw value of the object if there was an error when deserializing into the struct
	UnparsedObject map[string]interface{} `json:-`
}

// NewChargebackSummaryCharge instantiates a new ChargebackSummaryCharge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargebackSummaryCharge() *ChargebackSummaryCharge {
	this := ChargebackSummaryCharge{}
	return &this
}

// NewChargebackSummaryChargeWithDefaults instantiates a new ChargebackSummaryCharge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargebackSummaryChargeWithDefaults() *ChargebackSummaryCharge {
	this := ChargebackSummaryCharge{}
	return &this
}

// GetChargeType returns the ChargeType field value if set, zero value otherwise.
func (o *ChargebackSummaryCharge) GetChargeType() string {
	if o == nil || o.ChargeType == nil {
		var ret string
		return ret
	}
	return *o.ChargeType
}

// GetChargeTypeOk returns a tuple with the ChargeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargebackSummaryCharge) GetChargeTypeOk() (*string, bool) {
	if o == nil || o.ChargeType == nil {
		return nil, false
	}
	return o.ChargeType, true
}

// HasChargeType returns a boolean if a field has been set.
func (o *ChargebackSummaryCharge) HasChargeType() bool {
	if o != nil && o.ChargeType != nil {
		return true
	}

	return false
}

// SetChargeType gets a reference to the given string and assigns it to the ChargeType field.
func (o *ChargebackSummaryCharge) SetChargeType(v string) {
	o.ChargeType = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *ChargebackSummaryCharge) GetCost() float64 {
	if o == nil || o.Cost == nil {
		var ret float64
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargebackSummaryCharge) GetCostOk() (*float64, bool) {
	if o == nil || o.Cost == nil {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *ChargebackSummaryCharge) HasCost() bool {
	if o != nil && o.Cost != nil {
		return true
	}

	return false
}

// SetCost gets a reference to the given float64 and assigns it to the Cost field.
func (o *ChargebackSummaryCharge) SetCost(v float64) {
	o.Cost = &v
}

// GetPricePerUnit returns the PricePerUnit field value if set, zero value otherwise.
func (o *ChargebackSummaryCharge) GetPricePerUnit() float64 {
	if o == nil || o.PricePerUnit == nil {
		var ret float64
		return ret
	}
	return *o.PricePerUnit
}

// GetPricePerUnitOk returns a tuple with the PricePerUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargebackSummaryCharge) GetPricePerUnitOk() (*float64, bool) {
	if o == nil || o.PricePerUnit == nil {
		return nil, false
	}
	return o.PricePerUnit, true
}

// HasPricePerUnit returns a boolean if a field has been set.
func (o *ChargebackSummaryCharge) HasPricePerUnit() bool {
	if o != nil && o.PricePerUnit != nil {
		return true
	}

	return false
}

// SetPricePerUnit gets a reference to the given float64 and assigns it to the PricePerUnit field.
func (o *ChargebackSummaryCharge) SetPricePerUnit(v float64) {
	o.PricePerUnit = &v
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *ChargebackSummaryCharge) GetProductName() string {
	if o == nil || o.ProductName == nil {
		var ret string
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargebackSummaryCharge) GetProductNameOk() (*string, bool) {
	if o == nil || o.ProductName == nil {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *ChargebackSummaryCharge) HasProductName() bool {
	if o != nil && o.ProductName != nil {
		return true
	}

	return false
}

// SetProductName gets a reference to the given string and assigns it to the ProductName field.
func (o *ChargebackSummaryCharge) SetProductName(v string) {
	o.ProductName = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *ChargebackSummaryCharge) GetUnits() float64 {
	if o == nil || o.Units == nil {
		var ret float64
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargebackSummaryCharge) GetUnitsOk() (*float64, bool) {
	if o == nil || o.Units == nil {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *ChargebackSummaryCharge) HasUnits() bool {
	if o != nil && o.Units != nil {
		return true
	}

	return false
}

// SetUnits gets a reference to the given float64 and assigns it to the Units field.
func (o *ChargebackSummaryCharge) SetUnits(v float64) {
	o.Units = &v
}

func (o ChargebackSummaryCharge) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UnparsedObject != nil {
		return json.Marshal(o.UnparsedObject)
	}
	if o.ChargeType != nil {
		toSerialize["charge_type"] = o.ChargeType
	}
	if o.Cost != nil {
		toSerialize["cost"] = o.Cost
	}
	if o.PricePerUnit != nil {
		toSerialize["price_per_unit"] = o.PricePerUnit
	}
	if o.ProductName != nil {
		toSerialize["product_name"] = o.ProductName
	}
	if o.Units != nil {
		toSerialize["units"] = o.Units
	}
	return json.Marshal(toSerialize)
}

func (o *ChargebackSummaryCharge) UnmarshalJSON(bytes []byte) (err error) {
	raw := map[string]interface{}{}
	all := struct {
		ChargeType   *string  `json:"charge_type,omitempty"`
		Cost         *float64 `json:"cost,omitempty"`
		PricePerUnit *float64 `json:"price_per_unit,omitempty"`
		ProductName  *string  `json:"product_name,omitempty"`
		Units        *float64 `json:"units,omitempty"`
	}{}
	err = json.Unmarshal(bytes, &all)
	if err != nil {
		err = json.Unmarshal(bytes, &raw)
		if err != nil {
			return err
		}
		o.UnparsedObject = raw
		return nil
	}
	o.ChargeType = all.ChargeType
	o.Cost = all.Cost
	o.PricePerUnit = all.PricePerUnit
	o.ProductName = all.ProductName
	o.Units = all.Units
	return nil
}

type NullableChargebackSummaryCharge struct {
	value *ChargebackSummaryCharge
	isSet bool
}

func (v NullableChargebackSummaryCharge) Get() *ChargebackSummaryCharge {
	return v.value
}

func (v *NullableChargebackSummaryCharge) Set(val *ChargebackSummaryCharge) {
	v.value = val
	v.isSet = true
}

func (v NullableChargebackSummaryCharge) IsSet() bool {
	return v.isSet
}

func (v *NullableChargebackSummaryCharge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargebackSummaryCharge(val *ChargebackSummaryCharge) *NullableChargebackSummaryCharge {
	return &NullableChargebackSummaryCharge{value: val, isSet: true}
}

func (v NullableChargebackSummaryCharge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargebackSummaryCharge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
