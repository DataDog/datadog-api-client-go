/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// FormulaAndFunctionQueryDefinition - A formula and function query.
type FormulaAndFunctionQueryDefinition struct {
	FormulaAndFunctionEventQueryDefinition   *FormulaAndFunctionEventQueryDefinition
	FormulaAndFunctionMetricQueryDefinition  *FormulaAndFunctionMetricQueryDefinition
	FormulaAndFunctionProcessQueryDefinition *FormulaAndFunctionProcessQueryDefinition
}

// FormulaAndFunctionEventQueryDefinitionAsFormulaAndFunctionQueryDefinition is a convenience function that returns FormulaAndFunctionEventQueryDefinition wrapped in FormulaAndFunctionQueryDefinition
func FormulaAndFunctionEventQueryDefinitionAsFormulaAndFunctionQueryDefinition(v *FormulaAndFunctionEventQueryDefinition) FormulaAndFunctionQueryDefinition {
	return FormulaAndFunctionQueryDefinition{FormulaAndFunctionEventQueryDefinition: v}
}

// FormulaAndFunctionMetricQueryDefinitionAsFormulaAndFunctionQueryDefinition is a convenience function that returns FormulaAndFunctionMetricQueryDefinition wrapped in FormulaAndFunctionQueryDefinition
func FormulaAndFunctionMetricQueryDefinitionAsFormulaAndFunctionQueryDefinition(v *FormulaAndFunctionMetricQueryDefinition) FormulaAndFunctionQueryDefinition {
	return FormulaAndFunctionQueryDefinition{FormulaAndFunctionMetricQueryDefinition: v}
}

// FormulaAndFunctionProcessQueryDefinitionAsFormulaAndFunctionQueryDefinition is a convenience function that returns FormulaAndFunctionProcessQueryDefinition wrapped in FormulaAndFunctionQueryDefinition
func FormulaAndFunctionProcessQueryDefinitionAsFormulaAndFunctionQueryDefinition(v *FormulaAndFunctionProcessQueryDefinition) FormulaAndFunctionQueryDefinition {
	return FormulaAndFunctionQueryDefinition{FormulaAndFunctionProcessQueryDefinition: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *FormulaAndFunctionQueryDefinition) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FormulaAndFunctionEventQueryDefinition
	err = json.Unmarshal(data, &dst.FormulaAndFunctionEventQueryDefinition)
	if err == nil {
		jsonFormulaAndFunctionEventQueryDefinition, _ := json.Marshal(dst.FormulaAndFunctionEventQueryDefinition)
		if string(jsonFormulaAndFunctionEventQueryDefinition) == "{}" { // empty struct
			dst.FormulaAndFunctionEventQueryDefinition = nil
		} else {
			match++
		}
	} else {
		dst.FormulaAndFunctionEventQueryDefinition = nil
	}

	// try to unmarshal data into FormulaAndFunctionMetricQueryDefinition
	err = json.Unmarshal(data, &dst.FormulaAndFunctionMetricQueryDefinition)
	if err == nil {
		jsonFormulaAndFunctionMetricQueryDefinition, _ := json.Marshal(dst.FormulaAndFunctionMetricQueryDefinition)
		if string(jsonFormulaAndFunctionMetricQueryDefinition) == "{}" { // empty struct
			dst.FormulaAndFunctionMetricQueryDefinition = nil
		} else {
			match++
		}
	} else {
		dst.FormulaAndFunctionMetricQueryDefinition = nil
	}

	// try to unmarshal data into FormulaAndFunctionProcessQueryDefinition
	err = json.Unmarshal(data, &dst.FormulaAndFunctionProcessQueryDefinition)
	if err == nil {
		jsonFormulaAndFunctionProcessQueryDefinition, _ := json.Marshal(dst.FormulaAndFunctionProcessQueryDefinition)
		if string(jsonFormulaAndFunctionProcessQueryDefinition) == "{}" { // empty struct
			dst.FormulaAndFunctionProcessQueryDefinition = nil
		} else {
			match++
		}
	} else {
		dst.FormulaAndFunctionProcessQueryDefinition = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FormulaAndFunctionEventQueryDefinition = nil
		dst.FormulaAndFunctionMetricQueryDefinition = nil
		dst.FormulaAndFunctionProcessQueryDefinition = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(FormulaAndFunctionQueryDefinition)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(FormulaAndFunctionQueryDefinition)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FormulaAndFunctionQueryDefinition) MarshalJSON() ([]byte, error) {
	if src.FormulaAndFunctionEventQueryDefinition != nil {
		return json.Marshal(&src.FormulaAndFunctionEventQueryDefinition)
	}

	if src.FormulaAndFunctionMetricQueryDefinition != nil {
		return json.Marshal(&src.FormulaAndFunctionMetricQueryDefinition)
	}

	if src.FormulaAndFunctionProcessQueryDefinition != nil {
		return json.Marshal(&src.FormulaAndFunctionProcessQueryDefinition)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FormulaAndFunctionQueryDefinition) GetActualInstance() interface{} {
	if obj.FormulaAndFunctionEventQueryDefinition != nil {
		return obj.FormulaAndFunctionEventQueryDefinition
	}

	if obj.FormulaAndFunctionMetricQueryDefinition != nil {
		return obj.FormulaAndFunctionMetricQueryDefinition
	}

	if obj.FormulaAndFunctionProcessQueryDefinition != nil {
		return obj.FormulaAndFunctionProcessQueryDefinition
	}

	// all schemas are nil
	return nil
}

type NullableFormulaAndFunctionQueryDefinition struct {
	value *FormulaAndFunctionQueryDefinition
	isSet bool
}

func (v NullableFormulaAndFunctionQueryDefinition) Get() *FormulaAndFunctionQueryDefinition {
	return v.value
}

func (v *NullableFormulaAndFunctionQueryDefinition) Set(val *FormulaAndFunctionQueryDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableFormulaAndFunctionQueryDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableFormulaAndFunctionQueryDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormulaAndFunctionQueryDefinition(val *FormulaAndFunctionQueryDefinition) *NullableFormulaAndFunctionQueryDefinition {
	return &NullableFormulaAndFunctionQueryDefinition{value: val, isSet: true}
}

func (v NullableFormulaAndFunctionQueryDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormulaAndFunctionQueryDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
