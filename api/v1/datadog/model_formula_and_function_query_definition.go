/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// FormulaAndFunctionQueryDefinition - A formula and function query.
type FormulaAndFunctionQueryDefinition struct {
	TimeSeriesFormulaAndFunctionEventQueryDefinition   *TimeSeriesFormulaAndFunctionEventQueryDefinition
	TimeSeriesFormulaAndFunctionMetricQueryDefinition  *TimeSeriesFormulaAndFunctionMetricQueryDefinition
	TimeSeriesFormulaAndFunctionProcessQueryDefinition *TimeSeriesFormulaAndFunctionProcessQueryDefinition
}

// TimeSeriesFormulaAndFunctionEventQueryDefinitionAsFormulaAndFunctionQueryDefinition is a convenience function that returns TimeSeriesFormulaAndFunctionEventQueryDefinition wrapped in FormulaAndFunctionQueryDefinition
func TimeSeriesFormulaAndFunctionEventQueryDefinitionAsFormulaAndFunctionQueryDefinition(v *TimeSeriesFormulaAndFunctionEventQueryDefinition) FormulaAndFunctionQueryDefinition {
	return FormulaAndFunctionQueryDefinition{TimeSeriesFormulaAndFunctionEventQueryDefinition: v}
}

// TimeSeriesFormulaAndFunctionMetricQueryDefinitionAsFormulaAndFunctionQueryDefinition is a convenience function that returns TimeSeriesFormulaAndFunctionMetricQueryDefinition wrapped in FormulaAndFunctionQueryDefinition
func TimeSeriesFormulaAndFunctionMetricQueryDefinitionAsFormulaAndFunctionQueryDefinition(v *TimeSeriesFormulaAndFunctionMetricQueryDefinition) FormulaAndFunctionQueryDefinition {
	return FormulaAndFunctionQueryDefinition{TimeSeriesFormulaAndFunctionMetricQueryDefinition: v}
}

// TimeSeriesFormulaAndFunctionProcessQueryDefinitionAsFormulaAndFunctionQueryDefinition is a convenience function that returns TimeSeriesFormulaAndFunctionProcessQueryDefinition wrapped in FormulaAndFunctionQueryDefinition
func TimeSeriesFormulaAndFunctionProcessQueryDefinitionAsFormulaAndFunctionQueryDefinition(v *TimeSeriesFormulaAndFunctionProcessQueryDefinition) FormulaAndFunctionQueryDefinition {
	return FormulaAndFunctionQueryDefinition{TimeSeriesFormulaAndFunctionProcessQueryDefinition: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *FormulaAndFunctionQueryDefinition) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TimeSeriesFormulaAndFunctionEventQueryDefinition
	err = json.Unmarshal(data, &dst.TimeSeriesFormulaAndFunctionEventQueryDefinition)
	if err == nil {
		jsonTimeSeriesFormulaAndFunctionEventQueryDefinition, _ := json.Marshal(dst.TimeSeriesFormulaAndFunctionEventQueryDefinition)
		if string(jsonTimeSeriesFormulaAndFunctionEventQueryDefinition) == "{}" { // empty struct
			dst.TimeSeriesFormulaAndFunctionEventQueryDefinition = nil
		} else {
			match++
		}
	} else {
		dst.TimeSeriesFormulaAndFunctionEventQueryDefinition = nil
	}

	// try to unmarshal data into TimeSeriesFormulaAndFunctionMetricQueryDefinition
	err = json.Unmarshal(data, &dst.TimeSeriesFormulaAndFunctionMetricQueryDefinition)
	if err == nil {
		jsonTimeSeriesFormulaAndFunctionMetricQueryDefinition, _ := json.Marshal(dst.TimeSeriesFormulaAndFunctionMetricQueryDefinition)
		if string(jsonTimeSeriesFormulaAndFunctionMetricQueryDefinition) == "{}" { // empty struct
			dst.TimeSeriesFormulaAndFunctionMetricQueryDefinition = nil
		} else {
			match++
		}
	} else {
		dst.TimeSeriesFormulaAndFunctionMetricQueryDefinition = nil
	}

	// try to unmarshal data into TimeSeriesFormulaAndFunctionProcessQueryDefinition
	err = json.Unmarshal(data, &dst.TimeSeriesFormulaAndFunctionProcessQueryDefinition)
	if err == nil {
		jsonTimeSeriesFormulaAndFunctionProcessQueryDefinition, _ := json.Marshal(dst.TimeSeriesFormulaAndFunctionProcessQueryDefinition)
		if string(jsonTimeSeriesFormulaAndFunctionProcessQueryDefinition) == "{}" { // empty struct
			dst.TimeSeriesFormulaAndFunctionProcessQueryDefinition = nil
		} else {
			match++
		}
	} else {
		dst.TimeSeriesFormulaAndFunctionProcessQueryDefinition = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TimeSeriesFormulaAndFunctionEventQueryDefinition = nil
		dst.TimeSeriesFormulaAndFunctionMetricQueryDefinition = nil
		dst.TimeSeriesFormulaAndFunctionProcessQueryDefinition = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(FormulaAndFunctionQueryDefinition)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(FormulaAndFunctionQueryDefinition)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FormulaAndFunctionQueryDefinition) MarshalJSON() ([]byte, error) {
	if src.TimeSeriesFormulaAndFunctionEventQueryDefinition != nil {
		return json.Marshal(&src.TimeSeriesFormulaAndFunctionEventQueryDefinition)
	}

	if src.TimeSeriesFormulaAndFunctionMetricQueryDefinition != nil {
		return json.Marshal(&src.TimeSeriesFormulaAndFunctionMetricQueryDefinition)
	}

	if src.TimeSeriesFormulaAndFunctionProcessQueryDefinition != nil {
		return json.Marshal(&src.TimeSeriesFormulaAndFunctionProcessQueryDefinition)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FormulaAndFunctionQueryDefinition) GetActualInstance() interface{} {
	if obj.TimeSeriesFormulaAndFunctionEventQueryDefinition != nil {
		return obj.TimeSeriesFormulaAndFunctionEventQueryDefinition
	}

	if obj.TimeSeriesFormulaAndFunctionMetricQueryDefinition != nil {
		return obj.TimeSeriesFormulaAndFunctionMetricQueryDefinition
	}

	if obj.TimeSeriesFormulaAndFunctionProcessQueryDefinition != nil {
		return obj.TimeSeriesFormulaAndFunctionProcessQueryDefinition
	}

	// all schemas are nil
	return nil
}

type NullableFormulaAndFunctionQueryDefinition struct {
	value *FormulaAndFunctionQueryDefinition
	isSet bool
}

func (v NullableFormulaAndFunctionQueryDefinition) Get() *FormulaAndFunctionQueryDefinition {
	return v.value
}

func (v *NullableFormulaAndFunctionQueryDefinition) Set(val *FormulaAndFunctionQueryDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableFormulaAndFunctionQueryDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableFormulaAndFunctionQueryDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormulaAndFunctionQueryDefinition(val *FormulaAndFunctionQueryDefinition) *NullableFormulaAndFunctionQueryDefinition {
	return &NullableFormulaAndFunctionQueryDefinition{value: val, isSet: true}
}

func (v NullableFormulaAndFunctionQueryDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormulaAndFunctionQueryDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
