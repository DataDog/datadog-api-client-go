/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// LogsGeoIpParser The GeoIP parser takes an IP address attribute and extracts if available the Continent, Country, Subdivision, and City information in the target attribute path.
type LogsGeoIpParser struct {
	// Array of source attributes
	Sources []string `json:"sources"`
	// Name of the parent attribute that contains all the extracted details from the `sources`
	Target string `json:"target"`
	// Type of processor
	Type *string `json:"type,omitempty"`
	// Whether or not the processor is enabled
	IsEnabled *bool `json:"is_enabled,omitempty"`
	// Name of the processor
	Name *string `json:"name,omitempty"`
}

// NewLogsGeoIpParser instantiates a new LogsGeoIpParser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsGeoIpParser(sources []string, target string) *LogsGeoIpParser {
	this := LogsGeoIpParser{}
	this.Sources = sources
	this.Target = target
	var type_ string = "geo-ip-parser"
	this.Type = &type_
	var isEnabled bool = false
	this.IsEnabled = &isEnabled
	return &this
}

// NewLogsGeoIpParserWithDefaults instantiates a new LogsGeoIpParser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsGeoIpParserWithDefaults() *LogsGeoIpParser {
	this := LogsGeoIpParser{}
	var target string = "network.client.geoip"
	this.Target = target
	var type_ string = "geo-ip-parser"
	this.Type = &type_
	var isEnabled bool = false
	this.IsEnabled = &isEnabled
	return &this
}

// GetSources returns the Sources field value
func (o *LogsGeoIpParser) GetSources() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Sources
}

// SetSources sets field value
func (o *LogsGeoIpParser) SetSources(v []string) {
	o.Sources = v
}

// GetTarget returns the Target field value
func (o *LogsGeoIpParser) GetTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Target
}

// SetTarget sets field value
func (o *LogsGeoIpParser) SetTarget(v string) {
	o.Target = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LogsGeoIpParser) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LogsGeoIpParser) GetTypeOk() (string, bool) {
	if o == nil || o.Type == nil {
		var ret string
		return ret, false
	}
	return *o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LogsGeoIpParser) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LogsGeoIpParser) SetType(v string) {
	o.Type = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *LogsGeoIpParser) GetIsEnabled() bool {
	if o == nil || o.IsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LogsGeoIpParser) GetIsEnabledOk() (bool, bool) {
	if o == nil || o.IsEnabled == nil {
		var ret bool
		return ret, false
	}
	return *o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *LogsGeoIpParser) HasIsEnabled() bool {
	if o != nil && o.IsEnabled != nil {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *LogsGeoIpParser) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LogsGeoIpParser) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LogsGeoIpParser) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LogsGeoIpParser) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LogsGeoIpParser) SetName(v string) {
	o.Name = &v
}

func (o LogsGeoIpParser) MarshalJSON() ([]byte, error) {
	//TODO: serialize parents?
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sources"] = o.Sources
	}
	if true {
		toSerialize["target"] = o.Target
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.IsEnabled != nil {
		toSerialize["is_enabled"] = o.IsEnabled
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

// AsLogsProcessor wraps this instance of LogsGeoIpParser in LogsProcessor
func (s *LogsGeoIpParser) AsLogsProcessor() LogsProcessor {
	return LogsProcessor{LogsProcessorInterface: s}
}

type NullableLogsGeoIpParser struct {
	value *LogsGeoIpParser
	isSet bool
}

func (v NullableLogsGeoIpParser) Get() *LogsGeoIpParser {
	return v.value
}

func (v NullableLogsGeoIpParser) Set(val *LogsGeoIpParser) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsGeoIpParser) IsSet() bool {
	return v.isSet
}

func (v NullableLogsGeoIpParser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsGeoIpParser(val *LogsGeoIpParser) *NullableLogsGeoIpParser {
	return &NullableLogsGeoIpParser{value: val, isSet: true}
}

func (v NullableLogsGeoIpParser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsGeoIpParser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
