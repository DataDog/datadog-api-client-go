/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// HTTPLog struct for HTTPLog
type HTTPLog struct {
	// TODO.
	Ddsource *string `json:"ddsource,omitempty"`
	// TODO.
	Ddtags *string `json:"ddtags,omitempty"`
	// TODO.
	Hostname *string `json:"hostname,omitempty"`
	// TODO.
	Message *string `json:"message,omitempty"`
}

// NewHTTPLog instantiates a new HTTPLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHTTPLog() *HTTPLog {
	this := HTTPLog{}
	return &this
}

// NewHTTPLogWithDefaults instantiates a new HTTPLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHTTPLogWithDefaults() *HTTPLog {
	this := HTTPLog{}
	return &this
}

// GetDdsource returns the Ddsource field value if set, zero value otherwise.
func (o *HTTPLog) GetDdsource() string {
	if o == nil || o.Ddsource == nil {
		var ret string
		return ret
	}
	return *o.Ddsource
}

// GetDdsourceOk returns a tuple with the Ddsource field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *HTTPLog) GetDdsourceOk() (string, bool) {
	if o == nil || o.Ddsource == nil {
		var ret string
		return ret, false
	}
	return *o.Ddsource, true
}

// HasDdsource returns a boolean if a field has been set.
func (o *HTTPLog) HasDdsource() bool {
	if o != nil && o.Ddsource != nil {
		return true
	}

	return false
}

// SetDdsource gets a reference to the given string and assigns it to the Ddsource field.
func (o *HTTPLog) SetDdsource(v string) {
	o.Ddsource = &v
}

// GetDdtags returns the Ddtags field value if set, zero value otherwise.
func (o *HTTPLog) GetDdtags() string {
	if o == nil || o.Ddtags == nil {
		var ret string
		return ret
	}
	return *o.Ddtags
}

// GetDdtagsOk returns a tuple with the Ddtags field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *HTTPLog) GetDdtagsOk() (string, bool) {
	if o == nil || o.Ddtags == nil {
		var ret string
		return ret, false
	}
	return *o.Ddtags, true
}

// HasDdtags returns a boolean if a field has been set.
func (o *HTTPLog) HasDdtags() bool {
	if o != nil && o.Ddtags != nil {
		return true
	}

	return false
}

// SetDdtags gets a reference to the given string and assigns it to the Ddtags field.
func (o *HTTPLog) SetDdtags(v string) {
	o.Ddtags = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *HTTPLog) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *HTTPLog) GetHostnameOk() (string, bool) {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret, false
	}
	return *o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *HTTPLog) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *HTTPLog) SetHostname(v string) {
	o.Hostname = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *HTTPLog) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *HTTPLog) GetMessageOk() (string, bool) {
	if o == nil || o.Message == nil {
		var ret string
		return ret, false
	}
	return *o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *HTTPLog) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *HTTPLog) SetMessage(v string) {
	o.Message = &v
}

func (o HTTPLog) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ddsource != nil {
		toSerialize["ddsource"] = o.Ddsource
	}
	if o.Ddtags != nil {
		toSerialize["ddtags"] = o.Ddtags
	}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableHTTPLog struct {
	value *HTTPLog
	isSet bool
}

func (v NullableHTTPLog) Get() *HTTPLog {
	return v.value
}

func (v NullableHTTPLog) Set(val *HTTPLog) {
	v.value = val
	v.isSet = true
}

func (v NullableHTTPLog) IsSet() bool {
	return v.isSet
}

func (v NullableHTTPLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHTTPLog(val *HTTPLog) *NullableHTTPLog {
	return &NullableHTTPLog{value: val, isSet: true}
}

func (v NullableHTTPLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHTTPLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
