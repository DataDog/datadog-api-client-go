/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute Compute options.
type TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute struct {
	Aggregation FormulaAndFunctionEventAggregation `json:"aggregation"`
	// A time interval in milliseconds.
	Interval *int64 `json:"interval,omitempty"`
	// Measurable attribute to compute.
	Metric *string `json:"metric,omitempty"`
}

// NewTimeSeriesFormulaAndFunctionEventQueryDefinitionCompute instantiates a new TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeSeriesFormulaAndFunctionEventQueryDefinitionCompute(aggregation FormulaAndFunctionEventAggregation) *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute {
	this := TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute{}
	this.Aggregation = aggregation
	return &this
}

// NewTimeSeriesFormulaAndFunctionEventQueryDefinitionComputeWithDefaults instantiates a new TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeSeriesFormulaAndFunctionEventQueryDefinitionComputeWithDefaults() *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute {
	this := TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute{}
	return &this
}

// GetAggregation returns the Aggregation field value
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) GetAggregation() FormulaAndFunctionEventAggregation {
	if o == nil {
		var ret FormulaAndFunctionEventAggregation
		return ret
	}

	return o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) GetAggregationOk() (*FormulaAndFunctionEventAggregation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aggregation, true
}

// SetAggregation sets field value
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) SetAggregation(v FormulaAndFunctionEventAggregation) {
	o.Aggregation = v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) GetInterval() int64 {
	if o == nil || o.Interval == nil {
		var ret int64
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) GetIntervalOk() (*int64, bool) {
	if o == nil || o.Interval == nil {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int64 and assigns it to the Interval field.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) SetInterval(v int64) {
	o.Interval = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) GetMetric() string {
	if o == nil || o.Metric == nil {
		var ret string
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) GetMetricOk() (*string, bool) {
	if o == nil || o.Metric == nil {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) HasMetric() bool {
	if o != nil && o.Metric != nil {
		return true
	}

	return false
}

// SetMetric gets a reference to the given string and assigns it to the Metric field.
func (o *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) SetMetric(v string) {
	o.Metric = &v
}

func (o TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["aggregation"] = o.Aggregation
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	if o.Metric != nil {
		toSerialize["metric"] = o.Metric
	}
	return json.Marshal(toSerialize)
}

type NullableTimeSeriesFormulaAndFunctionEventQueryDefinitionCompute struct {
	value *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute
	isSet bool
}

func (v NullableTimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) Get() *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute {
	return v.value
}

func (v *NullableTimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) Set(val *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeSeriesFormulaAndFunctionEventQueryDefinitionCompute(val *TimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) *NullableTimeSeriesFormulaAndFunctionEventQueryDefinitionCompute {
	return &NullableTimeSeriesFormulaAndFunctionEventQueryDefinitionCompute{value: val, isSet: true}
}

func (v NullableTimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeSeriesFormulaAndFunctionEventQueryDefinitionCompute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
