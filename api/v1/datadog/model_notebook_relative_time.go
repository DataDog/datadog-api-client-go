/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// NotebookRelativeTime Relative timeframe.
type NotebookRelativeTime struct {
	LiveSpan WidgetLiveSpan `json:"live_span"`
}

// NewNotebookRelativeTime instantiates a new NotebookRelativeTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotebookRelativeTime(liveSpan WidgetLiveSpan) *NotebookRelativeTime {
	this := NotebookRelativeTime{}
	this.LiveSpan = liveSpan
	return &this
}

// NewNotebookRelativeTimeWithDefaults instantiates a new NotebookRelativeTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotebookRelativeTimeWithDefaults() *NotebookRelativeTime {
	this := NotebookRelativeTime{}
	return &this
}

// GetLiveSpan returns the LiveSpan field value
func (o *NotebookRelativeTime) GetLiveSpan() WidgetLiveSpan {
	if o == nil {
		var ret WidgetLiveSpan
		return ret
	}

	return o.LiveSpan
}

// GetLiveSpanOk returns a tuple with the LiveSpan field value
// and a boolean to check if the value has been set.
func (o *NotebookRelativeTime) GetLiveSpanOk() (*WidgetLiveSpan, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LiveSpan, true
}

// SetLiveSpan sets field value
func (o *NotebookRelativeTime) SetLiveSpan(v WidgetLiveSpan) {
	o.LiveSpan = v
}

func (o NotebookRelativeTime) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["live_span"] = o.LiveSpan
	}
	return json.Marshal(toSerialize)
}

func (o *NotebookRelativeTime) UnmarshalJSON(bytes []byte) (err error) {
	required := struct {
		LiveSpan *WidgetLiveSpan `json:"live_span"`
	}{}
	all := struct {
		LiveSpan WidgetLiveSpan `json:"live_span"`
	}{}
	err = json.Unmarshal(bytes, &required)
	if err != nil {
		return err
	}
	if required.LiveSpan == nil {
		return fmt.Errorf("Required field live_span missing")
	}
	err = json.Unmarshal(bytes, &all)
	if err != nil {
		return err
	}
	o.LiveSpan = all.LiveSpan
	return nil
}

type NullableNotebookRelativeTime struct {
	value *NotebookRelativeTime
	isSet bool
}

func (v NullableNotebookRelativeTime) Get() *NotebookRelativeTime {
	return v.value
}

func (v *NullableNotebookRelativeTime) Set(val *NotebookRelativeTime) {
	v.value = val
	v.isSet = true
}

func (v NullableNotebookRelativeTime) IsSet() bool {
	return v.isSet
}

func (v *NullableNotebookRelativeTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotebookRelativeTime(val *NotebookRelativeTime) *NullableNotebookRelativeTime {
	return &NullableNotebookRelativeTime{value: val, isSet: true}
}

func (v NullableNotebookRelativeTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotebookRelativeTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
