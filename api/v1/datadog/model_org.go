/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// Org struct for Org
type Org struct {
	Billing      *OrgBilling      `json:"billing,omitempty"`
	Created      *string          `json:"created,omitempty"`
	Description  *string          `json:"description,omitempty"`
	Name         *string          `json:"name,omitempty"`
	PublicId     *string          `json:"public_id,omitempty"`
	Settings     *OrgSettings     `json:"settings,omitempty"`
	Subscription *OrgSubscription `json:"subscription,omitempty"`
}

// NewOrg instantiates a new Org object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrg() *Org {
	this := Org{}
	return &this
}

// NewOrgWithDefaults instantiates a new Org object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgWithDefaults() *Org {
	this := Org{}
	return &this
}

// GetBilling returns the Billing field value if set, zero value otherwise.
func (o *Org) GetBilling() OrgBilling {
	if o == nil || o.Billing == nil {
		var ret OrgBilling
		return ret
	}
	return *o.Billing
}

// GetBillingOk returns a tuple with the Billing field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetBillingOk() (OrgBilling, bool) {
	if o == nil || o.Billing == nil {
		var ret OrgBilling
		return ret, false
	}
	return *o.Billing, true
}

// HasBilling returns a boolean if a field has been set.
func (o *Org) HasBilling() bool {
	if o != nil && o.Billing != nil {
		return true
	}

	return false
}

// SetBilling gets a reference to the given OrgBilling and assigns it to the Billing field.
func (o *Org) SetBilling(v OrgBilling) {
	o.Billing = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Org) GetCreated() string {
	if o == nil || o.Created == nil {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetCreatedOk() (string, bool) {
	if o == nil || o.Created == nil {
		var ret string
		return ret, false
	}
	return *o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Org) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *Org) SetCreated(v string) {
	o.Created = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Org) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetDescriptionOk() (string, bool) {
	if o == nil || o.Description == nil {
		var ret string
		return ret, false
	}
	return *o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Org) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Org) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Org) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Org) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Org) SetName(v string) {
	o.Name = &v
}

// GetPublicId returns the PublicId field value if set, zero value otherwise.
func (o *Org) GetPublicId() string {
	if o == nil || o.PublicId == nil {
		var ret string
		return ret
	}
	return *o.PublicId
}

// GetPublicIdOk returns a tuple with the PublicId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetPublicIdOk() (string, bool) {
	if o == nil || o.PublicId == nil {
		var ret string
		return ret, false
	}
	return *o.PublicId, true
}

// HasPublicId returns a boolean if a field has been set.
func (o *Org) HasPublicId() bool {
	if o != nil && o.PublicId != nil {
		return true
	}

	return false
}

// SetPublicId gets a reference to the given string and assigns it to the PublicId field.
func (o *Org) SetPublicId(v string) {
	o.PublicId = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *Org) GetSettings() OrgSettings {
	if o == nil || o.Settings == nil {
		var ret OrgSettings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetSettingsOk() (OrgSettings, bool) {
	if o == nil || o.Settings == nil {
		var ret OrgSettings
		return ret, false
	}
	return *o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *Org) HasSettings() bool {
	if o != nil && o.Settings != nil {
		return true
	}

	return false
}

// SetSettings gets a reference to the given OrgSettings and assigns it to the Settings field.
func (o *Org) SetSettings(v OrgSettings) {
	o.Settings = &v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *Org) GetSubscription() OrgSubscription {
	if o == nil || o.Subscription == nil {
		var ret OrgSubscription
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetSubscriptionOk() (OrgSubscription, bool) {
	if o == nil || o.Subscription == nil {
		var ret OrgSubscription
		return ret, false
	}
	return *o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *Org) HasSubscription() bool {
	if o != nil && o.Subscription != nil {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given OrgSubscription and assigns it to the Subscription field.
func (o *Org) SetSubscription(v OrgSubscription) {
	o.Subscription = &v
}

func (o Org) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Billing != nil {
		toSerialize["billing"] = o.Billing
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.PublicId != nil {
		toSerialize["public_id"] = o.PublicId
	}
	if o.Settings != nil {
		toSerialize["settings"] = o.Settings
	}
	if o.Subscription != nil {
		toSerialize["subscription"] = o.Subscription
	}
	return json.Marshal(toSerialize)
}

type NullableOrg struct {
	value *Org
	isSet bool
}

func (v NullableOrg) Get() *Org {
	return v.value
}

func (v NullableOrg) Set(val *Org) {
	v.value = val
	v.isSet = true
}

func (v NullableOrg) IsSet() bool {
	return v.isSet
}

func (v NullableOrg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrg(val *Org) *NullableOrg {
	return &NullableOrg{value: val, isSet: true}
}

func (v NullableOrg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
