/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"time"
)

// UsageComplianceHour Compliance Monitoring usage for a given organization for a given hour.
type UsageComplianceHour struct {
	// The total number of compliance container hours from the start of the given hour's month until the given hour.
	ComplianceContainerCount *int64 `json:"compliance_container_count,omitempty"`
	// The total number of compliance hosts hours from the start of the given hour's month until the given hour.
	ComplianceHostCount *int64 `json:"compliance_host_count,omitempty"`
	// The hour for the usage.
	Hour *time.Time `json:"hour,omitempty"`
}

// NewUsageComplianceHour instantiates a new UsageComplianceHour object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageComplianceHour() *UsageComplianceHour {
	this := UsageComplianceHour{}
	return &this
}

// NewUsageComplianceHourWithDefaults instantiates a new UsageComplianceHour object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageComplianceHourWithDefaults() *UsageComplianceHour {
	this := UsageComplianceHour{}
	return &this
}

// GetComplianceContainerCount returns the ComplianceContainerCount field value if set, zero value otherwise.
func (o *UsageComplianceHour) GetComplianceContainerCount() int64 {
	if o == nil || o.ComplianceContainerCount == nil {
		var ret int64
		return ret
	}
	return *o.ComplianceContainerCount
}

// GetComplianceContainerCountOk returns a tuple with the ComplianceContainerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageComplianceHour) GetComplianceContainerCountOk() (*int64, bool) {
	if o == nil || o.ComplianceContainerCount == nil {
		return nil, false
	}
	return o.ComplianceContainerCount, true
}

// HasComplianceContainerCount returns a boolean if a field has been set.
func (o *UsageComplianceHour) HasComplianceContainerCount() bool {
	if o != nil && o.ComplianceContainerCount != nil {
		return true
	}

	return false
}

// SetComplianceContainerCount gets a reference to the given int64 and assigns it to the ComplianceContainerCount field.
func (o *UsageComplianceHour) SetComplianceContainerCount(v int64) {
	o.ComplianceContainerCount = &v
}

// GetComplianceHostCount returns the ComplianceHostCount field value if set, zero value otherwise.
func (o *UsageComplianceHour) GetComplianceHostCount() int64 {
	if o == nil || o.ComplianceHostCount == nil {
		var ret int64
		return ret
	}
	return *o.ComplianceHostCount
}

// GetComplianceHostCountOk returns a tuple with the ComplianceHostCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageComplianceHour) GetComplianceHostCountOk() (*int64, bool) {
	if o == nil || o.ComplianceHostCount == nil {
		return nil, false
	}
	return o.ComplianceHostCount, true
}

// HasComplianceHostCount returns a boolean if a field has been set.
func (o *UsageComplianceHour) HasComplianceHostCount() bool {
	if o != nil && o.ComplianceHostCount != nil {
		return true
	}

	return false
}

// SetComplianceHostCount gets a reference to the given int64 and assigns it to the ComplianceHostCount field.
func (o *UsageComplianceHour) SetComplianceHostCount(v int64) {
	o.ComplianceHostCount = &v
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *UsageComplianceHour) GetHour() time.Time {
	if o == nil || o.Hour == nil {
		var ret time.Time
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageComplianceHour) GetHourOk() (*time.Time, bool) {
	if o == nil || o.Hour == nil {
		return nil, false
	}
	return o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *UsageComplianceHour) HasHour() bool {
	if o != nil && o.Hour != nil {
		return true
	}

	return false
}

// SetHour gets a reference to the given time.Time and assigns it to the Hour field.
func (o *UsageComplianceHour) SetHour(v time.Time) {
	o.Hour = &v
}

func (o UsageComplianceHour) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ComplianceContainerCount != nil {
		toSerialize["compliance_container_count"] = o.ComplianceContainerCount
	}
	if o.ComplianceHostCount != nil {
		toSerialize["compliance_host_count"] = o.ComplianceHostCount
	}
	if o.Hour != nil {
		toSerialize["hour"] = o.Hour
	}
	return json.Marshal(toSerialize)
}

type NullableUsageComplianceHour struct {
	value *UsageComplianceHour
	isSet bool
}

func (v NullableUsageComplianceHour) Get() *UsageComplianceHour {
	return v.value
}

func (v *NullableUsageComplianceHour) Set(val *UsageComplianceHour) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageComplianceHour) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageComplianceHour) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageComplianceHour(val *UsageComplianceHour) *NullableUsageComplianceHour {
	return &NullableUsageComplianceHour{value: val, isSet: true}
}

func (v NullableUsageComplianceHour) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageComplianceHour) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
