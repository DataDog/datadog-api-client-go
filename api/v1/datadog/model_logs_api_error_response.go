/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"bytes"
	"encoding/json"
)

// LogsApiErrorResponse Response returned by the Logs API when errors occur
type LogsApiErrorResponse struct {
	Error *LogsApiError `json:"error,omitempty"`
}

// NewLogsApiErrorResponse instantiates a new LogsApiErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsApiErrorResponse() *LogsApiErrorResponse {
	this := LogsApiErrorResponse{}
	return &this
}

// NewLogsApiErrorResponseWithDefaults instantiates a new LogsApiErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsApiErrorResponseWithDefaults() *LogsApiErrorResponse {
	this := LogsApiErrorResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *LogsApiErrorResponse) GetError() LogsApiError {
	if o == nil || o.Error == nil {
		var ret LogsApiError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LogsApiErrorResponse) GetErrorOk() (LogsApiError, bool) {
	if o == nil || o.Error == nil {
		var ret LogsApiError
		return ret, false
	}
	return *o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *LogsApiErrorResponse) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given LogsApiError and assigns it to the Error field.
func (o *LogsApiErrorResponse) SetError(v LogsApiError) {
	o.Error = &v
}

type NullableLogsApiErrorResponse struct {
	Value        LogsApiErrorResponse
	ExplicitNull bool
}

func (v NullableLogsApiErrorResponse) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableLogsApiErrorResponse) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
