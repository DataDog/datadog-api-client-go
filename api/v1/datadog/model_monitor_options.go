/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// MonitorOptions TODO.
type MonitorOptions struct {
	Aggregation *MonitorOptionsAggregation `json:"aggregation,omitempty"`
	// TODO.
	DeviceIds *[]MonitorDeviceID `json:"device_ids,omitempty"`
	// TODO.
	EnableLogsSample *bool `json:"enable_logs_sample,omitempty"`
	// A message to include with a re-notification. Supports the ‘@username’ notification we allow elsewhere. Not applicable if `renotify_interval` is None.
	EscalationMessage *string `json:"escalation_message,omitempty"`
	// Time (in seconds) to delay evaluation, as a non-negative integer. For example, if the value is set to 300 (5min), the timeframe is set to last_5m and the time is 7:00, the monitor evaluates data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor always has data during evaluation.
	EvaluationDelay NullableInt64 `json:"evaluation_delay,omitempty"`
	// A Boolean indicating whether notifications from this monitor automatically inserts its triggering tags into the title.  **Examples** - If `True`, `[Triggered on {host:h1}] Monitor Title` - If `False`, `[Triggered] Monitor Title`
	IncludeTags *bool `json:"include_tags,omitempty"`
	Locked      *bool `json:"locked,omitempty"`
	// How long the test should be in failure before alerting (integer, number of seconds, max 7200).
	MinFailureDuration NullableInt64 `json:"min_failure_duration,omitempty"`
	// The minimum number of locations in failure at the same time during at least one moment in the `min_failure_duration` period (`min_location_failed` and `min_failure_duration` are part of the advanced alerting rules - integer, >= 1).
	MinLocationFailed NullableInt64 `json:"min_location_failed,omitempty"`
	// Time (in seconds) to allow a host to boot and applications to fully start before starting the evaluation of monitor results. Should be a non negative integer.
	NewHostDelay NullableInt64 `json:"new_host_delay,omitempty"`
	// The number of minutes before a monitor notifies after data stops reporting. Datadog recommends at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks. If omitted, 2x the evaluation timeframe is used for metric alerts, and 24 hours is used for service checks.
	NoDataTimeframe NullableInt64 `json:"no_data_timeframe,omitempty"`
	// A Boolean indicating whether tagged users is notified on changes to this monitor.
	NotifyAudit *bool `json:"notify_audit,omitempty"`
	// A Boolean indicating whether this monitor notifies when data stops reporting.
	NotifyNoData *bool `json:"notify_no_data,omitempty"`
	// The number of minutes after the last notification before a monitor re-notifies on the current status. It only re-notifies if it’s not resolved.
	RenotifyInterval NullableInt64 `json:"renotify_interval,omitempty"`
	// A Boolean indicating whether this monitor needs a full window of data before it’s evaluated. We highly recommend you set this to `false` for sparse metrics, otherwise some evaluations are skipped. For “on average” “at all times” and “in total” aggregation, default is true. `False` otherwise.
	RequireFullWindow *bool `json:"require_full_window,omitempty"`
	// TODO.
	Silenced *map[string]int64 `json:"silenced,omitempty"`
	// TODO.
	SyntheticsCheckId NullableInt64                  `json:"synthetics_check_id,omitempty"`
	ThresholdWindows  *MonitorThresholdWindowOptions `json:"threshold_windows,omitempty"`
	Thresholds        *MonitorThresholds             `json:"thresholds,omitempty"`
	// The number of hours of the monitor not reporting data before it automatically resolves from a triggered state.
	TimeoutH NullableInt64 `json:"timeout_h,omitempty"`
}

// NewMonitorOptions instantiates a new MonitorOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorOptions() *MonitorOptions {
	this := MonitorOptions{}
	var escalationMessage string = "none"
	this.EscalationMessage = &escalationMessage
	var includeTags bool = true
	this.IncludeTags = &includeTags
	var minFailureDuration int64 = 0
	this.MinFailureDuration = *NewNullableInt64(&minFailureDuration)
	var minLocationFailed int64 = 1
	this.MinLocationFailed = *NewNullableInt64(&minLocationFailed)
	var newHostDelay int64 = 300
	this.NewHostDelay = *NewNullableInt64(&newHostDelay)
	var notifyAudit bool = false
	this.NotifyAudit = &notifyAudit
	var notifyNoData bool = false
	this.NotifyNoData = &notifyNoData
	var requireFullWindow bool = true
	this.RequireFullWindow = &requireFullWindow
	return &this
}

// NewMonitorOptionsWithDefaults instantiates a new MonitorOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorOptionsWithDefaults() *MonitorOptions {
	this := MonitorOptions{}
	var escalationMessage string = "none"
	this.EscalationMessage = &escalationMessage
	var includeTags bool = true
	this.IncludeTags = &includeTags
	var minFailureDuration int64 = 0
	this.MinFailureDuration = *NewNullableInt64(&minFailureDuration)
	var minLocationFailed int64 = 1
	this.MinLocationFailed = *NewNullableInt64(&minLocationFailed)
	var newHostDelay int64 = 300
	this.NewHostDelay = *NewNullableInt64(&newHostDelay)
	var notifyAudit bool = false
	this.NotifyAudit = &notifyAudit
	var notifyNoData bool = false
	this.NotifyNoData = &notifyNoData
	var requireFullWindow bool = true
	this.RequireFullWindow = &requireFullWindow
	return &this
}

// GetAggregation returns the Aggregation field value if set, zero value otherwise.
func (o *MonitorOptions) GetAggregation() MonitorOptionsAggregation {
	if o == nil || o.Aggregation == nil {
		var ret MonitorOptionsAggregation
		return ret
	}
	return *o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetAggregationOk() (MonitorOptionsAggregation, bool) {
	if o == nil || o.Aggregation == nil {
		var ret MonitorOptionsAggregation
		return ret, false
	}
	return *o.Aggregation, true
}

// HasAggregation returns a boolean if a field has been set.
func (o *MonitorOptions) HasAggregation() bool {
	if o != nil && o.Aggregation != nil {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given MonitorOptionsAggregation and assigns it to the Aggregation field.
func (o *MonitorOptions) SetAggregation(v MonitorOptionsAggregation) {
	o.Aggregation = &v
}

// GetDeviceIds returns the DeviceIds field value if set, zero value otherwise.
func (o *MonitorOptions) GetDeviceIds() []MonitorDeviceID {
	if o == nil || o.DeviceIds == nil {
		var ret []MonitorDeviceID
		return ret
	}
	return *o.DeviceIds
}

// GetDeviceIdsOk returns a tuple with the DeviceIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetDeviceIdsOk() ([]MonitorDeviceID, bool) {
	if o == nil || o.DeviceIds == nil {
		var ret []MonitorDeviceID
		return ret, false
	}
	return *o.DeviceIds, true
}

// HasDeviceIds returns a boolean if a field has been set.
func (o *MonitorOptions) HasDeviceIds() bool {
	if o != nil && o.DeviceIds != nil {
		return true
	}

	return false
}

// SetDeviceIds gets a reference to the given []MonitorDeviceID and assigns it to the DeviceIds field.
func (o *MonitorOptions) SetDeviceIds(v []MonitorDeviceID) {
	o.DeviceIds = &v
}

// GetEnableLogsSample returns the EnableLogsSample field value if set, zero value otherwise.
func (o *MonitorOptions) GetEnableLogsSample() bool {
	if o == nil || o.EnableLogsSample == nil {
		var ret bool
		return ret
	}
	return *o.EnableLogsSample
}

// GetEnableLogsSampleOk returns a tuple with the EnableLogsSample field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetEnableLogsSampleOk() (bool, bool) {
	if o == nil || o.EnableLogsSample == nil {
		var ret bool
		return ret, false
	}
	return *o.EnableLogsSample, true
}

// HasEnableLogsSample returns a boolean if a field has been set.
func (o *MonitorOptions) HasEnableLogsSample() bool {
	if o != nil && o.EnableLogsSample != nil {
		return true
	}

	return false
}

// SetEnableLogsSample gets a reference to the given bool and assigns it to the EnableLogsSample field.
func (o *MonitorOptions) SetEnableLogsSample(v bool) {
	o.EnableLogsSample = &v
}

// GetEscalationMessage returns the EscalationMessage field value if set, zero value otherwise.
func (o *MonitorOptions) GetEscalationMessage() string {
	if o == nil || o.EscalationMessage == nil {
		var ret string
		return ret
	}
	return *o.EscalationMessage
}

// GetEscalationMessageOk returns a tuple with the EscalationMessage field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetEscalationMessageOk() (string, bool) {
	if o == nil || o.EscalationMessage == nil {
		var ret string
		return ret, false
	}
	return *o.EscalationMessage, true
}

// HasEscalationMessage returns a boolean if a field has been set.
func (o *MonitorOptions) HasEscalationMessage() bool {
	if o != nil && o.EscalationMessage != nil {
		return true
	}

	return false
}

// SetEscalationMessage gets a reference to the given string and assigns it to the EscalationMessage field.
func (o *MonitorOptions) SetEscalationMessage(v string) {
	o.EscalationMessage = &v
}

// GetEvaluationDelay returns the EvaluationDelay field value if set, zero value otherwise.
func (o *MonitorOptions) GetEvaluationDelay() NullableInt64 {
	if o == nil {
		var ret NullableInt64
		return ret
	}
	return o.EvaluationDelay
}

// GetEvaluationDelayOk returns a tuple with the EvaluationDelay field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetEvaluationDelayOk() (NullableInt64, bool) {
	if o == nil {
		var ret NullableInt64
		return ret, false
	}
	return o.EvaluationDelay, o.EvaluationDelay.IsSet()
}

// HasEvaluationDelay returns a boolean if a field has been set.
func (o *MonitorOptions) HasEvaluationDelay() bool {
	if o != nil && o.EvaluationDelay.IsSet() {
		return true
	}

	return false
}

// SetEvaluationDelay gets a reference to the given NullableInt64 and assigns it to the EvaluationDelay field.
func (o *MonitorOptions) SetEvaluationDelay(v NullableInt64) {
	o.EvaluationDelay = v
}

// GetIncludeTags returns the IncludeTags field value if set, zero value otherwise.
func (o *MonitorOptions) GetIncludeTags() bool {
	if o == nil || o.IncludeTags == nil {
		var ret bool
		return ret
	}
	return *o.IncludeTags
}

// GetIncludeTagsOk returns a tuple with the IncludeTags field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetIncludeTagsOk() (bool, bool) {
	if o == nil || o.IncludeTags == nil {
		var ret bool
		return ret, false
	}
	return *o.IncludeTags, true
}

// HasIncludeTags returns a boolean if a field has been set.
func (o *MonitorOptions) HasIncludeTags() bool {
	if o != nil && o.IncludeTags != nil {
		return true
	}

	return false
}

// SetIncludeTags gets a reference to the given bool and assigns it to the IncludeTags field.
func (o *MonitorOptions) SetIncludeTags(v bool) {
	o.IncludeTags = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *MonitorOptions) GetLocked() bool {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetLockedOk() (bool, bool) {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret, false
	}
	return *o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *MonitorOptions) HasLocked() bool {
	if o != nil && o.Locked != nil {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *MonitorOptions) SetLocked(v bool) {
	o.Locked = &v
}

// GetMinFailureDuration returns the MinFailureDuration field value if set, zero value otherwise.
func (o *MonitorOptions) GetMinFailureDuration() NullableInt64 {
	if o == nil {
		var ret NullableInt64
		return ret
	}
	return o.MinFailureDuration
}

// GetMinFailureDurationOk returns a tuple with the MinFailureDuration field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetMinFailureDurationOk() (NullableInt64, bool) {
	if o == nil {
		var ret NullableInt64
		return ret, false
	}
	return o.MinFailureDuration, o.MinFailureDuration.IsSet()
}

// HasMinFailureDuration returns a boolean if a field has been set.
func (o *MonitorOptions) HasMinFailureDuration() bool {
	if o != nil && o.MinFailureDuration.IsSet() {
		return true
	}

	return false
}

// SetMinFailureDuration gets a reference to the given NullableInt64 and assigns it to the MinFailureDuration field.
func (o *MonitorOptions) SetMinFailureDuration(v NullableInt64) {
	o.MinFailureDuration = v
}

// GetMinLocationFailed returns the MinLocationFailed field value if set, zero value otherwise.
func (o *MonitorOptions) GetMinLocationFailed() NullableInt64 {
	if o == nil {
		var ret NullableInt64
		return ret
	}
	return o.MinLocationFailed
}

// GetMinLocationFailedOk returns a tuple with the MinLocationFailed field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetMinLocationFailedOk() (NullableInt64, bool) {
	if o == nil {
		var ret NullableInt64
		return ret, false
	}
	return o.MinLocationFailed, o.MinLocationFailed.IsSet()
}

// HasMinLocationFailed returns a boolean if a field has been set.
func (o *MonitorOptions) HasMinLocationFailed() bool {
	if o != nil && o.MinLocationFailed.IsSet() {
		return true
	}

	return false
}

// SetMinLocationFailed gets a reference to the given NullableInt64 and assigns it to the MinLocationFailed field.
func (o *MonitorOptions) SetMinLocationFailed(v NullableInt64) {
	o.MinLocationFailed = v
}

// GetNewHostDelay returns the NewHostDelay field value if set, zero value otherwise.
func (o *MonitorOptions) GetNewHostDelay() NullableInt64 {
	if o == nil {
		var ret NullableInt64
		return ret
	}
	return o.NewHostDelay
}

// GetNewHostDelayOk returns a tuple with the NewHostDelay field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetNewHostDelayOk() (NullableInt64, bool) {
	if o == nil {
		var ret NullableInt64
		return ret, false
	}
	return o.NewHostDelay, o.NewHostDelay.IsSet()
}

// HasNewHostDelay returns a boolean if a field has been set.
func (o *MonitorOptions) HasNewHostDelay() bool {
	if o != nil && o.NewHostDelay.IsSet() {
		return true
	}

	return false
}

// SetNewHostDelay gets a reference to the given NullableInt64 and assigns it to the NewHostDelay field.
func (o *MonitorOptions) SetNewHostDelay(v NullableInt64) {
	o.NewHostDelay = v
}

// GetNoDataTimeframe returns the NoDataTimeframe field value if set, zero value otherwise.
func (o *MonitorOptions) GetNoDataTimeframe() NullableInt64 {
	if o == nil {
		var ret NullableInt64
		return ret
	}
	return o.NoDataTimeframe
}

// GetNoDataTimeframeOk returns a tuple with the NoDataTimeframe field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetNoDataTimeframeOk() (NullableInt64, bool) {
	if o == nil {
		var ret NullableInt64
		return ret, false
	}
	return o.NoDataTimeframe, o.NoDataTimeframe.IsSet()
}

// HasNoDataTimeframe returns a boolean if a field has been set.
func (o *MonitorOptions) HasNoDataTimeframe() bool {
	if o != nil && o.NoDataTimeframe.IsSet() {
		return true
	}

	return false
}

// SetNoDataTimeframe gets a reference to the given NullableInt64 and assigns it to the NoDataTimeframe field.
func (o *MonitorOptions) SetNoDataTimeframe(v NullableInt64) {
	o.NoDataTimeframe = v
}

// GetNotifyAudit returns the NotifyAudit field value if set, zero value otherwise.
func (o *MonitorOptions) GetNotifyAudit() bool {
	if o == nil || o.NotifyAudit == nil {
		var ret bool
		return ret
	}
	return *o.NotifyAudit
}

// GetNotifyAuditOk returns a tuple with the NotifyAudit field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetNotifyAuditOk() (bool, bool) {
	if o == nil || o.NotifyAudit == nil {
		var ret bool
		return ret, false
	}
	return *o.NotifyAudit, true
}

// HasNotifyAudit returns a boolean if a field has been set.
func (o *MonitorOptions) HasNotifyAudit() bool {
	if o != nil && o.NotifyAudit != nil {
		return true
	}

	return false
}

// SetNotifyAudit gets a reference to the given bool and assigns it to the NotifyAudit field.
func (o *MonitorOptions) SetNotifyAudit(v bool) {
	o.NotifyAudit = &v
}

// GetNotifyNoData returns the NotifyNoData field value if set, zero value otherwise.
func (o *MonitorOptions) GetNotifyNoData() bool {
	if o == nil || o.NotifyNoData == nil {
		var ret bool
		return ret
	}
	return *o.NotifyNoData
}

// GetNotifyNoDataOk returns a tuple with the NotifyNoData field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetNotifyNoDataOk() (bool, bool) {
	if o == nil || o.NotifyNoData == nil {
		var ret bool
		return ret, false
	}
	return *o.NotifyNoData, true
}

// HasNotifyNoData returns a boolean if a field has been set.
func (o *MonitorOptions) HasNotifyNoData() bool {
	if o != nil && o.NotifyNoData != nil {
		return true
	}

	return false
}

// SetNotifyNoData gets a reference to the given bool and assigns it to the NotifyNoData field.
func (o *MonitorOptions) SetNotifyNoData(v bool) {
	o.NotifyNoData = &v
}

// GetRenotifyInterval returns the RenotifyInterval field value if set, zero value otherwise.
func (o *MonitorOptions) GetRenotifyInterval() NullableInt64 {
	if o == nil {
		var ret NullableInt64
		return ret
	}
	return o.RenotifyInterval
}

// GetRenotifyIntervalOk returns a tuple with the RenotifyInterval field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetRenotifyIntervalOk() (NullableInt64, bool) {
	if o == nil {
		var ret NullableInt64
		return ret, false
	}
	return o.RenotifyInterval, o.RenotifyInterval.IsSet()
}

// HasRenotifyInterval returns a boolean if a field has been set.
func (o *MonitorOptions) HasRenotifyInterval() bool {
	if o != nil && o.RenotifyInterval.IsSet() {
		return true
	}

	return false
}

// SetRenotifyInterval gets a reference to the given NullableInt64 and assigns it to the RenotifyInterval field.
func (o *MonitorOptions) SetRenotifyInterval(v NullableInt64) {
	o.RenotifyInterval = v
}

// GetRequireFullWindow returns the RequireFullWindow field value if set, zero value otherwise.
func (o *MonitorOptions) GetRequireFullWindow() bool {
	if o == nil || o.RequireFullWindow == nil {
		var ret bool
		return ret
	}
	return *o.RequireFullWindow
}

// GetRequireFullWindowOk returns a tuple with the RequireFullWindow field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetRequireFullWindowOk() (bool, bool) {
	if o == nil || o.RequireFullWindow == nil {
		var ret bool
		return ret, false
	}
	return *o.RequireFullWindow, true
}

// HasRequireFullWindow returns a boolean if a field has been set.
func (o *MonitorOptions) HasRequireFullWindow() bool {
	if o != nil && o.RequireFullWindow != nil {
		return true
	}

	return false
}

// SetRequireFullWindow gets a reference to the given bool and assigns it to the RequireFullWindow field.
func (o *MonitorOptions) SetRequireFullWindow(v bool) {
	o.RequireFullWindow = &v
}

// GetSilenced returns the Silenced field value if set, zero value otherwise.
func (o *MonitorOptions) GetSilenced() map[string]int64 {
	if o == nil || o.Silenced == nil {
		var ret map[string]int64
		return ret
	}
	return *o.Silenced
}

// GetSilencedOk returns a tuple with the Silenced field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetSilencedOk() (map[string]int64, bool) {
	if o == nil || o.Silenced == nil {
		var ret map[string]int64
		return ret, false
	}
	return *o.Silenced, true
}

// HasSilenced returns a boolean if a field has been set.
func (o *MonitorOptions) HasSilenced() bool {
	if o != nil && o.Silenced != nil {
		return true
	}

	return false
}

// SetSilenced gets a reference to the given map[string]int64 and assigns it to the Silenced field.
func (o *MonitorOptions) SetSilenced(v map[string]int64) {
	o.Silenced = &v
}

// GetSyntheticsCheckId returns the SyntheticsCheckId field value if set, zero value otherwise.
func (o *MonitorOptions) GetSyntheticsCheckId() NullableInt64 {
	if o == nil {
		var ret NullableInt64
		return ret
	}
	return o.SyntheticsCheckId
}

// GetSyntheticsCheckIdOk returns a tuple with the SyntheticsCheckId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetSyntheticsCheckIdOk() (NullableInt64, bool) {
	if o == nil {
		var ret NullableInt64
		return ret, false
	}
	return o.SyntheticsCheckId, o.SyntheticsCheckId.IsSet()
}

// HasSyntheticsCheckId returns a boolean if a field has been set.
func (o *MonitorOptions) HasSyntheticsCheckId() bool {
	if o != nil && o.SyntheticsCheckId.IsSet() {
		return true
	}

	return false
}

// SetSyntheticsCheckId gets a reference to the given NullableInt64 and assigns it to the SyntheticsCheckId field.
func (o *MonitorOptions) SetSyntheticsCheckId(v NullableInt64) {
	o.SyntheticsCheckId = v
}

// GetThresholdWindows returns the ThresholdWindows field value if set, zero value otherwise.
func (o *MonitorOptions) GetThresholdWindows() MonitorThresholdWindowOptions {
	if o == nil || o.ThresholdWindows == nil {
		var ret MonitorThresholdWindowOptions
		return ret
	}
	return *o.ThresholdWindows
}

// GetThresholdWindowsOk returns a tuple with the ThresholdWindows field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetThresholdWindowsOk() (MonitorThresholdWindowOptions, bool) {
	if o == nil || o.ThresholdWindows == nil {
		var ret MonitorThresholdWindowOptions
		return ret, false
	}
	return *o.ThresholdWindows, true
}

// HasThresholdWindows returns a boolean if a field has been set.
func (o *MonitorOptions) HasThresholdWindows() bool {
	if o != nil && o.ThresholdWindows != nil {
		return true
	}

	return false
}

// SetThresholdWindows gets a reference to the given MonitorThresholdWindowOptions and assigns it to the ThresholdWindows field.
func (o *MonitorOptions) SetThresholdWindows(v MonitorThresholdWindowOptions) {
	o.ThresholdWindows = &v
}

// GetThresholds returns the Thresholds field value if set, zero value otherwise.
func (o *MonitorOptions) GetThresholds() MonitorThresholds {
	if o == nil || o.Thresholds == nil {
		var ret MonitorThresholds
		return ret
	}
	return *o.Thresholds
}

// GetThresholdsOk returns a tuple with the Thresholds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetThresholdsOk() (MonitorThresholds, bool) {
	if o == nil || o.Thresholds == nil {
		var ret MonitorThresholds
		return ret, false
	}
	return *o.Thresholds, true
}

// HasThresholds returns a boolean if a field has been set.
func (o *MonitorOptions) HasThresholds() bool {
	if o != nil && o.Thresholds != nil {
		return true
	}

	return false
}

// SetThresholds gets a reference to the given MonitorThresholds and assigns it to the Thresholds field.
func (o *MonitorOptions) SetThresholds(v MonitorThresholds) {
	o.Thresholds = &v
}

// GetTimeoutH returns the TimeoutH field value if set, zero value otherwise.
func (o *MonitorOptions) GetTimeoutH() NullableInt64 {
	if o == nil {
		var ret NullableInt64
		return ret
	}
	return o.TimeoutH
}

// GetTimeoutHOk returns a tuple with the TimeoutH field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MonitorOptions) GetTimeoutHOk() (NullableInt64, bool) {
	if o == nil {
		var ret NullableInt64
		return ret, false
	}
	return o.TimeoutH, o.TimeoutH.IsSet()
}

// HasTimeoutH returns a boolean if a field has been set.
func (o *MonitorOptions) HasTimeoutH() bool {
	if o != nil && o.TimeoutH.IsSet() {
		return true
	}

	return false
}

// SetTimeoutH gets a reference to the given NullableInt64 and assigns it to the TimeoutH field.
func (o *MonitorOptions) SetTimeoutH(v NullableInt64) {
	o.TimeoutH = v
}

func (o MonitorOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Aggregation != nil {
		toSerialize["aggregation"] = o.Aggregation
	}
	if o.DeviceIds != nil {
		toSerialize["device_ids"] = o.DeviceIds
	}
	if o.EnableLogsSample != nil {
		toSerialize["enable_logs_sample"] = o.EnableLogsSample
	}
	if o.EscalationMessage != nil {
		toSerialize["escalation_message"] = o.EscalationMessage
	}
	if o.EvaluationDelay.IsSet() {
		toSerialize["evaluation_delay"] = o.EvaluationDelay.Get()
	}
	if o.IncludeTags != nil {
		toSerialize["include_tags"] = o.IncludeTags
	}
	if o.Locked != nil {
		toSerialize["locked"] = o.Locked
	}
	if o.MinFailureDuration.IsSet() {
		toSerialize["min_failure_duration"] = o.MinFailureDuration.Get()
	}
	if o.MinLocationFailed.IsSet() {
		toSerialize["min_location_failed"] = o.MinLocationFailed.Get()
	}
	if o.NewHostDelay.IsSet() {
		toSerialize["new_host_delay"] = o.NewHostDelay.Get()
	}
	if o.NoDataTimeframe.IsSet() {
		toSerialize["no_data_timeframe"] = o.NoDataTimeframe.Get()
	}
	if o.NotifyAudit != nil {
		toSerialize["notify_audit"] = o.NotifyAudit
	}
	if o.NotifyNoData != nil {
		toSerialize["notify_no_data"] = o.NotifyNoData
	}
	if o.RenotifyInterval.IsSet() {
		toSerialize["renotify_interval"] = o.RenotifyInterval.Get()
	}
	if o.RequireFullWindow != nil {
		toSerialize["require_full_window"] = o.RequireFullWindow
	}
	if o.Silenced != nil {
		toSerialize["silenced"] = o.Silenced
	}
	if o.SyntheticsCheckId.IsSet() {
		toSerialize["synthetics_check_id"] = o.SyntheticsCheckId.Get()
	}
	if o.ThresholdWindows != nil {
		toSerialize["threshold_windows"] = o.ThresholdWindows
	}
	if o.Thresholds != nil {
		toSerialize["thresholds"] = o.Thresholds
	}
	if o.TimeoutH.IsSet() {
		toSerialize["timeout_h"] = o.TimeoutH.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorOptions struct {
	value *MonitorOptions
	isSet bool
}

func (v NullableMonitorOptions) Get() *MonitorOptions {
	return v.value
}

func (v NullableMonitorOptions) Set(val *MonitorOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorOptions) IsSet() bool {
	return v.isSet
}

func (v NullableMonitorOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorOptions(val *MonitorOptions) *NullableMonitorOptions {
	return &NullableMonitorOptions{value: val, isSet: true}
}

func (v NullableMonitorOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
