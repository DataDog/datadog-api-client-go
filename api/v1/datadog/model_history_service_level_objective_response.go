/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// HistoryServiceLevelObjectiveResponse A service level objective history response.
type HistoryServiceLevelObjectiveResponse struct {
	Data HistoryServiceLevelObjectiveResponseData `json:"data"`
	// A list of errors while querying the history data for the service level obective.
	Errors *[]SLOHistoryResponseError `json:"errors,omitempty"`
}

// NewHistoryServiceLevelObjectiveResponse instantiates a new HistoryServiceLevelObjectiveResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryServiceLevelObjectiveResponse(data HistoryServiceLevelObjectiveResponseData) *HistoryServiceLevelObjectiveResponse {
	this := HistoryServiceLevelObjectiveResponse{}
	this.Data = data
	return &this
}

// NewHistoryServiceLevelObjectiveResponseWithDefaults instantiates a new HistoryServiceLevelObjectiveResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryServiceLevelObjectiveResponseWithDefaults() *HistoryServiceLevelObjectiveResponse {
	this := HistoryServiceLevelObjectiveResponse{}
	return &this
}

// GetData returns the Data field value
func (o *HistoryServiceLevelObjectiveResponse) GetData() HistoryServiceLevelObjectiveResponseData {
	if o == nil {
		var ret HistoryServiceLevelObjectiveResponseData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *HistoryServiceLevelObjectiveResponse) GetDataOk() (*HistoryServiceLevelObjectiveResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *HistoryServiceLevelObjectiveResponse) SetData(v HistoryServiceLevelObjectiveResponseData) {
	o.Data = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *HistoryServiceLevelObjectiveResponse) GetErrors() []SLOHistoryResponseError {
	if o == nil || o.Errors == nil {
		var ret []SLOHistoryResponseError
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryServiceLevelObjectiveResponse) GetErrorsOk() (*[]SLOHistoryResponseError, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *HistoryServiceLevelObjectiveResponse) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []SLOHistoryResponseError and assigns it to the Errors field.
func (o *HistoryServiceLevelObjectiveResponse) SetErrors(v []SLOHistoryResponseError) {
	o.Errors = &v
}

func (o HistoryServiceLevelObjectiveResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableHistoryServiceLevelObjectiveResponse struct {
	value *HistoryServiceLevelObjectiveResponse
	isSet bool
}

func (v NullableHistoryServiceLevelObjectiveResponse) Get() *HistoryServiceLevelObjectiveResponse {
	return v.value
}

func (v *NullableHistoryServiceLevelObjectiveResponse) Set(val *HistoryServiceLevelObjectiveResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryServiceLevelObjectiveResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryServiceLevelObjectiveResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryServiceLevelObjectiveResponse(val *HistoryServiceLevelObjectiveResponse) *NullableHistoryServiceLevelObjectiveResponse {
	return &NullableHistoryServiceLevelObjectiveResponse{value: val, isSet: true}
}

func (v NullableHistoryServiceLevelObjectiveResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryServiceLevelObjectiveResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
