/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"bytes"
	"encoding/json"
)

// Series struct for Series
type Series struct {
	// The name of the host that produced the metric.
	Host *string `json:"host,omitempty"`
	// If the type of the metric is rate or count, define the corresponding interval.
	Interval *NullableInt64 `json:"interval,omitempty"`
	// The name of the timeseries
	Metric string      `json:"metric"`
	Points [][]float64 `json:"points"`
	// A list of tags associated with the metric.
	Tags *[]string `json:"tags,omitempty"`
	Type *string   `json:"type,omitempty"`
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *Series) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Series) GetHostOk() (string, bool) {
	if o == nil || o.Host == nil {
		var ret string
		return ret, false
	}
	return *o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *Series) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *Series) SetHost(v string) {
	o.Host = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *Series) GetInterval() NullableInt64 {
	if o == nil || o.Interval == nil {
		var ret NullableInt64
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Series) GetIntervalOk() (NullableInt64, bool) {
	if o == nil || o.Interval == nil {
		var ret NullableInt64
		return ret, false
	}
	return *o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *Series) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given NullableInt64 and assigns it to the Interval field.
func (o *Series) SetInterval(v NullableInt64) {
	o.Interval = &v
}

// GetMetric returns the Metric field value
func (o *Series) GetMetric() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Metric
}

// SetMetric sets field value
func (o *Series) SetMetric(v string) {
	o.Metric = v
}

// GetPoints returns the Points field value
func (o *Series) GetPoints() [][]float64 {
	if o == nil {
		var ret [][]float64
		return ret
	}

	return o.Points
}

// SetPoints sets field value
func (o *Series) SetPoints(v [][]float64) {
	o.Points = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Series) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Series) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret, false
	}
	return *o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Series) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Series) SetTags(v []string) {
	o.Tags = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Series) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Series) GetTypeOk() (string, bool) {
	if o == nil || o.Type == nil {
		var ret string
		return ret, false
	}
	return *o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Series) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Series) SetType(v string) {
	o.Type = &v
}

type NullableSeries struct {
	Value        Series
	ExplicitNull bool
}

func (v NullableSeries) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableSeries) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
