/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// MonthlyUsageAttributionMetadata The object containing document metadata.
type MonthlyUsageAttributionMetadata struct {
	// An array of available aggregates.
	Aggregates *[]UsageAttributionAggregatesBody  `json:"aggregates,omitempty"`
	Pagination *MonthlyUsageAttributionPagination `json:"pagination,omitempty"`
	// UnparsedObject contains the raw value of the object if there was an error when deserializing into the struct
	UnparsedObject map[string]interface{} `json:-`
}

// NewMonthlyUsageAttributionMetadata instantiates a new MonthlyUsageAttributionMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthlyUsageAttributionMetadata() *MonthlyUsageAttributionMetadata {
	this := MonthlyUsageAttributionMetadata{}
	return &this
}

// NewMonthlyUsageAttributionMetadataWithDefaults instantiates a new MonthlyUsageAttributionMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthlyUsageAttributionMetadataWithDefaults() *MonthlyUsageAttributionMetadata {
	this := MonthlyUsageAttributionMetadata{}
	return &this
}

// GetAggregates returns the Aggregates field value if set, zero value otherwise.
func (o *MonthlyUsageAttributionMetadata) GetAggregates() []UsageAttributionAggregatesBody {
	if o == nil || o.Aggregates == nil {
		var ret []UsageAttributionAggregatesBody
		return ret
	}
	return *o.Aggregates
}

// GetAggregatesOk returns a tuple with the Aggregates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyUsageAttributionMetadata) GetAggregatesOk() (*[]UsageAttributionAggregatesBody, bool) {
	if o == nil || o.Aggregates == nil {
		return nil, false
	}
	return o.Aggregates, true
}

// HasAggregates returns a boolean if a field has been set.
func (o *MonthlyUsageAttributionMetadata) HasAggregates() bool {
	if o != nil && o.Aggregates != nil {
		return true
	}

	return false
}

// SetAggregates gets a reference to the given []UsageAttributionAggregatesBody and assigns it to the Aggregates field.
func (o *MonthlyUsageAttributionMetadata) SetAggregates(v []UsageAttributionAggregatesBody) {
	o.Aggregates = &v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *MonthlyUsageAttributionMetadata) GetPagination() MonthlyUsageAttributionPagination {
	if o == nil || o.Pagination == nil {
		var ret MonthlyUsageAttributionPagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyUsageAttributionMetadata) GetPaginationOk() (*MonthlyUsageAttributionPagination, bool) {
	if o == nil || o.Pagination == nil {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *MonthlyUsageAttributionMetadata) HasPagination() bool {
	if o != nil && o.Pagination != nil {
		return true
	}

	return false
}

// SetPagination gets a reference to the given MonthlyUsageAttributionPagination and assigns it to the Pagination field.
func (o *MonthlyUsageAttributionMetadata) SetPagination(v MonthlyUsageAttributionPagination) {
	o.Pagination = &v
}

func (o MonthlyUsageAttributionMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UnparsedObject != nil {
		return json.Marshal(o.UnparsedObject)
	}
	if o.Aggregates != nil {
		toSerialize["aggregates"] = o.Aggregates
	}
	if o.Pagination != nil {
		toSerialize["pagination"] = o.Pagination
	}
	return json.Marshal(toSerialize)
}

func (o *MonthlyUsageAttributionMetadata) UnmarshalJSON(bytes []byte) (err error) {
	raw := map[string]interface{}{}
	all := struct {
		Aggregates *[]UsageAttributionAggregatesBody  `json:"aggregates,omitempty"`
		Pagination *MonthlyUsageAttributionPagination `json:"pagination,omitempty"`
	}{}
	err = json.Unmarshal(bytes, &all)
	if err != nil {
		err = json.Unmarshal(bytes, &raw)
		if err != nil {
			return err
		}
		o.UnparsedObject = raw
		return nil
	}
	o.Aggregates = all.Aggregates
	o.Pagination = all.Pagination
	return nil
}

type NullableMonthlyUsageAttributionMetadata struct {
	value *MonthlyUsageAttributionMetadata
	isSet bool
}

func (v NullableMonthlyUsageAttributionMetadata) Get() *MonthlyUsageAttributionMetadata {
	return v.value
}

func (v *NullableMonthlyUsageAttributionMetadata) Set(val *MonthlyUsageAttributionMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthlyUsageAttributionMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthlyUsageAttributionMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthlyUsageAttributionMetadata(val *MonthlyUsageAttributionMetadata) *NullableMonthlyUsageAttributionMetadata {
	return &NullableMonthlyUsageAttributionMetadata{value: val, isSet: true}
}

func (v NullableMonthlyUsageAttributionMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthlyUsageAttributionMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
