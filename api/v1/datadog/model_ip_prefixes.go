/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"bytes"
	"encoding/json"
)

// IpPrefixes struct for IpPrefixes
type IpPrefixes struct {
	// List of IPv4 prefixes
	PrefixesIpv4 *[]string `json:"prefixes_ipv4,omitempty"`
	// List of IPv6 prefixes
	PrefixesIpv6 *[]string `json:"prefixes_ipv6,omitempty"`
}

// NewIpPrefixes instantiates a new IpPrefixes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpPrefixes() *IpPrefixes {
	this := IpPrefixes{}
	return &this
}

// NewIpPrefixesWithDefaults instantiates a new IpPrefixes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpPrefixesWithDefaults() *IpPrefixes {
	this := IpPrefixes{}
	return &this
}

// GetPrefixesIpv4 returns the PrefixesIpv4 field value if set, zero value otherwise.
func (o *IpPrefixes) GetPrefixesIpv4() []string {
	if o == nil || o.PrefixesIpv4 == nil {
		var ret []string
		return ret
	}
	return *o.PrefixesIpv4
}

// GetPrefixesIpv4Ok returns a tuple with the PrefixesIpv4 field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IpPrefixes) GetPrefixesIpv4Ok() ([]string, bool) {
	if o == nil || o.PrefixesIpv4 == nil {
		var ret []string
		return ret, false
	}
	return *o.PrefixesIpv4, true
}

// HasPrefixesIpv4 returns a boolean if a field has been set.
func (o *IpPrefixes) HasPrefixesIpv4() bool {
	if o != nil && o.PrefixesIpv4 != nil {
		return true
	}

	return false
}

// SetPrefixesIpv4 gets a reference to the given []string and assigns it to the PrefixesIpv4 field.
func (o *IpPrefixes) SetPrefixesIpv4(v []string) {
	o.PrefixesIpv4 = &v
}

// GetPrefixesIpv6 returns the PrefixesIpv6 field value if set, zero value otherwise.
func (o *IpPrefixes) GetPrefixesIpv6() []string {
	if o == nil || o.PrefixesIpv6 == nil {
		var ret []string
		return ret
	}
	return *o.PrefixesIpv6
}

// GetPrefixesIpv6Ok returns a tuple with the PrefixesIpv6 field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *IpPrefixes) GetPrefixesIpv6Ok() ([]string, bool) {
	if o == nil || o.PrefixesIpv6 == nil {
		var ret []string
		return ret, false
	}
	return *o.PrefixesIpv6, true
}

// HasPrefixesIpv6 returns a boolean if a field has been set.
func (o *IpPrefixes) HasPrefixesIpv6() bool {
	if o != nil && o.PrefixesIpv6 != nil {
		return true
	}

	return false
}

// SetPrefixesIpv6 gets a reference to the given []string and assigns it to the PrefixesIpv6 field.
func (o *IpPrefixes) SetPrefixesIpv6(v []string) {
	o.PrefixesIpv6 = &v
}

type NullableIpPrefixes struct {
	Value        IpPrefixes
	ExplicitNull bool
}

func (v NullableIpPrefixes) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableIpPrefixes) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
