/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"time"
)

// UsageCWSHour Cloud Workload Security usage for a given organization for a given hour.
type UsageCWSHour struct {
	// The total number of Cloud Workload Security container hours from the start of the given hour’s month until the given hour.
	CwsContainerCount *int64 `json:"cws_container_count,omitempty"`
	// The total number of Cloud Workload Security host hours from the start of the given hour’s month until the given hour.
	CwsHostCount *int64 `json:"cws_host_count,omitempty"`
	// The hour for the usage.
	Hour *time.Time `json:"hour,omitempty"`
}

// NewUsageCWSHour instantiates a new UsageCWSHour object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageCWSHour() *UsageCWSHour {
	this := UsageCWSHour{}
	return &this
}

// NewUsageCWSHourWithDefaults instantiates a new UsageCWSHour object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageCWSHourWithDefaults() *UsageCWSHour {
	this := UsageCWSHour{}
	return &this
}

// GetCwsContainerCount returns the CwsContainerCount field value if set, zero value otherwise.
func (o *UsageCWSHour) GetCwsContainerCount() int64 {
	if o == nil || o.CwsContainerCount == nil {
		var ret int64
		return ret
	}
	return *o.CwsContainerCount
}

// GetCwsContainerCountOk returns a tuple with the CwsContainerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageCWSHour) GetCwsContainerCountOk() (*int64, bool) {
	if o == nil || o.CwsContainerCount == nil {
		return nil, false
	}
	return o.CwsContainerCount, true
}

// HasCwsContainerCount returns a boolean if a field has been set.
func (o *UsageCWSHour) HasCwsContainerCount() bool {
	if o != nil && o.CwsContainerCount != nil {
		return true
	}

	return false
}

// SetCwsContainerCount gets a reference to the given int64 and assigns it to the CwsContainerCount field.
func (o *UsageCWSHour) SetCwsContainerCount(v int64) {
	o.CwsContainerCount = &v
}

// GetCwsHostCount returns the CwsHostCount field value if set, zero value otherwise.
func (o *UsageCWSHour) GetCwsHostCount() int64 {
	if o == nil || o.CwsHostCount == nil {
		var ret int64
		return ret
	}
	return *o.CwsHostCount
}

// GetCwsHostCountOk returns a tuple with the CwsHostCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageCWSHour) GetCwsHostCountOk() (*int64, bool) {
	if o == nil || o.CwsHostCount == nil {
		return nil, false
	}
	return o.CwsHostCount, true
}

// HasCwsHostCount returns a boolean if a field has been set.
func (o *UsageCWSHour) HasCwsHostCount() bool {
	if o != nil && o.CwsHostCount != nil {
		return true
	}

	return false
}

// SetCwsHostCount gets a reference to the given int64 and assigns it to the CwsHostCount field.
func (o *UsageCWSHour) SetCwsHostCount(v int64) {
	o.CwsHostCount = &v
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *UsageCWSHour) GetHour() time.Time {
	if o == nil || o.Hour == nil {
		var ret time.Time
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageCWSHour) GetHourOk() (*time.Time, bool) {
	if o == nil || o.Hour == nil {
		return nil, false
	}
	return o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *UsageCWSHour) HasHour() bool {
	if o != nil && o.Hour != nil {
		return true
	}

	return false
}

// SetHour gets a reference to the given time.Time and assigns it to the Hour field.
func (o *UsageCWSHour) SetHour(v time.Time) {
	o.Hour = &v
}

func (o UsageCWSHour) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CwsContainerCount != nil {
		toSerialize["cws_container_count"] = o.CwsContainerCount
	}
	if o.CwsHostCount != nil {
		toSerialize["cws_host_count"] = o.CwsHostCount
	}
	if o.Hour != nil {
		toSerialize["hour"] = o.Hour
	}
	return json.Marshal(toSerialize)
}

type NullableUsageCWSHour struct {
	value *UsageCWSHour
	isSet bool
}

func (v NullableUsageCWSHour) Get() *UsageCWSHour {
	return v.value
}

func (v *NullableUsageCWSHour) Set(val *UsageCWSHour) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageCWSHour) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageCWSHour) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageCWSHour(val *UsageCWSHour) *NullableUsageCWSHour {
	return &NullableUsageCWSHour{value: val, isSet: true}
}

func (v NullableUsageCWSHour) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageCWSHour) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
