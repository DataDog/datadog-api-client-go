/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// LogsProcessor Definition of a logs processor
type LogsProcessor struct {
	LogsProcessorInterface interface{ GetType() string }
}

func (s *LogsProcessor) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.LogsProcessorInterface)
}

func (s *LogsProcessor) UnmarshalJSON(src []byte) error {
	var err error
	var unmarshaled map[string]interface{}
	err = json.Unmarshal(src, &unmarshaled)
	if err != nil {
		return err
	}
	if v, ok := unmarshaled["type"]; ok {
		switch v {
		case "arithmetic-processor":
			var result *LogsArithmeticProcessor = &LogsArithmeticProcessor{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.LogsProcessorInterface = result
			return nil
		case "attribute-remapper":
			var result *LogsRemapper = &LogsRemapper{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.LogsProcessorInterface = result
			return nil
		case "category-processor":
			var result *LogsCategoryProcessor = &LogsCategoryProcessor{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.LogsProcessorInterface = result
			return nil
		case "date-remapper":
			var result *LogsDateRemapper = &LogsDateRemapper{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.LogsProcessorInterface = result
			return nil
		case "geo-ip-parser":
			var result *LogsGeoIpParser = &LogsGeoIpParser{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.LogsProcessorInterface = result
			return nil
		case "grok-parser":
			var result *LogsGrokParser = &LogsGrokParser{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.LogsProcessorInterface = result
			return nil
		case "lookup-processor":
			var result *LogsLookupProcessor = &LogsLookupProcessor{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.LogsProcessorInterface = result
			return nil
		case "message-remapper":
			var result *LogsMessageRemapper = &LogsMessageRemapper{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.LogsProcessorInterface = result
			return nil
		case "service-remapper":
			var result *LogsServiceRemapper = &LogsServiceRemapper{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.LogsProcessorInterface = result
			return nil
		case "status-remapper":
			var result *LogsStatusRemapper = &LogsStatusRemapper{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.LogsProcessorInterface = result
			return nil
		case "string-builder-processor":
			var result *LogsStringBuilderProcessor = &LogsStringBuilderProcessor{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.LogsProcessorInterface = result
			return nil
		case "trace-id-remapper":
			var result *LogsTraceRemapper = &LogsTraceRemapper{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.LogsProcessorInterface = result
			return nil
		case "url-parser":
			var result *LogsUrlParser = &LogsUrlParser{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.LogsProcessorInterface = result
			return nil
		case "user-agent-parser":
			var result *LogsUserAgentParser = &LogsUserAgentParser{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.LogsProcessorInterface = result
			return nil
		default:
			return fmt.Errorf("No oneOf model has 'type' equal to %s", v)
		}
	} else {
		return fmt.Errorf("Discriminator property 'type' not found in unmarshaled payload: %+v", unmarshaled)
	}
}

type NullableLogsProcessor struct {
	Value        LogsProcessor
	ExplicitNull bool
}

func (v NullableLogsProcessor) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableLogsProcessor) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
