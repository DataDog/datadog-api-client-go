/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// TimeSeriesFormulaAndFunctionProcessQueryDefinition Process query using formulas and functions.
type TimeSeriesFormulaAndFunctionProcessQueryDefinition struct {
	Aggregator *FormulaAndFunctionMetricAggregation     `json:"aggregator,omitempty"`
	DataSource FormulaAndFunctionProcessQueryDataSource `json:"data_source"`
	// Whether to normalize the CPU percentages.
	IsNormalizedCpu *bool `json:"is_normalized_cpu,omitempty"`
	// Number of hits to return.
	Limit *int64 `json:"limit,omitempty"`
	// Process metric name.
	Metric string `json:"metric"`
	// Name of query for use in formulas.
	Name *string         `json:"name,omitempty"`
	Sort *QuerySortOrder `json:"sort,omitempty"`
	// An array of tags to filter by.
	TagFilters *[]string `json:"tag_filters,omitempty"`
	// Text to use as filter.
	TextFilter *string `json:"text_filter,omitempty"`
}

// NewTimeSeriesFormulaAndFunctionProcessQueryDefinition instantiates a new TimeSeriesFormulaAndFunctionProcessQueryDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeSeriesFormulaAndFunctionProcessQueryDefinition(dataSource FormulaAndFunctionProcessQueryDataSource, metric string) *TimeSeriesFormulaAndFunctionProcessQueryDefinition {
	this := TimeSeriesFormulaAndFunctionProcessQueryDefinition{}
	this.DataSource = dataSource
	this.Metric = metric
	var sort QuerySortOrder = "desc"
	this.Sort = &sort
	return &this
}

// NewTimeSeriesFormulaAndFunctionProcessQueryDefinitionWithDefaults instantiates a new TimeSeriesFormulaAndFunctionProcessQueryDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeSeriesFormulaAndFunctionProcessQueryDefinitionWithDefaults() *TimeSeriesFormulaAndFunctionProcessQueryDefinition {
	this := TimeSeriesFormulaAndFunctionProcessQueryDefinition{}
	var sort QuerySortOrder = "desc"
	this.Sort = &sort
	return &this
}

// GetAggregator returns the Aggregator field value if set, zero value otherwise.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetAggregator() FormulaAndFunctionMetricAggregation {
	if o == nil || o.Aggregator == nil {
		var ret FormulaAndFunctionMetricAggregation
		return ret
	}
	return *o.Aggregator
}

// GetAggregatorOk returns a tuple with the Aggregator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetAggregatorOk() (*FormulaAndFunctionMetricAggregation, bool) {
	if o == nil || o.Aggregator == nil {
		return nil, false
	}
	return o.Aggregator, true
}

// HasAggregator returns a boolean if a field has been set.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) HasAggregator() bool {
	if o != nil && o.Aggregator != nil {
		return true
	}

	return false
}

// SetAggregator gets a reference to the given FormulaAndFunctionMetricAggregation and assigns it to the Aggregator field.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) SetAggregator(v FormulaAndFunctionMetricAggregation) {
	o.Aggregator = &v
}

// GetDataSource returns the DataSource field value
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetDataSource() FormulaAndFunctionProcessQueryDataSource {
	if o == nil {
		var ret FormulaAndFunctionProcessQueryDataSource
		return ret
	}

	return o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetDataSourceOk() (*FormulaAndFunctionProcessQueryDataSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSource, true
}

// SetDataSource sets field value
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) SetDataSource(v FormulaAndFunctionProcessQueryDataSource) {
	o.DataSource = v
}

// GetIsNormalizedCpu returns the IsNormalizedCpu field value if set, zero value otherwise.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetIsNormalizedCpu() bool {
	if o == nil || o.IsNormalizedCpu == nil {
		var ret bool
		return ret
	}
	return *o.IsNormalizedCpu
}

// GetIsNormalizedCpuOk returns a tuple with the IsNormalizedCpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetIsNormalizedCpuOk() (*bool, bool) {
	if o == nil || o.IsNormalizedCpu == nil {
		return nil, false
	}
	return o.IsNormalizedCpu, true
}

// HasIsNormalizedCpu returns a boolean if a field has been set.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) HasIsNormalizedCpu() bool {
	if o != nil && o.IsNormalizedCpu != nil {
		return true
	}

	return false
}

// SetIsNormalizedCpu gets a reference to the given bool and assigns it to the IsNormalizedCpu field.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) SetIsNormalizedCpu(v bool) {
	o.IsNormalizedCpu = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetLimit() int64 {
	if o == nil || o.Limit == nil {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetLimitOk() (*int64, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) SetLimit(v int64) {
	o.Limit = &v
}

// GetMetric returns the Metric field value
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetMetric() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Metric
}

// GetMetricOk returns a tuple with the Metric field value
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetMetricOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metric, true
}

// SetMetric sets field value
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) SetMetric(v string) {
	o.Metric = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) SetName(v string) {
	o.Name = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetSort() QuerySortOrder {
	if o == nil || o.Sort == nil {
		var ret QuerySortOrder
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetSortOk() (*QuerySortOrder, bool) {
	if o == nil || o.Sort == nil {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) HasSort() bool {
	if o != nil && o.Sort != nil {
		return true
	}

	return false
}

// SetSort gets a reference to the given QuerySortOrder and assigns it to the Sort field.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) SetSort(v QuerySortOrder) {
	o.Sort = &v
}

// GetTagFilters returns the TagFilters field value if set, zero value otherwise.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetTagFilters() []string {
	if o == nil || o.TagFilters == nil {
		var ret []string
		return ret
	}
	return *o.TagFilters
}

// GetTagFiltersOk returns a tuple with the TagFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetTagFiltersOk() (*[]string, bool) {
	if o == nil || o.TagFilters == nil {
		return nil, false
	}
	return o.TagFilters, true
}

// HasTagFilters returns a boolean if a field has been set.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) HasTagFilters() bool {
	if o != nil && o.TagFilters != nil {
		return true
	}

	return false
}

// SetTagFilters gets a reference to the given []string and assigns it to the TagFilters field.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) SetTagFilters(v []string) {
	o.TagFilters = &v
}

// GetTextFilter returns the TextFilter field value if set, zero value otherwise.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetTextFilter() string {
	if o == nil || o.TextFilter == nil {
		var ret string
		return ret
	}
	return *o.TextFilter
}

// GetTextFilterOk returns a tuple with the TextFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) GetTextFilterOk() (*string, bool) {
	if o == nil || o.TextFilter == nil {
		return nil, false
	}
	return o.TextFilter, true
}

// HasTextFilter returns a boolean if a field has been set.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) HasTextFilter() bool {
	if o != nil && o.TextFilter != nil {
		return true
	}

	return false
}

// SetTextFilter gets a reference to the given string and assigns it to the TextFilter field.
func (o *TimeSeriesFormulaAndFunctionProcessQueryDefinition) SetTextFilter(v string) {
	o.TextFilter = &v
}

func (o TimeSeriesFormulaAndFunctionProcessQueryDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Aggregator != nil {
		toSerialize["aggregator"] = o.Aggregator
	}
	if true {
		toSerialize["data_source"] = o.DataSource
	}
	if o.IsNormalizedCpu != nil {
		toSerialize["is_normalized_cpu"] = o.IsNormalizedCpu
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if true {
		toSerialize["metric"] = o.Metric
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Sort != nil {
		toSerialize["sort"] = o.Sort
	}
	if o.TagFilters != nil {
		toSerialize["tag_filters"] = o.TagFilters
	}
	if o.TextFilter != nil {
		toSerialize["text_filter"] = o.TextFilter
	}
	return json.Marshal(toSerialize)
}

type NullableTimeSeriesFormulaAndFunctionProcessQueryDefinition struct {
	value *TimeSeriesFormulaAndFunctionProcessQueryDefinition
	isSet bool
}

func (v NullableTimeSeriesFormulaAndFunctionProcessQueryDefinition) Get() *TimeSeriesFormulaAndFunctionProcessQueryDefinition {
	return v.value
}

func (v *NullableTimeSeriesFormulaAndFunctionProcessQueryDefinition) Set(val *TimeSeriesFormulaAndFunctionProcessQueryDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeSeriesFormulaAndFunctionProcessQueryDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeSeriesFormulaAndFunctionProcessQueryDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeSeriesFormulaAndFunctionProcessQueryDefinition(val *TimeSeriesFormulaAndFunctionProcessQueryDefinition) *NullableTimeSeriesFormulaAndFunctionProcessQueryDefinition {
	return &NullableTimeSeriesFormulaAndFunctionProcessQueryDefinition{value: val, isSet: true}
}

func (v NullableTimeSeriesFormulaAndFunctionProcessQueryDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeSeriesFormulaAndFunctionProcessQueryDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
