/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"bytes"
	"encoding/json"
)

// LogsExclusion Represents the index exclusion filter object from config API.
type LogsExclusion struct {
	Filter    *LogsExclusionFilter `json:"filter,omitempty"`
	IsEnabled *bool                `json:"is_enabled,omitempty"`
	Name      string               `json:"name"`
}

// NewLogsExclusion instantiates a new LogsExclusion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsExclusion(name string) *LogsExclusion {
	this := LogsExclusion{}
	this.Name = name
	return &this
}

// NewLogsExclusionWithDefaults instantiates a new LogsExclusion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsExclusionWithDefaults() *LogsExclusion {
	this := LogsExclusion{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *LogsExclusion) GetFilter() LogsExclusionFilter {
	if o == nil || o.Filter == nil {
		var ret LogsExclusionFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LogsExclusion) GetFilterOk() (LogsExclusionFilter, bool) {
	if o == nil || o.Filter == nil {
		var ret LogsExclusionFilter
		return ret, false
	}
	return *o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *LogsExclusion) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given LogsExclusionFilter and assigns it to the Filter field.
func (o *LogsExclusion) SetFilter(v LogsExclusionFilter) {
	o.Filter = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *LogsExclusion) GetIsEnabled() bool {
	if o == nil || o.IsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LogsExclusion) GetIsEnabledOk() (bool, bool) {
	if o == nil || o.IsEnabled == nil {
		var ret bool
		return ret, false
	}
	return *o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *LogsExclusion) HasIsEnabled() bool {
	if o != nil && o.IsEnabled != nil {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *LogsExclusion) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetName returns the Name field value
func (o *LogsExclusion) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value
func (o *LogsExclusion) SetName(v string) {
	o.Name = v
}

type NullableLogsExclusion struct {
	Value        LogsExclusion
	ExplicitNull bool
}

func (v NullableLogsExclusion) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableLogsExclusion) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
