/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"bytes"
	"encoding/json"
)

// HostTags struct for HostTags
type HostTags struct {
	Host *string   `json:"host,omitempty"`
	Tags *[]string `json:"tags,omitempty"`
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *HostTags) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *HostTags) GetHostOk() (string, bool) {
	if o == nil || o.Host == nil {
		var ret string
		return ret, false
	}
	return *o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *HostTags) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *HostTags) SetHost(v string) {
	o.Host = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *HostTags) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *HostTags) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret, false
	}
	return *o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *HostTags) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *HostTags) SetTags(v []string) {
	o.Tags = &v
}

type NullableHostTags struct {
	Value        HostTags
	ExplicitNull bool
}

func (v NullableHostTags) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableHostTags) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
