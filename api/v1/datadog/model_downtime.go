/*
 * Datadog API Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * API version: 1.0
 * Contact: support@datadoghq.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog
// Downtime Downtiming gives you greater control over monitor notifications by allowing you to globally exclude scopes from alerting. Downtime settings, which can be scheduled with start and end times, prevent all alerting related to specified Datadog tags.
type Downtime struct {
	// If a scheduled downtime currently exists.
	Active bool `json:"active,omitempty"`
	// If a scheduled downtime is canceled.
	Canceled *int64 `json:"canceled,omitempty"`
	// User ID of the downtime creator.
	CreatorId int32 `json:"creator_id,omitempty"`
	// If a downtime has been disabled.
	Disabled bool `json:"disabled,omitempty"`
	// `0` for a downtime applied on `*` or all, `1` when the downtime is only scoped to hosts, or `2` when the downtime is scoped to anything but hosts.
	DowntimeType int32 `json:"downtime_type,omitempty"`
	// POSIX timestamp to end the downtime. If not provided, the downtime is in effect indefinitely until you cancel it.
	End *int64 `json:"end,omitempty"`
	// The downtime ID.
	Id int64 `json:"id,omitempty"`
	// A message to include with notifications for this downtime. Email notifications can be sent to specific users by using the same `@username` notation as events.
	Message string `json:"message,omitempty"`
	// A single monitor to which the downtime applies. If not provided, the downtime applies to all monitors.
	MonitorId *int64 `json:"monitor_id,omitempty"`
	// A comma-separated list of monitor tags. For example, tags that are applied directly to monitors, not tags that are used in monitor queries (which are filtered by the scope parameter), to which the downtime applies. The resulting downtime applies to monitors that match ALL provided monitor tags. For example, `service:postgres` **AND** `team:frontend`.
	MonitorTags []string `json:"monitor_tags,omitempty"`
	// ID of the parent Downtime.
	ParentId *int64 `json:"parent_id,omitempty"`
	Recurrence *DowntimeRecurrence `json:"recurrence,omitempty"`
	// The scope(s) to which the downtime applies. For example, `host:app2`. Provide multiple scopes as a comma-separated list like `env:dev,env:prod`. The resulting downtime applies to sources that matches ALL provided scopes (`env:dev` **AND** `env:prod`).
	Scope []string `json:"scope,omitempty"`
	// POSIX timestamp to start the downtime. If not provided, the downtime starts the moment it is created.
	Start int64 `json:"start,omitempty"`
	// The timezone for the downtime.
	Timezone string `json:"timezone,omitempty"`
	// ID of the last user that updated the downtime.
	UpdaterId *int32 `json:"updater_id,omitempty"`
}
