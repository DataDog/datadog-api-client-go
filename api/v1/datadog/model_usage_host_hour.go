/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"time"
)

// UsageHostHour struct for UsageHostHour
type UsageHostHour struct {
	// Contains the total number of infrastructure hosts reporting during a given hour that were running the Datadog Agent.
	AgentHostCount *int64 `json:"agent_host_count,omitempty"`
	// Shows the total number of hosts using APM during the hour, these are counted as billable (except during trial periods).
	ApmHostCount *int64 `json:"apm_host_count,omitempty"`
	// Contains the total number of hosts that reported via the AWS integration (and were NOT running the Datadog Agent). When AWS or GCP hosts are also running the Datadog Agent, they are counted as Agent hosts, NOT as AWS or GCP.
	AwsHostCount *int64 `json:"aws_host_count,omitempty"`
	// Contains the total number of billable infrastructure hosts reporting during a given hour. This is the sum of `agent_host_count`, `aws_host_count`, and `gcp_host_count`.
	ContainerCount *int64 `json:"container_count,omitempty"`
	// Contains the total number of hosts that reported via the Google Cloud integration (and were NOT running the Datadog Agent).
	GcpHostCount *int64 `json:"gcp_host_count,omitempty"`
	// Shows the total number of containers reporting via the Docker integration during the hour.
	HostCount *int64 `json:"host_count,omitempty"`
	// The hour for the usage.
	Hour *time.Time `json:"hour,omitempty"`
}

// NewUsageHostHour instantiates a new UsageHostHour object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageHostHour() *UsageHostHour {
	this := UsageHostHour{}
	return &this
}

// NewUsageHostHourWithDefaults instantiates a new UsageHostHour object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageHostHourWithDefaults() *UsageHostHour {
	this := UsageHostHour{}
	return &this
}

// GetAgentHostCount returns the AgentHostCount field value if set, zero value otherwise.
func (o *UsageHostHour) GetAgentHostCount() int64 {
	if o == nil || o.AgentHostCount == nil {
		var ret int64
		return ret
	}
	return *o.AgentHostCount
}

// GetAgentHostCountOk returns a tuple with the AgentHostCount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UsageHostHour) GetAgentHostCountOk() (int64, bool) {
	if o == nil || o.AgentHostCount == nil {
		var ret int64
		return ret, false
	}
	return *o.AgentHostCount, true
}

// HasAgentHostCount returns a boolean if a field has been set.
func (o *UsageHostHour) HasAgentHostCount() bool {
	if o != nil && o.AgentHostCount != nil {
		return true
	}

	return false
}

// SetAgentHostCount gets a reference to the given int64 and assigns it to the AgentHostCount field.
func (o *UsageHostHour) SetAgentHostCount(v int64) {
	o.AgentHostCount = &v
}

// GetApmHostCount returns the ApmHostCount field value if set, zero value otherwise.
func (o *UsageHostHour) GetApmHostCount() int64 {
	if o == nil || o.ApmHostCount == nil {
		var ret int64
		return ret
	}
	return *o.ApmHostCount
}

// GetApmHostCountOk returns a tuple with the ApmHostCount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UsageHostHour) GetApmHostCountOk() (int64, bool) {
	if o == nil || o.ApmHostCount == nil {
		var ret int64
		return ret, false
	}
	return *o.ApmHostCount, true
}

// HasApmHostCount returns a boolean if a field has been set.
func (o *UsageHostHour) HasApmHostCount() bool {
	if o != nil && o.ApmHostCount != nil {
		return true
	}

	return false
}

// SetApmHostCount gets a reference to the given int64 and assigns it to the ApmHostCount field.
func (o *UsageHostHour) SetApmHostCount(v int64) {
	o.ApmHostCount = &v
}

// GetAwsHostCount returns the AwsHostCount field value if set, zero value otherwise.
func (o *UsageHostHour) GetAwsHostCount() int64 {
	if o == nil || o.AwsHostCount == nil {
		var ret int64
		return ret
	}
	return *o.AwsHostCount
}

// GetAwsHostCountOk returns a tuple with the AwsHostCount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UsageHostHour) GetAwsHostCountOk() (int64, bool) {
	if o == nil || o.AwsHostCount == nil {
		var ret int64
		return ret, false
	}
	return *o.AwsHostCount, true
}

// HasAwsHostCount returns a boolean if a field has been set.
func (o *UsageHostHour) HasAwsHostCount() bool {
	if o != nil && o.AwsHostCount != nil {
		return true
	}

	return false
}

// SetAwsHostCount gets a reference to the given int64 and assigns it to the AwsHostCount field.
func (o *UsageHostHour) SetAwsHostCount(v int64) {
	o.AwsHostCount = &v
}

// GetContainerCount returns the ContainerCount field value if set, zero value otherwise.
func (o *UsageHostHour) GetContainerCount() int64 {
	if o == nil || o.ContainerCount == nil {
		var ret int64
		return ret
	}
	return *o.ContainerCount
}

// GetContainerCountOk returns a tuple with the ContainerCount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UsageHostHour) GetContainerCountOk() (int64, bool) {
	if o == nil || o.ContainerCount == nil {
		var ret int64
		return ret, false
	}
	return *o.ContainerCount, true
}

// HasContainerCount returns a boolean if a field has been set.
func (o *UsageHostHour) HasContainerCount() bool {
	if o != nil && o.ContainerCount != nil {
		return true
	}

	return false
}

// SetContainerCount gets a reference to the given int64 and assigns it to the ContainerCount field.
func (o *UsageHostHour) SetContainerCount(v int64) {
	o.ContainerCount = &v
}

// GetGcpHostCount returns the GcpHostCount field value if set, zero value otherwise.
func (o *UsageHostHour) GetGcpHostCount() int64 {
	if o == nil || o.GcpHostCount == nil {
		var ret int64
		return ret
	}
	return *o.GcpHostCount
}

// GetGcpHostCountOk returns a tuple with the GcpHostCount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UsageHostHour) GetGcpHostCountOk() (int64, bool) {
	if o == nil || o.GcpHostCount == nil {
		var ret int64
		return ret, false
	}
	return *o.GcpHostCount, true
}

// HasGcpHostCount returns a boolean if a field has been set.
func (o *UsageHostHour) HasGcpHostCount() bool {
	if o != nil && o.GcpHostCount != nil {
		return true
	}

	return false
}

// SetGcpHostCount gets a reference to the given int64 and assigns it to the GcpHostCount field.
func (o *UsageHostHour) SetGcpHostCount(v int64) {
	o.GcpHostCount = &v
}

// GetHostCount returns the HostCount field value if set, zero value otherwise.
func (o *UsageHostHour) GetHostCount() int64 {
	if o == nil || o.HostCount == nil {
		var ret int64
		return ret
	}
	return *o.HostCount
}

// GetHostCountOk returns a tuple with the HostCount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UsageHostHour) GetHostCountOk() (int64, bool) {
	if o == nil || o.HostCount == nil {
		var ret int64
		return ret, false
	}
	return *o.HostCount, true
}

// HasHostCount returns a boolean if a field has been set.
func (o *UsageHostHour) HasHostCount() bool {
	if o != nil && o.HostCount != nil {
		return true
	}

	return false
}

// SetHostCount gets a reference to the given int64 and assigns it to the HostCount field.
func (o *UsageHostHour) SetHostCount(v int64) {
	o.HostCount = &v
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *UsageHostHour) GetHour() time.Time {
	if o == nil || o.Hour == nil {
		var ret time.Time
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UsageHostHour) GetHourOk() (time.Time, bool) {
	if o == nil || o.Hour == nil {
		var ret time.Time
		return ret, false
	}
	return *o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *UsageHostHour) HasHour() bool {
	if o != nil && o.Hour != nil {
		return true
	}

	return false
}

// SetHour gets a reference to the given time.Time and assigns it to the Hour field.
func (o *UsageHostHour) SetHour(v time.Time) {
	o.Hour = &v
}

func (o UsageHostHour) MarshalJSON() ([]byte, error) {
	//TODO: serialize parents?
	toSerialize := map[string]interface{}{}
	if o.AgentHostCount != nil {
		toSerialize["agent_host_count"] = o.AgentHostCount
	}
	if o.ApmHostCount != nil {
		toSerialize["apm_host_count"] = o.ApmHostCount
	}
	if o.AwsHostCount != nil {
		toSerialize["aws_host_count"] = o.AwsHostCount
	}
	if o.ContainerCount != nil {
		toSerialize["container_count"] = o.ContainerCount
	}
	if o.GcpHostCount != nil {
		toSerialize["gcp_host_count"] = o.GcpHostCount
	}
	if o.HostCount != nil {
		toSerialize["host_count"] = o.HostCount
	}
	if o.Hour != nil {
		toSerialize["hour"] = o.Hour
	}
	return json.Marshal(toSerialize)
}

type NullableUsageHostHour struct {
	value *UsageHostHour
	isSet bool
}

func (v NullableUsageHostHour) Get() *UsageHostHour {
	return v.value
}

func (v NullableUsageHostHour) Set(val *UsageHostHour) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageHostHour) IsSet() bool {
	return v.isSet
}

func (v NullableUsageHostHour) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageHostHour(val *UsageHostHour) *NullableUsageHostHour {
	return &NullableUsageHostHour{value: val, isSet: true}
}

func (v NullableUsageHostHour) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageHostHour) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
