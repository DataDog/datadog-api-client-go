/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"bytes"
	"encoding/json"
	"time"
)

// UsageTraceHour struct for UsageTraceHour
type UsageTraceHour struct {
	// The hour for the usage.
	Hour *time.Time `json:"hour,omitempty"`
	// Contains the number of Analyzed Spans indexed.
	IndexedEventsCount *int64 `json:"indexed_events_count,omitempty"`
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *UsageTraceHour) GetHour() time.Time {
	if o == nil || o.Hour == nil {
		var ret time.Time
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UsageTraceHour) GetHourOk() (time.Time, bool) {
	if o == nil || o.Hour == nil {
		var ret time.Time
		return ret, false
	}
	return *o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *UsageTraceHour) HasHour() bool {
	if o != nil && o.Hour != nil {
		return true
	}

	return false
}

// SetHour gets a reference to the given time.Time and assigns it to the Hour field.
func (o *UsageTraceHour) SetHour(v time.Time) {
	o.Hour = &v
}

// GetIndexedEventsCount returns the IndexedEventsCount field value if set, zero value otherwise.
func (o *UsageTraceHour) GetIndexedEventsCount() int64 {
	if o == nil || o.IndexedEventsCount == nil {
		var ret int64
		return ret
	}
	return *o.IndexedEventsCount
}

// GetIndexedEventsCountOk returns a tuple with the IndexedEventsCount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UsageTraceHour) GetIndexedEventsCountOk() (int64, bool) {
	if o == nil || o.IndexedEventsCount == nil {
		var ret int64
		return ret, false
	}
	return *o.IndexedEventsCount, true
}

// HasIndexedEventsCount returns a boolean if a field has been set.
func (o *UsageTraceHour) HasIndexedEventsCount() bool {
	if o != nil && o.IndexedEventsCount != nil {
		return true
	}

	return false
}

// SetIndexedEventsCount gets a reference to the given int64 and assigns it to the IndexedEventsCount field.
func (o *UsageTraceHour) SetIndexedEventsCount(v int64) {
	o.IndexedEventsCount = &v
}

type NullableUsageTraceHour struct {
	Value        UsageTraceHour
	ExplicitNull bool
}

func (v NullableUsageTraceHour) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableUsageTraceHour) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
