/*
 * (C) Datadog, Inc. 2019
 * All rights reserved
 * Licensed under a 3-clause BSD style license (see LICENSE)
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"bytes"
	"encoding/json"
)

// DowntimeRecurrence struct for DowntimeRecurrence
type DowntimeRecurrence struct {
	Period           *int32         `json:"period,omitempty"`
	Type             *string        `json:"type,omitempty"`
	UntilDate        *NullableInt64 `json:"until_date,omitempty"`
	UntilOccurrences *NullableInt32 `json:"until_occurrences,omitempty"`
	WeekDays         *[]string      `json:"week_days,omitempty"`
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *DowntimeRecurrence) GetPeriod() int32 {
	if o == nil || o.Period == nil {
		var ret int32
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DowntimeRecurrence) GetPeriodOk() (int32, bool) {
	if o == nil || o.Period == nil {
		var ret int32
		return ret, false
	}
	return *o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *DowntimeRecurrence) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given int32 and assigns it to the Period field.
func (o *DowntimeRecurrence) SetPeriod(v int32) {
	o.Period = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DowntimeRecurrence) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DowntimeRecurrence) GetTypeOk() (string, bool) {
	if o == nil || o.Type == nil {
		var ret string
		return ret, false
	}
	return *o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DowntimeRecurrence) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DowntimeRecurrence) SetType(v string) {
	o.Type = &v
}

// GetUntilDate returns the UntilDate field value if set, zero value otherwise.
func (o *DowntimeRecurrence) GetUntilDate() NullableInt64 {
	if o == nil || o.UntilDate == nil {
		var ret NullableInt64
		return ret
	}
	return *o.UntilDate
}

// GetUntilDateOk returns a tuple with the UntilDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DowntimeRecurrence) GetUntilDateOk() (NullableInt64, bool) {
	if o == nil || o.UntilDate == nil {
		var ret NullableInt64
		return ret, false
	}
	return *o.UntilDate, true
}

// HasUntilDate returns a boolean if a field has been set.
func (o *DowntimeRecurrence) HasUntilDate() bool {
	if o != nil && o.UntilDate != nil {
		return true
	}

	return false
}

// SetUntilDate gets a reference to the given NullableInt64 and assigns it to the UntilDate field.
func (o *DowntimeRecurrence) SetUntilDate(v NullableInt64) {
	o.UntilDate = &v
}

// GetUntilOccurrences returns the UntilOccurrences field value if set, zero value otherwise.
func (o *DowntimeRecurrence) GetUntilOccurrences() NullableInt32 {
	if o == nil || o.UntilOccurrences == nil {
		var ret NullableInt32
		return ret
	}
	return *o.UntilOccurrences
}

// GetUntilOccurrencesOk returns a tuple with the UntilOccurrences field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DowntimeRecurrence) GetUntilOccurrencesOk() (NullableInt32, bool) {
	if o == nil || o.UntilOccurrences == nil {
		var ret NullableInt32
		return ret, false
	}
	return *o.UntilOccurrences, true
}

// HasUntilOccurrences returns a boolean if a field has been set.
func (o *DowntimeRecurrence) HasUntilOccurrences() bool {
	if o != nil && o.UntilOccurrences != nil {
		return true
	}

	return false
}

// SetUntilOccurrences gets a reference to the given NullableInt32 and assigns it to the UntilOccurrences field.
func (o *DowntimeRecurrence) SetUntilOccurrences(v NullableInt32) {
	o.UntilOccurrences = &v
}

// GetWeekDays returns the WeekDays field value if set, zero value otherwise.
func (o *DowntimeRecurrence) GetWeekDays() []string {
	if o == nil || o.WeekDays == nil {
		var ret []string
		return ret
	}
	return *o.WeekDays
}

// GetWeekDaysOk returns a tuple with the WeekDays field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *DowntimeRecurrence) GetWeekDaysOk() ([]string, bool) {
	if o == nil || o.WeekDays == nil {
		var ret []string
		return ret, false
	}
	return *o.WeekDays, true
}

// HasWeekDays returns a boolean if a field has been set.
func (o *DowntimeRecurrence) HasWeekDays() bool {
	if o != nil && o.WeekDays != nil {
		return true
	}

	return false
}

// SetWeekDays gets a reference to the given []string and assigns it to the WeekDays field.
func (o *DowntimeRecurrence) SetWeekDays(v []string) {
	o.WeekDays = &v
}

type NullableDowntimeRecurrence struct {
	Value        DowntimeRecurrence
	ExplicitNull bool
}

func (v NullableDowntimeRecurrence) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableDowntimeRecurrence) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
