/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// SLOBulkDeleteError Object describing the error.
type SLOBulkDeleteError struct {
	// The ID of the service level objective object associated with this error.
	Id string `json:"id"`
	// The error message.
	Message   string            `json:"message"`
	Timeframe SLOErrorTimeframe `json:"timeframe"`
}

// NewSLOBulkDeleteError instantiates a new SLOBulkDeleteError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSLOBulkDeleteError(id string, message string, timeframe SLOErrorTimeframe) *SLOBulkDeleteError {
	this := SLOBulkDeleteError{}
	this.Id = id
	this.Message = message
	this.Timeframe = timeframe
	return &this
}

// NewSLOBulkDeleteErrorWithDefaults instantiates a new SLOBulkDeleteError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSLOBulkDeleteErrorWithDefaults() *SLOBulkDeleteError {
	this := SLOBulkDeleteError{}
	return &this
}

// GetId returns the Id field value
func (o *SLOBulkDeleteError) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SLOBulkDeleteError) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SLOBulkDeleteError) SetId(v string) {
	o.Id = v
}

// GetMessage returns the Message field value
func (o *SLOBulkDeleteError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *SLOBulkDeleteError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *SLOBulkDeleteError) SetMessage(v string) {
	o.Message = v
}

// GetTimeframe returns the Timeframe field value
func (o *SLOBulkDeleteError) GetTimeframe() SLOErrorTimeframe {
	if o == nil {
		var ret SLOErrorTimeframe
		return ret
	}

	return o.Timeframe
}

// GetTimeframeOk returns a tuple with the Timeframe field value
// and a boolean to check if the value has been set.
func (o *SLOBulkDeleteError) GetTimeframeOk() (*SLOErrorTimeframe, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeframe, true
}

// SetTimeframe sets field value
func (o *SLOBulkDeleteError) SetTimeframe(v SLOErrorTimeframe) {
	o.Timeframe = v
}

func (o SLOBulkDeleteError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["timeframe"] = o.Timeframe
	}
	return json.Marshal(toSerialize)
}

type NullableSLOBulkDeleteError struct {
	value *SLOBulkDeleteError
	isSet bool
}

func (v NullableSLOBulkDeleteError) Get() *SLOBulkDeleteError {
	return v.value
}

func (v *NullableSLOBulkDeleteError) Set(val *SLOBulkDeleteError) {
	v.value = val
	v.isSet = true
}

func (v NullableSLOBulkDeleteError) IsSet() bool {
	return v.isSet
}

func (v *NullableSLOBulkDeleteError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSLOBulkDeleteError(val *SLOBulkDeleteError) *NullableSLOBulkDeleteError {
	return &NullableSLOBulkDeleteError{value: val, isSet: true}
}

func (v NullableSLOBulkDeleteError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSLOBulkDeleteError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
