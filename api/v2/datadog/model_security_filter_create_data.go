/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// SecurityFilterCreateData Object for a single security filter.
type SecurityFilterCreateData struct {
	Attributes SecurityFilterCreateAttributes `json:"attributes"`
	Type       SecurityFilterType             `json:"type"`
	// UnparsedObject contains the raw value of the object if there was an error when deserializing into the struct
	UnparsedObject map[string]interface{} `json:-`
}

// NewSecurityFilterCreateData instantiates a new SecurityFilterCreateData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityFilterCreateData(attributes SecurityFilterCreateAttributes, type_ SecurityFilterType) *SecurityFilterCreateData {
	this := SecurityFilterCreateData{}
	this.Attributes = attributes
	this.Type = type_
	return &this
}

// NewSecurityFilterCreateDataWithDefaults instantiates a new SecurityFilterCreateData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityFilterCreateDataWithDefaults() *SecurityFilterCreateData {
	this := SecurityFilterCreateData{}
	var type_ SecurityFilterType = SECURITYFILTERTYPE_SECURITY_FILTERS
	this.Type = type_
	return &this
}

// GetAttributes returns the Attributes field value
func (o *SecurityFilterCreateData) GetAttributes() SecurityFilterCreateAttributes {
	if o == nil {
		var ret SecurityFilterCreateAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *SecurityFilterCreateData) GetAttributesOk() (*SecurityFilterCreateAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *SecurityFilterCreateData) SetAttributes(v SecurityFilterCreateAttributes) {
	o.Attributes = v
}

// GetType returns the Type field value
func (o *SecurityFilterCreateData) GetType() SecurityFilterType {
	if o == nil {
		var ret SecurityFilterType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SecurityFilterCreateData) GetTypeOk() (*SecurityFilterType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SecurityFilterCreateData) SetType(v SecurityFilterType) {
	o.Type = v
}

func (o SecurityFilterCreateData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UnparsedObject != nil {
		return json.Marshal(o.UnparsedObject)
	}
	if true {
		toSerialize["attributes"] = o.Attributes
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

func (o *SecurityFilterCreateData) UnmarshalJSON(bytes []byte) (err error) {
	raw := map[string]interface{}{}
	required := struct {
		Attributes *SecurityFilterCreateAttributes `json:"attributes"`
		Type       *SecurityFilterType             `json:"type"`
	}{}
	all := struct {
		Attributes SecurityFilterCreateAttributes `json:"attributes"`
		Type       SecurityFilterType             `json:"type"`
	}{}
	err = json.Unmarshal(bytes, &required)
	if err != nil {
		return err
	}
	if required.Attributes == nil {
		return fmt.Errorf("Required field attributes missing")
	}
	if required.Type == nil {
		return fmt.Errorf("Required field type missing")
	}
	err = json.Unmarshal(bytes, &all)
	if err != nil {
		err = json.Unmarshal(bytes, &raw)
		if err != nil {
			return err
		}
		o.UnparsedObject = raw
		return nil
	}
	if v := all.Type; !v.IsValid() {
		err = json.Unmarshal(bytes, &raw)
		if err != nil {
			return err
		}
		o.UnparsedObject = raw
		return nil
	}
	o.Attributes = all.Attributes
	o.Type = all.Type
	return nil
}

type NullableSecurityFilterCreateData struct {
	value *SecurityFilterCreateData
	isSet bool
}

func (v NullableSecurityFilterCreateData) Get() *SecurityFilterCreateData {
	return v.value
}

func (v *NullableSecurityFilterCreateData) Set(val *SecurityFilterCreateData) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityFilterCreateData) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityFilterCreateData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityFilterCreateData(val *SecurityFilterCreateData) *NullableSecurityFilterCreateData {
	return &NullableSecurityFilterCreateData{value: val, isSet: true}
}

func (v NullableSecurityFilterCreateData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityFilterCreateData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
