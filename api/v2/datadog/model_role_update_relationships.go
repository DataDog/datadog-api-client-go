/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// RoleUpdateRelationships Relationships of role object to update.
type RoleUpdateRelationships struct {
	Permissions *RelationshipToPermissions `json:"permissions,omitempty"`
}

// NewRoleUpdateRelationships instantiates a new RoleUpdateRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleUpdateRelationships() *RoleUpdateRelationships {
	this := RoleUpdateRelationships{}
	return &this
}

// NewRoleUpdateRelationshipsWithDefaults instantiates a new RoleUpdateRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleUpdateRelationshipsWithDefaults() *RoleUpdateRelationships {
	this := RoleUpdateRelationships{}
	return &this
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *RoleUpdateRelationships) GetPermissions() RelationshipToPermissions {
	if o == nil || o.Permissions == nil {
		var ret RelationshipToPermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleUpdateRelationships) GetPermissionsOk() (*RelationshipToPermissions, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *RoleUpdateRelationships) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given RelationshipToPermissions and assigns it to the Permissions field.
func (o *RoleUpdateRelationships) SetPermissions(v RelationshipToPermissions) {
	o.Permissions = &v
}

func (o RoleUpdateRelationships) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableRoleUpdateRelationships struct {
	value *RoleUpdateRelationships
	isSet bool
}

func (v NullableRoleUpdateRelationships) Get() *RoleUpdateRelationships {
	return v.value
}

func (v *NullableRoleUpdateRelationships) Set(val *RoleUpdateRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleUpdateRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleUpdateRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleUpdateRelationships(val *RoleUpdateRelationships) *NullableRoleUpdateRelationships {
	return &NullableRoleUpdateRelationships{value: val, isSet: true}
}

func (v NullableRoleUpdateRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleUpdateRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
