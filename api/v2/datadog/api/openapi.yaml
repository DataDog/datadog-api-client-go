openapi: 3.0.0
info:
  contact:
    email: support@datadoghq.com
    name: Datadog Support
    url: https://www.datadoghq.com/support/
  description: Collection of all Datadog Public endpoints.
  title: Datadog API Collection
  version: "1.0"
servers:
- url: https://{subdomain}.{site}
  variables:
    site:
      default: datadoghq.com
      description: The regional site for our customers.
      enum:
      - datadoghq.com
      - datadoghq.eu
    subdomain:
      default: api
      description: The subdomain where the API is deployed.
- url: '{protocol}://{name}'
  variables:
    name:
      default: api.datadoghq.com
      description: Full site DNS name.
    protocol:
      default: https
      description: The protocol for accessing the API.
security:
- apiKeyAuth: []
  appKeyAuth: []
tags:
- description: |-
    [Interact with your dashboard lists](https://docs.datadoghq.com/monitors/downtimes)
    through the API to make it easier to organize, find, and share all of your dashboards
    with your team and organization.
  name: Dashboard Lists
- description: |-
    The Roles API is used to create and manage Datadog roles, what
    [global permissions](https://docs.datadoghq.com/account_management/rbac/)
    they grant, and which users belong to them.

    Permissions related to specific account assets can be granted to roles
    in the Datadog application without using this API. For example, granting
    read access on a specific log index to a role can be done in Datadog from the
    [Pipelines page](https://app.datadoghq.com/logs/pipelines).
  name: Roles
- description: Detection Rules for generating signals
  name: Security Monitoring
- description: Create, edit, and disable users.
  externalDocs:
    url: https://docs.datadoghq.com/account_management/users
  name: Users
paths:
  /api/v2/dashboard/lists/manual/{dashboard_list_id}/dashboards:
    delete:
      description: Delete dashboards from an existing dashboard list.
      operationId: DeleteDashboardListItems
      parameters:
      - description: ID of the dashboard list to delete items from.
        explode: false
        in: path
        name: dashboard_list_id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardListItems'
        description: Dashboards to delete from the dashboard list.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListDeleteItemsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Delete items from a dashboard list
      tags:
      - Dashboard Lists
      x-codegen-request-body-name: body
    get:
      description: Fetch the dashboard list’s dashboard definitions.
      operationId: GetDashboardListItems
      parameters:
      - description: ID of the dashboard list to get items from.
        explode: false
        in: path
        name: dashboard_list_id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListItems'
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get a Dashboard List
      tags:
      - Dashboard Lists
    post:
      description: Add dashboards to an existing dashboard list.
      operationId: CreateDashboardListItems
      parameters:
      - description: ID of the dashboard list to add items to.
        explode: false
        in: path
        name: dashboard_list_id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardListItems'
        description: Dashboards to add to the dashboard list.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListAddItemsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Add Items to a Dashboard List
      tags:
      - Dashboard Lists
      x-codegen-request-body-name: body
    put:
      description: Update dashboards of an existing dashboard list.
      operationId: UpdateDashboardListItems
      parameters:
      - description: ID of the dashboard list to update items from.
        explode: false
        in: path
        name: dashboard_list_id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardListItems'
        description: New dashboards of the dashboard list.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListItems'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update items of a dashboard list
      tags:
      - Dashboard Lists
      x-codegen-request-body-name: body
  /api/v2/permissions:
    get:
      description: Returns a list of all permissions, including name, description,
        and ID.
      operationId: ListPermissions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
          description: OK
        "400":
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: List permissions
      tags:
      - Roles
  /api/v2/roles:
    get:
      description: Returns all roles, including their names and IDs.
      operationId: ListRoles
      parameters:
      - description: Size for a given page.
        explode: true
        in: query
        name: page[size]
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: Specific page number to return.
        explode: true
        in: query
        name: page[number]
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: |-
          Sort roles depending on the given field. Sort order is **ascending** by default.
          Sort order is **descending** if the field is prefixed by a negative sign, for example:
          `sort=-name`.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          $ref: '#/components/schemas/RolesSort'
        style: form
      - description: Filter all roles by the given string.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesResponse'
          description: OK
        "403":
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: List roles
      tags:
      - Roles
    post:
      description: Create a new role for your organization.
      operationId: CreateRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreatePayload'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Create role
      tags:
      - Roles
      x-codegen-request-body-name: body
  /api/v2/roles/{role_id}:
    delete:
      description: Disables a role.
      operationId: DeleteRole
      parameters:
      - description: The ID of the role.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Delete role
      tags:
      - Roles
      x-codegen-request-body-name: body
    get:
      description: Get a role in the organization specified by the role’s `role_id`.
      operationId: GetRole
      parameters:
      - description: The ID of the role.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
          description: OK for get role
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a role
      tags:
      - Roles
      x-codegen-request-body-name: body
    patch:
      description: Edit a role. Can only be used with application keys belonging to
        administrators.
      operationId: UpdateRole
      parameters:
      - description: The ID of the role.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUpdatePayload'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Unprocessable Entity
      summary: Update a role
      tags:
      - Roles
      x-codegen-request-body-name: body
  /api/v2/roles/{role_id}/permissions:
    delete:
      description: Removes a permission from a role.
      operationId: RemovePermissionFromRole
      parameters:
      - description: The ID of the role.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipToPermission'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Revoke permission
      tags:
      - Roles
      x-codegen-request-body-name: body
    get:
      description: Returns a list of all permissions for a single role.
      operationId: ListRolePermissions
      parameters:
      - description: The ID of the role.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: List permissions for a role
      tags:
      - Roles
      x-codegen-request-body-name: body
    post:
      description: Adds a permission to a role.
      operationId: AddPermissionToRole
      parameters:
      - description: The ID of the role.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipToPermission'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Grant permission to a role
      tags:
      - Roles
      x-codegen-request-body-name: body
  /api/v2/roles/{role_id}/users:
    delete:
      description: Removes a user from a role.
      operationId: RemoveUserFromRole
      parameters:
      - description: The ID of the role.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipToUser'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Remove a user from a role
      tags:
      - Roles
      x-codegen-request-body-name: body
    get:
      description: Gets all users of a role.
      operationId: ListRoleUsers
      parameters:
      - description: The ID of the role.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      - description: Size for a given page.
        explode: true
        in: query
        name: page[size]
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: Specific page number to return.
        explode: true
        in: query
        name: page[number]
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: |-
          User attribute to order results by. Sort order is **ascending** by default.
          Sort order is **descending** if the field is prefixed by a negative sign,
          for example `sort=-name`. Options: `name`, `email`, `status`.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: name
          type: string
        style: form
      - description: Filter all users by the given string. Defaults to no filtering.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get all users of a role
      tags:
      - Roles
    post:
      description: Adds a user to a role.
      operationId: AddUserToRole
      parameters:
      - description: The ID of the role.
        explode: false
        in: path
        name: role_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipToUser'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Add a user to a role
      tags:
      - Roles
      x-codegen-request-body-name: body
  /api/v2/security_monitoring/rules:
    get:
      description: List rules.
      operationId: ListSecurityMonitoringRules
      parameters:
      - description: Size for a given page.
        explode: true
        in: query
        name: page[size]
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: Specific page number to return.
        explode: true
        in: query
        name: page[number]
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityMonitoringListRulesResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
      summary: List rules
      tags:
      - Security Monitoring
    post:
      description: Create a detection rule.
      operationId: CreateSecurityMonitoringRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityMonitoringRuleCreatePayload'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityMonitoringRuleResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Authorized
      summary: Create a detection rule
      tags:
      - Security Monitoring
      x-codegen-request-body-name: body
  /api/v2/security_monitoring/rules/{rule_id}:
    delete:
      description: Delete an existing rule. Default rules cannot be deleted.
      operationId: DeleteSecurityMonitoringRule
      parameters:
      - description: The ID of the rule.
        explode: false
        in: path
        name: rule_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Delete an existing rule
      tags:
      - Security Monitoring
    get:
      description: Get a rule's details.
      operationId: GetSecurityMonitoringRule
      parameters:
      - description: The ID of the rule.
        explode: false
        in: path
        name: rule_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityMonitoringRuleResponse'
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get a rule's details
      tags:
      - Security Monitoring
    put:
      description: |-
        Update an existing rule. When updating `cases`, `queries` or `options`, the whole field
        must be included. For example, when modifying a query all queries must be included.
        Default rules can only be updated to be enabled and to change notifications.
      operationId: UpdateSecurityMonitoringRule
      parameters:
      - description: The ID of the rule.
        explode: false
        in: path
        name: rule_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityMonitoringRuleUpdatePayload'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityMonitoringRuleResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Concurrent Modification
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update an existing rule
      tags:
      - Security Monitoring
      x-codegen-request-body-name: body
  /api/v2/user_invitations:
    post:
      description: Sends emails to one or more users inviting them to join the organization.
      operationId: SendInvitations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInvitationPayload'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitationsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Send invitation emails
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/user_invitations/{user_invitation_uuid}:
    get:
      description: Returns a single user invitation by its UUID.
      operationId: GetInvitation
      parameters:
      - description: The UUID of the user invitation.
        explode: false
        in: path
        name: user_invitation_uuid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitationResponse'
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a user invitation
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/users:
    get:
      description: Get the list of all users in the organization. This list includes
        all users even if they are disabled or unverified.
      operationId: ListUsers
      parameters:
      - description: Size for a given page.
        explode: true
        in: query
        name: page[size]
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: Specific page number to return.
        explode: true
        in: query
        name: page[number]
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: 'User attribute to order results by. Sort order is ascending
          by default. Sort order is descending if the field is prefixed by a negative
          sign, for example `sort=-name`. Options: `name`, `modified_at`, `user_count`.'
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: name
          type: string
        style: form
      - description: 'Direction of sort. Options: `asc`, `desc`.'
        explode: true
        in: query
        name: sort_dir
        required: false
        schema:
          $ref: '#/components/schemas/QuerySortOrder'
        style: form
      - description: Filter all users by the given string. Defaults to no filtering.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Filter on status attribute.
          Comma separated list, with possible values `Active`, `Pending`, and `Disabled`.
          Defaults to no filtering.
        explode: true
        in: query
        name: filter[status]
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
          description: OK
        "400":
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: List all users
      tags:
      - Users
      x-codegen-request-body-name: body
    post:
      description: Create a user for your organization.
      operationId: CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreatePayload'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Create a user
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/users/{user_id}:
    delete:
      description: Disable a user. Can only be used with an application key belonging
        to an administrator user.
      operationId: DisableUser
      parameters:
      - description: The ID of the user.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Disable a user
      tags:
      - Users
      x-codegen-request-body-name: body
    get:
      description: Get a user in the organization specified by the user’s `user_id`.
      operationId: GetUser
      parameters:
      - description: The ID of the user.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: OK for get user
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a user
      tags:
      - Users
      x-codegen-request-body-name: body
    patch:
      description: Edit a user. Can only be used with an application key belonging
        to an administrator user.
      operationId: UpdateUser
      parameters:
      - description: The ID of the user.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdatePayload'
      responses:
        "204":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Unprocessable Entity
      summary: Update a user
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/users/{user_id}/orgs:
    get:
      description: Get a user organization. Returns the user information and all organizations
        joined by this user.
      operationId: ListUserOrganizations
      parameters:
      - description: The ID of the user.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a user organization
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/users/{user_id}/permissions:
    get:
      description: Get a user permission set. Returns a list of the user’s permissions
        granted by the associated user's roles.
      operationId: ListUserPermissions
      parameters:
      - description: The ID of the user.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a user permissions
      tags:
      - Users
      x-codegen-request-body-name: body
components:
  callbacks: {}
  examples: {}
  headers: {}
  links: {}
  parameters:
    PageNumber:
      description: Specific page number to return.
      explode: true
      in: query
      name: page[number]
      required: false
      schema:
        default: 0
        format: int64
        type: integer
      style: form
    PageSize:
      description: Size for a given page.
      explode: true
      in: query
      name: page[size]
      required: false
      schema:
        default: 10
        format: int64
        type: integer
      style: form
    RoleID:
      description: The ID of the role.
      explode: false
      in: path
      name: role_id
      required: true
      schema:
        type: string
      style: simple
    SecurityMonitoringRuleID:
      description: The ID of the rule.
      explode: false
      in: path
      name: rule_id
      required: true
      schema:
        type: string
      style: simple
    UserID:
      description: The ID of the user.
      explode: false
      in: path
      name: user_id
      required: true
      schema:
        type: string
      style: simple
  requestBodies: {}
  responses:
    BadRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Bad Request
    ConcurrentModificationResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Concurrent Modification
    NotAuthorizedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Authorized
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Found
  schemas:
    APIErrorResponse:
      description: API error response.
      properties:
        errors:
          description: A list of errors.
          items:
            description: A list of items.
            example: Bad Request
            type: string
          type: array
      required:
      - errors
      type: object
    Creator:
      description: Creator of the object.
      example:
        name: name
        handle: handle
        email: email
      properties:
        email:
          description: Email of the creator.
          type: string
        handle:
          description: Handle of the creator.
          type: string
        name:
          description: Name of the creator.
          type: string
      type: object
    DashboardListAddItemsResponse:
      description: Response containing a list of added dashboards.
      example:
        added_dashboards_to_list:
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
      properties:
        added_dashboards_to_list:
          description: List of dashboards added to the dashboard list.
          items:
            $ref: '#/components/schemas/DashboardListItem'
          type: array
      type: object
    DashboardListDeleteItemsResponse:
      description: Response containing a list of deleted dashboards.
      example:
        deleted_dashboards_from_list:
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
      properties:
        deleted_dashboards_from_list:
          description: List of dashboards deleted from the dashboard list.
          items:
            $ref: '#/components/schemas/DashboardListItem'
          type: array
      type: object
    DashboardListItem:
      description: A dashboard within a list.
      example:
        is_favorite: true
        author:
          name: name
          handle: handle
          email: email
        created: 2000-01-23T04:56:07.000+00:00
        is_shared: true
        popularity: 0
        icon: icon
        modified: 2000-01-23T04:56:07.000+00:00
        is_read_only: true
        id: id
        title: title
        url: url
      properties:
        author:
          $ref: '#/components/schemas/Creator'
        created:
          description: Date of creation of the dashboard.
          format: date-time
          readOnly: true
          type: string
        icon:
          description: URL to the icon of the dashboard.
          readOnly: true
          type: string
        id:
          description: ID of the dashboard.
          type: string
        is_favorite:
          description: Whether or not the dashboard is in the favorites.
          readOnly: true
          type: boolean
        is_read_only:
          description: Whether or not the dashboard is read only.
          readOnly: true
          type: boolean
        is_shared:
          description: Whether the dashboard is publicly shared or not.
          readOnly: true
          type: boolean
        modified:
          description: Date of last edition of the dashboard.
          format: date-time
          readOnly: true
          type: string
        popularity:
          description: Popularity of the dashboard.
          format: int32
          maximum: 5
          readOnly: true
          type: integer
        title:
          description: Title of the dashboard.
          readOnly: true
          type: string
        type:
          $ref: '#/components/schemas/DashboardType'
        url:
          description: URL path to the dashboard.
          readOnly: true
          type: string
      required:
      - id
      - type
      type: object
    DashboardListItems:
      description: Dashboards within a list.
      example:
        total: 6
        dashboards:
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
      properties:
        dashboards:
          description: List of dashboards in the dashboard list.
          items:
            $ref: '#/components/schemas/DashboardListItem'
          type: array
        total:
          description: Number of dashboards in the dashboard list.
          format: int64
          readOnly: true
          type: integer
      required:
      - dashboards
      type: object
    DashboardType:
      description: The type of the dashboard.
      enum:
      - custom_timeboard
      - custom_screenboard
      - integration_screenboard
      - integration_timeboard
      - host_timeboard
      type: string
      x-enum-varnames:
      - CUSTOM_TIMEBOARD
      - CUSTOM_SCREENBOARD
      - INTEGRATION_SCREENBOARD
      - INTEGRATION_TIMEBOARD
      - HOST_TIMEBOARD
    Organization:
      description: Organization object.
      properties:
        attributes:
          $ref: '#/components/schemas/OrganizationAttributes'
        id:
          description: ID of the organization.
          type: string
        type:
          $ref: '#/components/schemas/OrganizationsType'
      required:
      - type
      type: object
    OrganizationAttributes:
      description: Attributes of the organization.
      properties:
        created_at:
          description: Creation time of the organization.
          format: date-time
          type: string
        description:
          description: Description of the organization.
          type: string
        disabled:
          description: Whether or not the organization is disabled.
          type: boolean
        modified_at:
          description: Time of last organization modification.
          format: date-time
          type: string
        name:
          description: Name of the organization.
          type: string
        public_id:
          description: Public ID of the organization.
          type: string
        sharing:
          description: Sharing type of the organization.
          type: string
        url:
          description: URL of the site that this organization exists at.
          type: string
      type: object
    OrganizationsType:
      default: orgs
      description: Organizations resource type.
      enum:
      - orgs
      example: orgs
      type: string
      x-enum-varnames:
      - ORGS
    Pagination:
      description: Pagination object.
      example:
        total_count: 0
        total_filtered_count: 6
      properties:
        total_count:
          description: Total count.
          format: int64
          type: integer
        total_filtered_count:
          description: Total count of elements matched by the filter.
          format: int64
          type: integer
      type: object
    Permission:
      description: Permission object.
      example:
        attributes:
          display_type: display_type
          group_name: group_name
          created: 2000-01-23T04:56:07.000+00:00
          restricted: true
          name: name
          description: description
          display_name: display_name
        id: id
        type: permissions
      properties:
        attributes:
          $ref: '#/components/schemas/PermissionAttributes'
        id:
          description: ID of the permission.
          type: string
        type:
          $ref: '#/components/schemas/PermissionsType'
      required:
      - type
      type: object
    PermissionAttributes:
      description: Attributes of a permission.
      example:
        display_type: display_type
        group_name: group_name
        created: 2000-01-23T04:56:07.000+00:00
        restricted: true
        name: name
        description: description
        display_name: display_name
      properties:
        created:
          description: Creation time of the permission.
          format: date-time
          type: string
        description:
          description: Description of the permission.
          type: string
        display_name:
          description: Displayed name for the permission.
          type: string
        display_type:
          description: Display type.
          type: string
        group_name:
          description: Name of the permission group.
          type: string
        name:
          description: Name of the permission.
          type: string
        restricted:
          description: Whether or not the permission is restricted.
          type: boolean
      type: object
    PermissionsResponse:
      description: Payload with API-returned permissions.
      example:
        data:
        - attributes:
            display_type: display_type
            group_name: group_name
            created: 2000-01-23T04:56:07.000+00:00
            restricted: true
            name: name
            description: description
            display_name: display_name
          id: id
          type: permissions
        - attributes:
            display_type: display_type
            group_name: group_name
            created: 2000-01-23T04:56:07.000+00:00
            restricted: true
            name: name
            description: description
            display_name: display_name
          id: id
          type: permissions
      properties:
        data:
          description: Array of permissions.
          items:
            $ref: '#/components/schemas/Permission'
          type: array
      type: object
    PermissionsType:
      default: permissions
      description: Permissions resource type.
      enum:
      - permissions
      example: permissions
      type: string
      x-enum-varnames:
      - PERMISSIONS
    QuerySortOrder:
      default: desc
      description: Direction of sort.
      enum:
      - asc
      - desc
      type: string
      x-enum-varnames:
      - ASC
      - DESC
    RelationshipToOrganization:
      description: Relationship to an organization.
      example:
        data:
          id: id
          type: orgs
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToOrganizationData'
      type: object
    RelationshipToOrganizationData:
      description: Relationship to organization object.
      example:
        id: id
        type: orgs
      properties:
        id:
          description: ID of the organization.
          type: string
        type:
          $ref: '#/components/schemas/OrganizationsType'
      type: object
    RelationshipToOrganizations:
      description: Relationship to organizations.
      example:
        data:
        - id: id
          type: orgs
        - id: id
          type: orgs
      properties:
        data:
          description: Relationships to organization objects.
          items:
            $ref: '#/components/schemas/RelationshipToOrganizationData'
          type: array
      type: object
    RelationshipToPermission:
      description: Relationship to a permissions object.
      example:
        data:
          id: id
          type: permissions
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToPermissionData'
      type: object
    RelationshipToPermissionData:
      description: Relationship to permission object.
      example:
        id: id
        type: permissions
      properties:
        id:
          description: ID of the permission.
          type: string
        type:
          $ref: '#/components/schemas/PermissionsType'
      type: object
    RelationshipToPermissions:
      description: Relationship to multiple permissions objects.
      example:
        data:
        - id: id
          type: permissions
        - id: id
          type: permissions
      properties:
        data:
          description: Relationships to permission objects.
          items:
            $ref: '#/components/schemas/RelationshipToPermissionData'
          type: array
      type: object
    RelationshipToRoleData:
      description: Relationship to role object.
      example:
        id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
        type: roles
      properties:
        id:
          description: ID of the role.
          example: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
          type: string
        type:
          $ref: '#/components/schemas/RolesType'
      type: object
    RelationshipToRoles:
      description: Relationship to roles.
      example:
        data:
        - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
          type: roles
        - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
          type: roles
      properties:
        data:
          description: An array containing type and ID of a role.
          items:
            $ref: '#/components/schemas/RelationshipToRoleData'
          type: array
      type: object
    RelationshipToUser:
      description: Relationship to user.
      example:
        data:
          id: id
          type: users
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToUserData'
      type: object
    RelationshipToUserData:
      description: Relationship to user object.
      example:
        id: id
        type: users
      properties:
        id:
          description: ID of the user.
          type: string
        type:
          default: users
          description: Users type.
          readOnly: true
          type: string
      type: object
    RelationshipToUsers:
      description: Relationship to users.
      example:
        data:
        - id: id
          type: users
        - id: id
          type: users
      properties:
        data:
          description: Relationships to user objects.
          items:
            $ref: '#/components/schemas/RelationshipToUserData'
          type: array
      type: object
    ResponseMetaAttributes:
      description: Object describing meta attributes of response.
      example:
        page:
          total_count: 0
          total_filtered_count: 6
      properties:
        page:
          $ref: '#/components/schemas/Pagination'
      type: object
    Role:
      description: Role object returned by the API.
      example:
        relationships:
          org:
            data:
              id: id
              type: orgs
          roles:
            data:
            - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
              type: roles
            - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
              type: roles
          other_orgs:
            data:
            - id: id
              type: orgs
            - id: id
              type: orgs
          other_roles:
            data:
            - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
              type: roles
            - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
              type: roles
        attributes:
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          modified_at: 2000-01-23T04:56:07.000+00:00
        id: id
        type: roles
      properties:
        attributes:
          $ref: '#/components/schemas/RoleAttributes'
        id:
          description: ID of the role.
          type: string
        relationships:
          $ref: '#/components/schemas/RoleResponseRelationships'
        type:
          $ref: '#/components/schemas/RolesType'
      required:
      - type
      type: object
    RoleAttributes:
      description: Attributes of the role.
      example:
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        modified_at: 2000-01-23T04:56:07.000+00:00
      properties:
        created_at:
          description: Creation time of the role.
          format: date-time
          readOnly: true
          type: string
        modified_at:
          description: Time of last role modification.
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the role.
          type: string
      type: object
    RoleCreateAttributes:
      description: Attributes of the created role.
      example:
        name: name
      properties:
        name:
          description: The name of the role.
          type: string
      type: object
    RoleCreateData:
      description: Data related to the creation of a role.
      example:
        relationships:
          permissions:
            data:
            - id: id
              type: permissions
            - id: id
              type: permissions
          users:
            data:
            - id: id
              type: users
            - id: id
              type: users
        attributes:
          name: name
        type: roles
      properties:
        attributes:
          $ref: '#/components/schemas/RoleCreateAttributes'
        relationships:
          $ref: '#/components/schemas/RoleRelationships'
        type:
          $ref: '#/components/schemas/RolesType'
      type: object
    RoleCreatePayload:
      description: Create a role.
      example:
        data:
          relationships:
            permissions:
              data:
              - id: id
                type: permissions
              - id: id
                type: permissions
            users:
              data:
              - id: id
                type: users
              - id: id
                type: users
          attributes:
            name: name
          type: roles
      properties:
        data:
          $ref: '#/components/schemas/RoleCreateData'
      type: object
    RoleRelationships:
      description: Relationships of the role object.
      example:
        permissions:
          data:
          - id: id
            type: permissions
          - id: id
            type: permissions
        users:
          data:
          - id: id
            type: users
          - id: id
            type: users
      properties:
        permissions:
          $ref: '#/components/schemas/RelationshipToPermissions'
        users:
          $ref: '#/components/schemas/RelationshipToUsers'
      type: object
    RoleResponse:
      description: Response containing information about a single role.
      example:
        data:
          relationships:
            org:
              data:
                id: id
                type: orgs
            roles:
              data:
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
            other_orgs:
              data:
              - id: id
                type: orgs
              - id: id
                type: orgs
            other_roles:
              data:
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
          attributes:
            name: name
            created_at: 2000-01-23T04:56:07.000+00:00
            modified_at: 2000-01-23T04:56:07.000+00:00
          id: id
          type: roles
      properties:
        data:
          $ref: '#/components/schemas/Role'
      type: object
    RoleResponseRelationships:
      description: Relationships of the role object returned by the API.
      example:
        org:
          data:
            id: id
            type: orgs
        roles:
          data:
          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
            type: roles
          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
            type: roles
        other_orgs:
          data:
          - id: id
            type: orgs
          - id: id
            type: orgs
        other_roles:
          data:
          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
            type: roles
          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
            type: roles
      properties:
        org:
          $ref: '#/components/schemas/RelationshipToOrganization'
        other_orgs:
          $ref: '#/components/schemas/RelationshipToOrganizations'
        other_roles:
          $ref: '#/components/schemas/RelationshipToRoles'
        roles:
          $ref: '#/components/schemas/RelationshipToRoles'
      type: object
    RoleUpdateAttributes:
      description: Attributes of the edited role.
      example:
        name: name
      properties:
        name:
          description: The name of the role.
          type: string
      type: object
    RoleUpdateData:
      description: Data related to the update of a role.
      example:
        attributes:
          name: name
        id: id
        type: roles
      properties:
        attributes:
          $ref: '#/components/schemas/RoleUpdateAttributes'
        id:
          description: ID of the role.
          type: string
        type:
          $ref: '#/components/schemas/RolesType'
      type: object
    RoleUpdatePayload:
      description: Update a role.
      example:
        data:
          attributes:
            name: name
          id: id
          type: roles
      properties:
        data:
          $ref: '#/components/schemas/RoleUpdateData'
      type: object
    RolesResponse:
      description: Response containing information about multiple roles.
      example:
        data:
        - relationships:
            org:
              data:
                id: id
                type: orgs
            roles:
              data:
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
            other_orgs:
              data:
              - id: id
                type: orgs
              - id: id
                type: orgs
            other_roles:
              data:
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
          attributes:
            name: name
            created_at: 2000-01-23T04:56:07.000+00:00
            modified_at: 2000-01-23T04:56:07.000+00:00
          id: id
          type: roles
        - relationships:
            org:
              data:
                id: id
                type: orgs
            roles:
              data:
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
            other_orgs:
              data:
              - id: id
                type: orgs
              - id: id
                type: orgs
            other_roles:
              data:
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
          attributes:
            name: name
            created_at: 2000-01-23T04:56:07.000+00:00
            modified_at: 2000-01-23T04:56:07.000+00:00
          id: id
          type: roles
        meta:
          page:
            total_count: 0
            total_filtered_count: 6
      properties:
        data:
          description: Array of returned roles.
          items:
            $ref: '#/components/schemas/Role'
          type: array
        meta:
          $ref: '#/components/schemas/ResponseMetaAttributes'
      type: object
    RolesSort:
      default: name
      description: Sorting options for roles.
      enum:
      - name
      - -name
      - modified_at
      - -modified_at
      - user_count
      - -user_count
      type: string
      x-enum-varnames:
      - NAME_ASCENDING
      - NAME_DESCENDING
      - MODIFIED_AT_ASCENDING
      - MODIFIED_AT_DESCENDING
      - USER_COUNT_ASCENDING
      - USER_COUNT_DESCENDING
    RolesType:
      default: roles
      description: Roles type.
      enum:
      - roles
      example: roles
      type: string
      x-enum-varnames:
      - ROLES
    SecurityMonitoringListRulesResponse:
      description: List of rules
      example:
        data:
        - cases:
          - condition: condition
            name: name
            notifications:
            - notifications
            - notifications
          - condition: condition
            name: name
            notifications:
            - notifications
            - notifications
          message: message
          queries:
          - groupByFields:
            - groupByFields
            - groupByFields
            query: query
            name: name
          - groupByFields:
            - groupByFields
            - groupByFields
            query: query
            name: name
          version: 1
          tags:
          - tags
          - tags
          creationAuthorId: 6
          createdAt: 0
          isDefault: true
          isDeleted: true
          isEnabled: true
          name: name
          options: {}
          id: id
        - cases:
          - condition: condition
            name: name
            notifications:
            - notifications
            - notifications
          - condition: condition
            name: name
            notifications:
            - notifications
            - notifications
          message: message
          queries:
          - groupByFields:
            - groupByFields
            - groupByFields
            query: query
            name: name
          - groupByFields:
            - groupByFields
            - groupByFields
            query: query
            name: name
          version: 1
          tags:
          - tags
          - tags
          creationAuthorId: 6
          createdAt: 0
          isDefault: true
          isDeleted: true
          isEnabled: true
          name: name
          options: {}
          id: id
        meta:
          page:
            total_count: 0
            total_filtered_count: 6
      properties:
        data:
          description: TODO.
          items:
            $ref: '#/components/schemas/SecurityMonitoringRuleResponse'
          type: array
        meta:
          $ref: '#/components/schemas/ResponseMetaAttributes'
      type: object
    SecurityMonitoringRuleCase:
      description: Case when signal is generated.
      example:
        condition: condition
        name: name
        notifications:
        - notifications
        - notifications
      properties:
        condition:
          description: |-
            A rule case contains logical operations (>, >=, &&, ||) to determine if a signal should be generated
            based on the event counts in the previously defined queries.
          type: string
        name:
          description: Name of the case.
          type: string
        notifications:
          description: Notification targets for each rule case
          items:
            description: Notification
            type: string
          type: array
        status:
          $ref: '#/components/schemas/SecurityMonitoringRuleSeverity'
      type: object
    SecurityMonitoringRuleCreatePayload:
      description: Create a new rule.
      example:
        cases:
        - condition: condition
          name: name
          notifications:
          - notifications
          - notifications
        - condition: condition
          name: name
          notifications:
          - notifications
          - notifications
        name: name
        options: {}
        message: message
        queries:
        - groupByFields:
          - groupByFields
          - groupByFields
          query: query
          name: name
        - groupByFields:
          - groupByFields
          - groupByFields
          query: query
          name: name
        enabled: true
        tags:
        - env:prod
        - team:security
      properties:
        cases:
          description: Cases for generating signals.
          items:
            $ref: '#/components/schemas/SecurityMonitoringRuleCase'
          type: array
        enabled:
          description: Whether the rule is enabled.
          example: true
          type: boolean
        message:
          description: Message for generated signals.
          type: string
        name:
          description: The name of the rule
          type: string
        options:
          $ref: '#/components/schemas/SecurityMonitoringRuleOptions'
        queries:
          description: Queries for selecting logs which are part of the rule.
          items:
            $ref: '#/components/schemas/SecurityMonitoringRuleQuery'
          type: array
        tags:
          description: Tags for generated signals.
          example:
          - env:prod
          - team:security
          items:
            description: Tag
            type: string
          type: array
      required:
      - cases
      - enabled
      - message
      - name
      - options
      - queries
      - tags
      type: object
    SecurityMonitoringRuleEvaluationWindow:
      description: |-
        A time window is specified to match when at least one of the cases matches true. This is a sliding window
        and evaluates in real time.
      enum:
      - 0
      - 60
      - 300
      - 600
      - 900
      - 1800
      - 3600
      - 7200
      format: int32
      type: integer
      x-enum-varnames:
      - ZERO_MINUTES
      - ONE_MINUTE
      - FIVE_MINUTES
      - TEN_MINUTES
      - FIFTEEN_MINUTES
      - THIRTY_MINUTES
      - ONE_HOUR
      - TWO_HOURS
    SecurityMonitoringRuleKeepAlive:
      description: |-
        Once a signal is generated, the signal will remain “open” if a case is matched at least once within
        this keep alive window.
      enum:
      - 0
      - 60
      - 300
      - 600
      - 900
      - 1800
      - 3600
      - 7200
      format: int32
      type: integer
      x-enum-varnames:
      - ZERO_MINUTES
      - ONE_MINUTE
      - FIVE_MINUTES
      - TEN_MINUTES
      - FIFTEEN_MINUTES
      - THIRTY_MINUTES
      - ONE_HOUR
      - TWO_HOURS
    SecurityMonitoringRuleMaxSignalDuration:
      description: |-
        A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.
        This time is calculated from the first seen timestamp.
      enum:
      - 0
      - 60
      - 300
      - 600
      - 900
      - 1800
      - 3600
      - 7200
      - 10800
      - 21600
      - 43200
      - 86400
      format: int32
      type: integer
      x-enum-varnames:
      - ZERO_MINUTES
      - ONE_MINUTE
      - FIVE_MINUTES
      - TEN_MINUTES
      - FIFTEEN_MINUTES
      - THIRTY_MINUTES
      - ONE_HOUR
      - TWO_HOURS
      - THREE_HOURS
      - SIX_HOURS
      - TWELVE_HOURS
      - ONE_DAY
    SecurityMonitoringRuleOptions:
      description: Options on rules.
      example: {}
      properties:
        evaluationWindow:
          $ref: '#/components/schemas/SecurityMonitoringRuleEvaluationWindow'
        keepAlive:
          $ref: '#/components/schemas/SecurityMonitoringRuleKeepAlive'
        maxSignalDuration:
          $ref: '#/components/schemas/SecurityMonitoringRuleMaxSignalDuration'
      type: object
    SecurityMonitoringRuleQuery:
      description: Query for matching rule.
      example:
        groupByFields:
        - groupByFields
        - groupByFields
        query: query
        name: name
      properties:
        groupByFields:
          description: Fields to group by.
          items:
            description: Field
            type: string
          type: array
        name:
          description: Name of the query
          type: string
        query:
          description: Query to run on logs
          type: string
      type: object
    SecurityMonitoringRuleResponse:
      description: Detection rule
      example:
        cases:
        - condition: condition
          name: name
          notifications:
          - notifications
          - notifications
        - condition: condition
          name: name
          notifications:
          - notifications
          - notifications
        message: message
        queries:
        - groupByFields:
          - groupByFields
          - groupByFields
          query: query
          name: name
        - groupByFields:
          - groupByFields
          - groupByFields
          query: query
          name: name
        version: 1
        tags:
        - tags
        - tags
        creationAuthorId: 6
        createdAt: 0
        isDefault: true
        isDeleted: true
        isEnabled: true
        name: name
        options: {}
        id: id
      properties:
        cases:
          description: Cases for generating signals.
          items:
            $ref: '#/components/schemas/SecurityMonitoringRuleCase'
          type: array
        createdAt:
          description: When the rule was created, timestamp in milliseconds.
          format: int64
          type: integer
        creationAuthorId:
          description: User ID of the user who created the rule.
          format: int64
          type: integer
        id:
          description: The ID of the rule.
          type: string
        isDefault:
          description: Whether the rule is included by default.
          type: boolean
        isDeleted:
          description: Whether the rule has been deleted.
          type: boolean
        isEnabled:
          description: Whether the rule is enabled.
          type: boolean
        message:
          description: Message for generated signals.
          type: string
        name:
          description: The name of the rule.
          type: string
        options:
          $ref: '#/components/schemas/SecurityMonitoringRuleOptions'
        queries:
          description: Queries for selecting logs which are part of the rule.
          items:
            $ref: '#/components/schemas/SecurityMonitoringRuleQuery'
          type: array
        tags:
          description: Tags for generated signals.
          items:
            description: Tag
            type: string
          type: array
        version:
          description: The version of the rule.
          format: int64
          type: integer
    SecurityMonitoringRuleSeverity:
      description: Severity of the Security Signal.
      enum:
      - info
      - low
      - medium
      - high
      - critical
      type: string
      x-enum-varnames:
      - INFO
      - LOW
      - MEDIUM
      - HIGH
      - CRITICAL
    SecurityMonitoringRuleUpdatePayload:
      description: Update an existing rule.
      example:
        cases:
        - condition: condition
          name: name
          notifications:
          - notifications
          - notifications
        - condition: condition
          name: name
          notifications:
          - notifications
          - notifications
        name: name
        options: {}
        message: message
        queries:
        - groupByFields:
          - groupByFields
          - groupByFields
          query: query
          name: name
        - groupByFields:
          - groupByFields
          - groupByFields
          query: query
          name: name
        enabled: true
        tags:
        - tags
        - tags
      properties:
        cases:
          description: Cases for generating signals.
          items:
            $ref: '#/components/schemas/SecurityMonitoringRuleCase'
          type: array
        enabled:
          description: Whether the rule is enabled.
          type: boolean
        message:
          description: Message for generated signals.
          type: string
        name:
          description: Name of the rule.
          type: string
        options:
          $ref: '#/components/schemas/SecurityMonitoringRuleOptions'
        queries:
          description: Queries for selecting logs which are part of the rule.
          items:
            $ref: '#/components/schemas/SecurityMonitoringRuleQuery'
          type: array
        tags:
          description: Tags for generated signals.
          items:
            description: Tag
            type: string
          type: array
      type: object
    User:
      description: User object returned by the API.
      example:
        relationships:
          other_users:
            data:
            - id: id
              type: users
            - id: id
              type: users
          org:
            data:
              id: id
              type: orgs
          roles:
            data:
            - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
              type: roles
            - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
              type: roles
          other_orgs:
            data:
            - id: id
              type: orgs
            - id: id
              type: orgs
        attributes:
          icon: icon
          name: name
          verified: true
          created_at: 2000-01-23T04:56:07.000+00:00
          disabled: true
          handle: handle
          title: title
          email: email
          status: status
        id: id
      properties:
        attributes:
          $ref: '#/components/schemas/UserAttributes'
        id:
          description: ID of the user.
          type: string
        relationships:
          $ref: '#/components/schemas/UserResponseRelationships'
        type:
          $ref: '#/components/schemas/UsersType'
      type: object
    UserAttributes:
      description: Attributes of user object returned by the API.
      example:
        icon: icon
        name: name
        verified: true
        created_at: 2000-01-23T04:56:07.000+00:00
        disabled: true
        handle: handle
        title: title
        email: email
        status: status
      properties:
        created_at:
          description: Creation time of the user.
          format: date-time
          type: string
        disabled:
          description: Whether the user is disabled.
          type: boolean
        email:
          description: Email of the user.
          type: string
        handle:
          description: Handle of the user.
          type: string
        icon:
          description: URL of the user's icon.
          type: string
        name:
          description: Name of the user.
          type: string
        status:
          description: Status of the user.
          type: string
        title:
          description: Title of the user.
          type: string
        verified:
          description: Whether the user is verified.
          type: boolean
      type: object
    UserCreateAttributes:
      description: Attributes of the created user.
      example:
        name: name
        title: title
        email: email
      properties:
        email:
          description: The email of the user.
          type: string
        name:
          description: The name of the user.
          type: string
        title:
          description: The title of the user.
          type: string
      type: object
    UserCreateData:
      description: Object to create a user.
      example:
        relationships:
          roles:
            data:
            - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
              type: roles
            - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
              type: roles
        attributes:
          name: name
          title: title
          email: email
      properties:
        attributes:
          $ref: '#/components/schemas/UserCreateAttributes'
        relationships:
          $ref: '#/components/schemas/UserRelationships'
        type:
          $ref: '#/components/schemas/UsersType'
      type: object
    UserCreatePayload:
      description: Create a user.
      example:
        data:
          relationships:
            roles:
              data:
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
          attributes:
            name: name
            title: title
            email: email
      properties:
        data:
          $ref: '#/components/schemas/UserCreateData'
      type: object
    UserInvitationData:
      description: Object to create a user invitation.
      example:
        relationships:
          user:
            data:
              id: id
              type: users
      properties:
        relationships:
          $ref: '#/components/schemas/UserInvitationRelationships'
        type:
          $ref: '#/components/schemas/UserInvitationsType'
      type: object
    UserInvitationDataAttributes:
      description: Attributes of a user invitation.
      example:
        invite_type: invite_type
        expires_at: 2000-01-23T04:56:07.000+00:00
        created_at: 2000-01-23T04:56:07.000+00:00
        uuid: uuid
      properties:
        created_at:
          description: Creation time of the user invitation.
          format: date-time
          type: string
        expires_at:
          description: Time of invitation expiration.
          format: date-time
          type: string
        invite_type:
          description: Type of invitation.
          type: string
        uuid:
          description: UUID of the user invitation.
          type: string
      type: object
    UserInvitationPayload:
      description: Object to invite users to join the organization.
      example:
        data:
        - relationships:
            user:
              data:
                id: id
                type: users
        - relationships:
            user:
              data:
                id: id
                type: users
      properties:
        data:
          description: List of user invitations.
          items:
            $ref: '#/components/schemas/UserInvitationData'
          type: array
      type: object
    UserInvitationRelationships:
      description: Relationships data for user invitation.
      example:
        user:
          data:
            id: id
            type: users
      properties:
        user:
          $ref: '#/components/schemas/RelationshipToUser'
      type: object
    UserInvitationResponse:
      description: User invitation as returned by the API.
      example:
        data:
          attributes:
            invite_type: invite_type
            expires_at: 2000-01-23T04:56:07.000+00:00
            created_at: 2000-01-23T04:56:07.000+00:00
            uuid: uuid
          id: id
      properties:
        data:
          $ref: '#/components/schemas/UserInvitationResponseData'
      type: object
    UserInvitationResponseData:
      description: Object of a user invitation returned by the API.
      example:
        attributes:
          invite_type: invite_type
          expires_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          uuid: uuid
        id: id
      properties:
        attributes:
          $ref: '#/components/schemas/UserInvitationDataAttributes'
        id:
          description: ID of the user invitation.
          type: string
        type:
          $ref: '#/components/schemas/UserInvitationsType'
      type: object
    UserInvitationsResponse:
      description: User invitations as returned by the API.
      example:
        data:
        - attributes:
            invite_type: invite_type
            expires_at: 2000-01-23T04:56:07.000+00:00
            created_at: 2000-01-23T04:56:07.000+00:00
            uuid: uuid
          id: id
        - attributes:
            invite_type: invite_type
            expires_at: 2000-01-23T04:56:07.000+00:00
            created_at: 2000-01-23T04:56:07.000+00:00
            uuid: uuid
          id: id
      properties:
        data:
          description: Array of user invitations.
          items:
            $ref: '#/components/schemas/UserInvitationResponseData'
          type: array
      type: object
    UserInvitationsType:
      default: user_invitations
      description: User invitations type.
      enum:
      - user_invitations
      type: string
      x-enum-varnames:
      - USER_INVITATIONS
    UserRelationships:
      description: Relationships of the user object.
      example:
        roles:
          data:
          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
            type: roles
          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
            type: roles
      properties:
        roles:
          $ref: '#/components/schemas/RelationshipToRoles'
      type: object
    UserResponse:
      description: Response containing information about a single user.
      example:
        data:
          relationships:
            other_users:
              data:
              - id: id
                type: users
              - id: id
                type: users
            org:
              data:
                id: id
                type: orgs
            roles:
              data:
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
            other_orgs:
              data:
              - id: id
                type: orgs
              - id: id
                type: orgs
          attributes:
            icon: icon
            name: name
            verified: true
            created_at: 2000-01-23T04:56:07.000+00:00
            disabled: true
            handle: handle
            title: title
            email: email
            status: status
          id: id
        included:
        - null
        - null
      properties:
        data:
          $ref: '#/components/schemas/User'
        included:
          description: Array of objects related to the user.
          items:
            $ref: '#/components/schemas/UserResponseIncludedItem'
          type: array
      type: object
    UserResponseIncludedItem:
      description: An object related to a user.
      oneOf:
      - $ref: '#/components/schemas/Organization'
      - $ref: '#/components/schemas/Permission'
      - $ref: '#/components/schemas/Role'
      type: object
    UserResponseRelationships:
      description: Relationships of the user object returned by the API.
      example:
        other_users:
          data:
          - id: id
            type: users
          - id: id
            type: users
        org:
          data:
            id: id
            type: orgs
        roles:
          data:
          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
            type: roles
          - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
            type: roles
        other_orgs:
          data:
          - id: id
            type: orgs
          - id: id
            type: orgs
      properties:
        org:
          $ref: '#/components/schemas/RelationshipToOrganization'
        other_orgs:
          $ref: '#/components/schemas/RelationshipToOrganizations'
        other_users:
          $ref: '#/components/schemas/RelationshipToUsers'
        roles:
          $ref: '#/components/schemas/RelationshipToRoles'
      type: object
    UserUpdateAttributes:
      description: Attributes of the edited user.
      example:
        name: name
        disabled: true
        email: email
      properties:
        disabled:
          description: If the user is enabled or disabled.
          type: boolean
        email:
          description: The email of the user.
          type: string
        name:
          description: The name of the user.
          type: string
      type: object
    UserUpdateData:
      description: Object to update a user.
      example:
        attributes:
          name: name
          disabled: true
          email: email
        id: id
      properties:
        attributes:
          $ref: '#/components/schemas/UserUpdateAttributes'
        id:
          description: ID of the user.
          type: string
        type:
          $ref: '#/components/schemas/UsersType'
      type: object
    UserUpdatePayload:
      description: Update a user.
      example:
        data:
          attributes:
            name: name
            disabled: true
            email: email
          id: id
      properties:
        data:
          $ref: '#/components/schemas/UserUpdateData'
      type: object
    UsersResponse:
      description: Response containing information about multiple users.
      example:
        data:
        - relationships:
            other_users:
              data:
              - id: id
                type: users
              - id: id
                type: users
            org:
              data:
                id: id
                type: orgs
            roles:
              data:
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
            other_orgs:
              data:
              - id: id
                type: orgs
              - id: id
                type: orgs
          attributes:
            icon: icon
            name: name
            verified: true
            created_at: 2000-01-23T04:56:07.000+00:00
            disabled: true
            handle: handle
            title: title
            email: email
            status: status
          id: id
        - relationships:
            other_users:
              data:
              - id: id
                type: users
              - id: id
                type: users
            org:
              data:
                id: id
                type: orgs
            roles:
              data:
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
              - id: 3653d3c6-0c75-11ea-ad28-fb5701eabc7d
                type: roles
            other_orgs:
              data:
              - id: id
                type: orgs
              - id: id
                type: orgs
          attributes:
            icon: icon
            name: name
            verified: true
            created_at: 2000-01-23T04:56:07.000+00:00
            disabled: true
            handle: handle
            title: title
            email: email
            status: status
          id: id
        meta:
          page:
            total_count: 0
            total_filtered_count: 6
        included:
        - null
        - null
      properties:
        data:
          description: Array of returned users.
          items:
            $ref: '#/components/schemas/User'
          type: array
        included:
          description: Array of objects related to the users.
          items:
            $ref: '#/components/schemas/UserResponseIncludedItem'
          type: array
        meta:
          $ref: '#/components/schemas/ResponseMetaAttributes'
      type: object
    UsersType:
      default: users
      description: Users resource type.
      enum:
      - users
      type: string
      x-enum-varnames:
      - USERS
  securitySchemes:
    apiKeyAuth:
      description: Your Datadog API Key.
      in: header
      name: DD-API-KEY
      type: apiKey
      x-env-name: DD_CLIENT_API_KEY
    appKeyAuth:
      description: Your Datadog APP Key.
      in: header
      name: DD-APPLICATION-KEY
      type: apiKey
      x-env-name: DD_CLIENT_APP_KEY
x-group-parameters: true
