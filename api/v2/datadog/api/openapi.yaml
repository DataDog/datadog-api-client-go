openapi: 3.0.0
info:
  contact:
    email: support@datadoghq.com
    name: Datadog Support
    url: https://www.datadoghq.com/support/
  description: Collection of all Datadog Public endpoints.
  title: Datadog API Collection
  version: "1.0"
servers:
- url: https://{subdomain}.{site}
  variables:
    site:
      default: datadoghq.com
      description: The regional site for our customers.
      enum:
      - datadoghq.com
      - datadoghq.eu
    subdomain:
      default: api
      description: The subdomain where the API is deployed.
- url: '{protocol}://{name}'
  variables:
    name:
      default: api.datadoghq.com
      description: Full site DNS name.
    protocol:
      default: https
      description: The protocol for accessing the API.
security:
- apiKeyAuth: []
  appKeyAuth: []
tags:
- description: |-
    [Interact with your dashboard lists](https://docs.datadoghq.com/monitors/downtimes)
    through the API to make it easier to organize, find, and share all of your dashboards
    with your team and organization.
  name: Dashboard Lists
- description: Create, edit, and disable users.
  externalDocs:
    url: https://docs.datadoghq.com/account_management/users
  name: Users
paths:
  /api/v2/dashboard/lists/manual/{dashboard_list_id}/dashboards:
    delete:
      description: Delete dashboards from an existing dashboard list.
      operationId: DeleteDashboardListItems
      parameters:
      - description: ID of the dashboard list to delete items from.
        explode: false
        in: path
        name: dashboard_list_id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardListItems'
        description: Dashboards to delete from the dashboard list.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListDeleteItemsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Delete items from a dashboard list
      tags:
      - Dashboard Lists
      x-codegen-request-body-name: body
    get:
      description: Fetch the dashboard listâ€™s dashboard definitions.
      operationId: GetDashboardListItems
      parameters:
      - description: ID of the dashboard list to get items from.
        explode: false
        in: path
        name: dashboard_list_id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListItems'
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get a Dashboard List
      tags:
      - Dashboard Lists
    post:
      description: Add dashboards to an existing dashboard list.
      operationId: AddDashboardListItems
      parameters:
      - description: ID of the dashboard list to add items to.
        explode: false
        in: path
        name: dashboard_list_id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardListItems'
        description: Dashboards to add to the dashboard list.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListAddItemsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Add Items to a Dashboard List
      tags:
      - Dashboard Lists
      x-codegen-request-body-name: body
    put:
      description: Update dashboards of an existing dashboard list.
      operationId: UpdateDashboardListItems
      parameters:
      - description: ID of the dashboard list to update items from.
        explode: false
        in: path
        name: dashboard_list_id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardListItems'
        description: New dashboards of the dashboard list.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListItems'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update items of a dashboard list
      tags:
      - Dashboard Lists
      x-codegen-request-body-name: body
  /api/v2/user_invitations:
    post:
      description: Sends emails to one or more users inviting them to join the organization.
      operationId: SendInvitations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInvitationPayload'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitationsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Send invitation emails
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/user_invitations/{user_invitation_uuid}:
    get:
      description: Returns a single user invitation by its UUID.
      operationId: GetInvitation
      parameters:
      - description: The UUID of the user invitation.
        explode: false
        in: path
        name: user_invitation_uuid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitationResponse'
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a user invitation
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/users:
    get:
      description: Get the list of all users in the organization. This list includes
        all users even if they are disabled or unverified.
      operationId: ListUsers
      parameters:
      - description: Number of users to return for a given page.
        explode: true
        in: query
        name: page[size]
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: Specific page number to return.
        explode: true
        in: query
        name: page[number]
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: 'User attribute to order results by. Sort order is ascending
          by default. Sort order is descending if the field is prefixed by a negative
          sign, for example `sort=-name`. Options: `name`, `modified_at`, `user_count`.'
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: name
          type: string
        style: form
      - description: 'Direction of sort. Options: `asc`, `desc`.'
        explode: true
        in: query
        name: sort_dir
        required: false
        schema:
          $ref: '#/components/schemas/QuerySortOrder'
        style: form
      - description: Filter all users by the given string. Defaults to no filtering.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: 'Filter on status attribute. Comma separated list: Active, Pending,
          and Disabled. Defaults to no filtering.'
        explode: true
        in: query
        name: filter[status]
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponsePayload'
          description: OK
        "400":
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: List all users
      tags:
      - Users
      x-codegen-request-body-name: body
    post:
      description: Create a user for your organization.
      operationId: CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreatePayload'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponsePayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Create user
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/users/{user_id}:
    delete:
      description: Disable user. Can only be used with an application key belonging
        to an administrator user.
      operationId: DisableUser
      parameters:
      - description: The ID of the user.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Disable user
      tags:
      - Users
      x-codegen-request-body-name: body
    get:
      description: Get a user in the organization specified by the userâ€™s `user_id`.
      operationId: GetUser
      parameters:
      - description: The ID of the user.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponsePayload'
          description: OK for get user
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a user
      tags:
      - Users
      x-codegen-request-body-name: body
    patch:
      description: Edit a user. Can only be used with an application key belonging
        to an administrator user.
      operationId: UpdateUser
      parameters:
      - description: The ID of the user.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdatePayload'
      responses:
        "204":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Update a user
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/users/{user_id}/orgs:
    get:
      description: Get a user organization. Returns the user information and all organizations
        joined by this user.
      operationId: GetUserOrganization
      parameters:
      - description: The ID of the user.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponsePayload'
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a user organization
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/users/{user_id}/permissions:
    get:
      description: Get a user permission set. Returns a list of the userâ€™s permissions
        granted by the associated user's roles.
      operationId: GetUserPermissions
      parameters:
      - description: The ID of the user.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permissions'
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a user permissions
      tags:
      - Users
      x-codegen-request-body-name: body
components:
  callbacks: {}
  examples: {}
  headers: {}
  links: {}
  parameters:
    PageNumber:
      description: Specific page number to return.
      explode: true
      in: query
      name: page[number]
      required: false
      schema:
        default: 0
        format: int64
        type: integer
      style: form
    PageSize:
      description: Number of users to return for a given page.
      explode: true
      in: query
      name: page[size]
      required: false
      schema:
        default: 10
        format: int64
        type: integer
      style: form
    UserID:
      description: The ID of the user.
      explode: false
      in: path
      name: user_id
      required: true
      schema:
        type: string
      style: simple
  requestBodies: {}
  responses: {}
  schemas:
    APIErrorResponse:
      description: TODO.
      properties:
        errors:
          description: TODO.
          items:
            description: TODO.
            example: Bad Request
            type: string
          type: array
      required:
      - errors
      type: object
    Creator:
      description: Creator of the object
      example:
        name: name
        handle: handle
        email: email
      properties:
        email:
          description: TODO.
          type: string
        handle:
          description: TODO.
          type: string
        name:
          description: TODO.
          type: string
      type: object
    DashboardListAddItemsResponse:
      description: TODO.
      example:
        added_dashboards_to_list:
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
      properties:
        added_dashboards_to_list:
          description: List of dashboards added to the dashboard list.
          items:
            $ref: '#/components/schemas/DashboardListItem'
          type: array
      type: object
    DashboardListDeleteItemsResponse:
      description: TODO.
      example:
        deleted_dashboards_from_list:
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
      properties:
        deleted_dashboards_from_list:
          description: List of dashboards deleted from the dashboard list.
          items:
            $ref: '#/components/schemas/DashboardListItem'
          type: array
      type: object
    DashboardListItem:
      description: TODO.
      example:
        is_favorite: true
        author:
          name: name
          handle: handle
          email: email
        created: 2000-01-23T04:56:07.000+00:00
        is_shared: true
        popularity: 0
        icon: icon
        modified: 2000-01-23T04:56:07.000+00:00
        is_read_only: true
        id: id
        title: title
        url: url
      properties:
        author:
          $ref: '#/components/schemas/Creator'
        created:
          description: Date of creation of the dashboard.
          format: date-time
          readOnly: true
          type: string
        icon:
          description: URL to the icon of the dashboard.
          readOnly: true
          type: string
        id:
          description: ID of the dashboard.
          type: string
        is_favorite:
          description: Whether or not the dashboard is in the favorites.
          readOnly: true
          type: boolean
        is_read_only:
          description: Whether or not the dashboard is read only.
          readOnly: true
          type: boolean
        is_shared:
          description: Whether the dashboard is publicly shared or not.
          readOnly: true
          type: boolean
        modified:
          description: Date of last edition of the dashboard.
          format: date-time
          readOnly: true
          type: string
        popularity:
          description: Popularity of the dashboard.
          format: int32
          maximum: 5
          readOnly: true
          type: integer
        title:
          description: Title of the dashboard.
          readOnly: true
          type: string
        type:
          $ref: '#/components/schemas/DashboardType'
        url:
          description: URL path to the dashboard.
          readOnly: true
          type: string
      required:
      - id
      - type
      type: object
    DashboardListItems:
      description: TODO.
      example:
        total: 6
        dashboards:
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
      properties:
        dashboards:
          description: List of dashboards in the dashboard list.
          items:
            $ref: '#/components/schemas/DashboardListItem'
          type: array
        total:
          description: Number of dashboards in the dashboard list.
          format: int64
          readOnly: true
          type: integer
      required:
      - dashboards
      type: object
    DashboardType:
      description: The type of the dashboard.
      enum:
      - custom_timeboard
      - custom_screenboard
      - integration_screenboard
      - integration_timeboard
      - host_timeboard
      type: string
      x-enum-varnames:
      - CUSTOM_TIMEBOARD
      - CUSTOM_SCREENBOARD
      - INTEGRATION_SCREENBOARD
      - INTEGRATION_TIMEBOARD
      - HOST_TIMEBOARD
    Organization:
      description: Organization object.
      properties:
        attributes:
          $ref: '#/components/schemas/OrganizationAttributes'
        id:
          description: ID of the organization.
          type: string
        type:
          default: orgs
          description: Organizations resource type.
          readOnly: true
          type: string
      type: object
    OrganizationAttributes:
      description: Attributes of the organization.
      properties:
        created_at:
          description: Creation time of the organization.
          format: date-time
          type: string
        description:
          description: Description of the organization.
          type: string
        disabled:
          description: Whether or not the organization is disabled.
          type: boolean
        modified_at:
          description: Time of last organization modification.
          format: date-time
          type: string
        name:
          description: Name of the organization.
          type: string
        public_id:
          description: Public ID of the organization.
          type: string
        sharing:
          description: Sharing type of the organization.
          type: string
        url:
          description: URL of the site that this organization exists at.
          type: string
      type: object
    Pagination:
      description: Pagination object.
      example:
        total_count: 0
        total_filtered_count: 6
      properties:
        total_count:
          description: Total count of pages.
          format: int64
          type: integer
        total_filtered_count:
          description: Total count of filtered pages.
          format: int64
          type: integer
      type: object
    Permission:
      description: Permission object.
      example:
        attributes:
          display_type: display_type
          group_name: group_name
          created: 2000-01-23T04:56:07.000+00:00
          restricted: true
          name: name
          description: description
          display_name: display_name
        id: id
        type: permissions
      properties:
        attributes:
          $ref: '#/components/schemas/PermissionAttributes'
        id:
          description: ID of the permission.
          type: string
        type:
          default: permissions
          description: Permissions resource type.
          readOnly: true
          type: string
      type: object
    PermissionAttributes:
      description: Attributes of a permission.
      example:
        display_type: display_type
        group_name: group_name
        created: 2000-01-23T04:56:07.000+00:00
        restricted: true
        name: name
        description: description
        display_name: display_name
      properties:
        created:
          description: Creation time of the permission.
          format: date-time
          type: string
        description:
          description: Description of the permission.
          type: string
        display_name:
          description: Displayed name for the permission.
          type: string
        display_type:
          description: Display type.
          type: string
        group_name:
          description: Name of the permission group.
          type: string
        name:
          description: Name of the permission.
          type: string
        restricted:
          description: Whether or not the permission is restricted.
          type: boolean
      type: object
    Permissions:
      description: Payload with API-returned permissions.
      example:
        data:
        - attributes:
            display_type: display_type
            group_name: group_name
            created: 2000-01-23T04:56:07.000+00:00
            restricted: true
            name: name
            description: description
            display_name: display_name
          id: id
          type: permissions
        - attributes:
            display_type: display_type
            group_name: group_name
            created: 2000-01-23T04:56:07.000+00:00
            restricted: true
            name: name
            description: description
            display_name: display_name
          id: id
          type: permissions
      properties:
        data:
          description: Array of permissions.
          items:
            $ref: '#/components/schemas/Permission'
          type: array
      type: object
    QuerySortOrder:
      default: desc
      description: Direction of sort.
      enum:
      - asc
      - desc
      type: string
      x-enum-varnames:
      - ASC
      - DESC
    RelationshipToOrganization:
      description: Relationship to an organization.
      example:
        data:
          id: id
          type: orgs
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToOrganizationData'
      type: object
    RelationshipToOrganizationData:
      description: Relationship to organization object.
      example:
        id: id
        type: orgs
      properties:
        id:
          description: ID of the organization.
          type: string
        type:
          default: orgs
          description: Organizations type.
          readOnly: true
          type: string
      type: object
    RelationshipToOrganizations:
      description: Relationship to organizations.
      example:
        data:
        - id: id
          type: orgs
        - id: id
          type: orgs
      properties:
        data:
          description: Relationships to organization objects.
          items:
            $ref: '#/components/schemas/RelationshipToOrganizationData'
          type: array
      type: object
    RelationshipToPermissionData:
      description: Relationship to permission object.
      properties:
        id:
          description: ID of the permission.
          type: string
        type:
          default: permissions
          description: Permissions resource type.
          readOnly: true
          type: string
      type: object
    RelationshipToPermissions:
      description: Relationship to multiple permissions objects.
      properties:
        data:
          description: Relationships to permission objects.
          items:
            $ref: '#/components/schemas/RelationshipToPermissionData'
          type: array
      type: object
    RelationshipToRoleData:
      description: Relationship to role object.
      example:
        id: id
        type: roles
      properties:
        id:
          description: ID of the role.
          type: string
        type:
          default: roles
          description: TODO
          type: string
      type: object
    RelationshipToRoles:
      description: Relationship to roles.
      example:
        data:
        - id: id
          type: roles
        - id: id
          type: roles
      properties:
        data:
          description: TODO.
          items:
            $ref: '#/components/schemas/RelationshipToRoleData'
          type: array
      type: object
    RelationshipToUser:
      description: Relationship to user.
      example:
        data:
          id: id
          type: users
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToUserData'
      type: object
    RelationshipToUserData:
      description: Relationship to user object.
      example:
        id: id
        type: users
      properties:
        id:
          description: ID of the user.
          type: string
        type:
          default: users
          description: Users type.
          readOnly: true
          type: string
      type: object
    RelationshipToUsers:
      description: Relationship to users.
      example:
        data:
        - id: id
          type: users
        - id: id
          type: users
      properties:
        data:
          description: Relationships to user objects.
          items:
            $ref: '#/components/schemas/RelationshipToUserData'
          type: array
      type: object
    ResponseMetaAttributes:
      description: Object describing meta attributes of response.
      example:
        page:
          total_count: 0
          total_filtered_count: 6
      properties:
        page:
          $ref: '#/components/schemas/Pagination'
      type: object
    Role:
      description: Role object.
      properties:
        attributes:
          $ref: '#/components/schemas/RoleAttributes'
        id:
          description: Role ID.
          type: string
        relationships:
          $ref: '#/components/schemas/RoleRelationships'
        type:
          default: roles
          description: TODO
          type: string
      type: object
    RoleAttributes:
      description: Attributes of the role.
      properties:
        created_at:
          description: Creation time of the role.
          format: date-time
          type: string
        modified_at:
          description: Time of last role modification.
          format: date-time
          type: string
        name:
          description: Name of the role.
          type: string
      type: object
    RoleRelationships:
      description: Role relationships object.
      properties:
        permissions:
          $ref: '#/components/schemas/RelationshipToPermissions'
      type: object
    UserCreateAttributes:
      description: Attributes of the created user.
      example:
        name: name
        title: title
        email: email
      properties:
        email:
          description: The email of the user.
          type: string
        name:
          description: The name of the user.
          type: string
        title:
          description: The title of the user.
          type: string
      type: object
    UserCreateData:
      description: Object to create a user.
      example:
        relationships:
          roles:
            data:
            - id: id
              type: roles
            - id: id
              type: roles
        attributes:
          name: name
          title: title
          email: email
        type: users
      properties:
        attributes:
          $ref: '#/components/schemas/UserCreateAttributes'
        relationships:
          $ref: '#/components/schemas/UserRelationships'
        type:
          default: users
          description: Users resource type.
          readOnly: true
          type: string
      type: object
    UserCreatePayload:
      description: Create a user.
      example:
        data:
          relationships:
            roles:
              data:
              - id: id
                type: roles
              - id: id
                type: roles
          attributes:
            name: name
            title: title
            email: email
          type: users
      properties:
        data:
          $ref: '#/components/schemas/UserCreateData'
      type: object
    UserInvitationData:
      description: Object to create a user invitation.
      example:
        relationships:
          user:
            data:
              id: id
              type: users
        type: user_invitations
      properties:
        relationships:
          $ref: '#/components/schemas/UserInvitationRelationships'
        type:
          default: user_invitations
          description: User invitations type.
          type: string
      type: object
    UserInvitationDataAttributes:
      description: Attributes of a user invitation.
      example:
        invite_type: invite_type
        expires_at: 2000-01-23T04:56:07.000+00:00
        created_at: 2000-01-23T04:56:07.000+00:00
        uuid: uuid
      properties:
        created_at:
          description: Creation time of the user invitation.
          format: date-time
          type: string
        expires_at:
          description: Time of invitation expiration.
          format: date-time
          type: string
        invite_type:
          description: Type of invitation.
          type: string
        uuid:
          description: UUID of the user invitation.
          type: string
      type: object
    UserInvitationPayload:
      description: Object to invite users to join the organization.
      example:
        data:
        - relationships:
            user:
              data:
                id: id
                type: users
          type: user_invitations
        - relationships:
            user:
              data:
                id: id
                type: users
          type: user_invitations
      properties:
        data:
          description: List of user invitations.
          items:
            $ref: '#/components/schemas/UserInvitationData'
          type: array
      type: object
    UserInvitationRelationships:
      description: Relationships data for user invitation.
      example:
        user:
          data:
            id: id
            type: users
      properties:
        user:
          $ref: '#/components/schemas/RelationshipToUser'
      type: object
    UserInvitationResponse:
      description: User invitation as returned by the API.
      example:
        data:
          attributes:
            invite_type: invite_type
            expires_at: 2000-01-23T04:56:07.000+00:00
            created_at: 2000-01-23T04:56:07.000+00:00
            uuid: uuid
          id: id
          type: user_invitations
      properties:
        data:
          $ref: '#/components/schemas/UserInvitationResponseData'
      type: object
    UserInvitationResponseData:
      description: Object of a user invitation returned by the API.
      example:
        attributes:
          invite_type: invite_type
          expires_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          uuid: uuid
        id: id
        type: user_invitations
      properties:
        attributes:
          $ref: '#/components/schemas/UserInvitationDataAttributes'
        id:
          description: ID of the user invitiation.
          type: string
        type:
          default: user_invitations
          description: User invitations type.
          type: string
      type: object
    UserInvitationsResponse:
      description: User invitations as returned by the API.
      example:
        data:
        - attributes:
            invite_type: invite_type
            expires_at: 2000-01-23T04:56:07.000+00:00
            created_at: 2000-01-23T04:56:07.000+00:00
            uuid: uuid
          id: id
          type: user_invitations
        - attributes:
            invite_type: invite_type
            expires_at: 2000-01-23T04:56:07.000+00:00
            created_at: 2000-01-23T04:56:07.000+00:00
            uuid: uuid
          id: id
          type: user_invitations
      properties:
        data:
          description: Array of user invitations.
          items:
            $ref: '#/components/schemas/UserInvitationResponseData'
          type: array
      type: object
    UserRelationships:
      description: Relationships of the user object.
      example:
        roles:
          data:
          - id: id
            type: roles
          - id: id
            type: roles
      properties:
        roles:
          $ref: '#/components/schemas/RelationshipToRoles'
      type: object
    UserResponse:
      description: User object returned by the API.
      example:
        relationships:
          other_users:
            data:
            - id: id
              type: users
            - id: id
              type: users
          org:
            data:
              id: id
              type: orgs
          roles:
            data:
            - id: id
              type: roles
            - id: id
              type: roles
          other_orgs:
            data:
            - id: id
              type: orgs
            - id: id
              type: orgs
        attributes:
          icon: icon
          name: name
          verified: true
          created_at: 2000-01-23T04:56:07.000+00:00
          disabled: true
          handle: handle
          title: title
          email: email
          status: status
        id: id
        type: users
      properties:
        attributes:
          $ref: '#/components/schemas/UserResponseAttributes'
        id:
          description: ID of the user.
          type: string
        relationships:
          $ref: '#/components/schemas/UserResponseRelationships'
        type:
          default: users
          description: Users type.
          readOnly: true
          type: string
      type: object
    UserResponseAttributes:
      description: Attributes of user object returned by the API.
      example:
        icon: icon
        name: name
        verified: true
        created_at: 2000-01-23T04:56:07.000+00:00
        disabled: true
        handle: handle
        title: title
        email: email
        status: status
      properties:
        created_at:
          description: Creation time of the user.
          format: date-time
          type: string
        disabled:
          description: Whether the user is disabled.
          type: boolean
        email:
          description: Email of the user.
          type: string
        handle:
          description: Handle of the user.
          type: string
        icon:
          description: URL of the user's icon.
          type: string
        name:
          description: Name of the user.
          type: string
        status:
          description: Status of the user.
          type: string
        title:
          description: Title of the user.
          type: string
        verified:
          description: Whether the user is verified.
          type: boolean
      type: object
    UserResponseIncludedItem:
      description: An object related to a user.
      discriminator:
        mapping:
          orgs: '#/components/schemas/Organization'
          permissions: '#/components/schemas/Permission'
          roles: '#/components/schemas/Role'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/Organization'
      - $ref: '#/components/schemas/Permission'
      - $ref: '#/components/schemas/Role'
      type: object
      x-oneOf-name: UserResponseIncludedItem
    UserResponsePayload:
      description: Response containing information about a single user.
      example:
        data:
          relationships:
            other_users:
              data:
              - id: id
                type: users
              - id: id
                type: users
            org:
              data:
                id: id
                type: orgs
            roles:
              data:
              - id: id
                type: roles
              - id: id
                type: roles
            other_orgs:
              data:
              - id: id
                type: orgs
              - id: id
                type: orgs
          attributes:
            icon: icon
            name: name
            verified: true
            created_at: 2000-01-23T04:56:07.000+00:00
            disabled: true
            handle: handle
            title: title
            email: email
            status: status
          id: id
          type: users
        included:
        - null
        - null
      properties:
        data:
          $ref: '#/components/schemas/UserResponse'
        included:
          description: Array of objects related to the user.
          items:
            $ref: '#/components/schemas/UserResponseIncludedItem'
          type: array
      type: object
    UserResponseRelationships:
      description: Relationships of the user object returned by the API.
      example:
        other_users:
          data:
          - id: id
            type: users
          - id: id
            type: users
        org:
          data:
            id: id
            type: orgs
        roles:
          data:
          - id: id
            type: roles
          - id: id
            type: roles
        other_orgs:
          data:
          - id: id
            type: orgs
          - id: id
            type: orgs
      properties:
        org:
          $ref: '#/components/schemas/RelationshipToOrganization'
        other_orgs:
          $ref: '#/components/schemas/RelationshipToOrganizations'
        other_users:
          $ref: '#/components/schemas/RelationshipToUsers'
        roles:
          $ref: '#/components/schemas/RelationshipToRoles'
      type: object
    UserUpdateAttributes:
      description: Attributes of the edited user.
      example:
        name: name
        disabled: true
        email: email
      properties:
        disabled:
          description: If the user is enabled or disabled.
          type: boolean
        email:
          description: The email of the user.
          type: string
        name:
          description: The name of the user.
          type: string
      type: object
    UserUpdateData:
      description: Object to update a user.
      example:
        attributes:
          name: name
          disabled: true
          email: email
        id: id
        type: users
      properties:
        attributes:
          $ref: '#/components/schemas/UserUpdateAttributes'
        id:
          description: ID of the user.
          type: string
        type:
          default: users
          description: Users resource type.
          readOnly: true
          type: string
      type: object
    UserUpdatePayload:
      description: Update a user.
      example:
        data:
          attributes:
            name: name
            disabled: true
            email: email
          id: id
          type: users
      properties:
        data:
          $ref: '#/components/schemas/UserUpdateData'
      type: object
    UsersResponsePayload:
      description: Response containing information about multiple users.
      example:
        data:
        - relationships:
            other_users:
              data:
              - id: id
                type: users
              - id: id
                type: users
            org:
              data:
                id: id
                type: orgs
            roles:
              data:
              - id: id
                type: roles
              - id: id
                type: roles
            other_orgs:
              data:
              - id: id
                type: orgs
              - id: id
                type: orgs
          attributes:
            icon: icon
            name: name
            verified: true
            created_at: 2000-01-23T04:56:07.000+00:00
            disabled: true
            handle: handle
            title: title
            email: email
            status: status
          id: id
          type: users
        - relationships:
            other_users:
              data:
              - id: id
                type: users
              - id: id
                type: users
            org:
              data:
                id: id
                type: orgs
            roles:
              data:
              - id: id
                type: roles
              - id: id
                type: roles
            other_orgs:
              data:
              - id: id
                type: orgs
              - id: id
                type: orgs
          attributes:
            icon: icon
            name: name
            verified: true
            created_at: 2000-01-23T04:56:07.000+00:00
            disabled: true
            handle: handle
            title: title
            email: email
            status: status
          id: id
          type: users
        meta:
          page:
            total_count: 0
            total_filtered_count: 6
        included:
        - null
        - null
      properties:
        data:
          description: Array of returned users.
          items:
            $ref: '#/components/schemas/UserResponse'
          type: array
        included:
          description: Array of objects related to the users.
          items:
            $ref: '#/components/schemas/UserResponseIncludedItem'
          type: array
        meta:
          $ref: '#/components/schemas/ResponseMetaAttributes'
      type: object
  securitySchemes:
    apiKeyAuth:
      description: API Key
      in: header
      name: DD-API-KEY
      type: apiKey
    appKeyAuth:
      description: APP Key
      in: header
      name: DD-APPLICATION-KEY
      type: apiKey
x-group-parameters: true
