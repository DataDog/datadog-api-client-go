/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// LogsArchiveIntegrationGCS The GCS archive's integration destination.
type LogsArchiveIntegrationGCS struct {
	// A client email.
	ClientEmail string `json:"client_email"`
	// A project ID.
	ProjectId string `json:"project_id"`
	// UnparsedObject contains the raw value of the object if there was an error when deserializing into the struct
	UnparsedObject map[string]interface{} `json:-`
}

// NewLogsArchiveIntegrationGCS instantiates a new LogsArchiveIntegrationGCS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsArchiveIntegrationGCS(clientEmail string, projectId string) *LogsArchiveIntegrationGCS {
	this := LogsArchiveIntegrationGCS{}
	this.ClientEmail = clientEmail
	this.ProjectId = projectId
	return &this
}

// NewLogsArchiveIntegrationGCSWithDefaults instantiates a new LogsArchiveIntegrationGCS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsArchiveIntegrationGCSWithDefaults() *LogsArchiveIntegrationGCS {
	this := LogsArchiveIntegrationGCS{}
	return &this
}

// GetClientEmail returns the ClientEmail field value
func (o *LogsArchiveIntegrationGCS) GetClientEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientEmail
}

// GetClientEmailOk returns a tuple with the ClientEmail field value
// and a boolean to check if the value has been set.
func (o *LogsArchiveIntegrationGCS) GetClientEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientEmail, true
}

// SetClientEmail sets field value
func (o *LogsArchiveIntegrationGCS) SetClientEmail(v string) {
	o.ClientEmail = v
}

// GetProjectId returns the ProjectId field value
func (o *LogsArchiveIntegrationGCS) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *LogsArchiveIntegrationGCS) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *LogsArchiveIntegrationGCS) SetProjectId(v string) {
	o.ProjectId = v
}

func (o LogsArchiveIntegrationGCS) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UnparsedObject != nil {
		return json.Marshal(o.UnparsedObject)
	}
	if true {
		toSerialize["client_email"] = o.ClientEmail
	}
	if true {
		toSerialize["project_id"] = o.ProjectId
	}
	return json.Marshal(toSerialize)
}

func (o *LogsArchiveIntegrationGCS) UnmarshalJSON(bytes []byte) (err error) {
	raw := map[string]interface{}{}
	required := struct {
		ClientEmail *string `json:"client_email"`
		ProjectId   *string `json:"project_id"`
	}{}
	all := struct {
		ClientEmail string `json:"client_email"`
		ProjectId   string `json:"project_id"`
	}{}
	err = json.Unmarshal(bytes, &required)
	if err != nil {
		return err
	}
	if required.ClientEmail == nil {
		return fmt.Errorf("Required field client_email missing")
	}
	if required.ProjectId == nil {
		return fmt.Errorf("Required field project_id missing")
	}
	err = json.Unmarshal(bytes, &all)
	if err != nil {
		err = json.Unmarshal(bytes, &raw)
		if err != nil {
			return err
		}
		o.UnparsedObject = raw
		return nil
	}
	o.ClientEmail = all.ClientEmail
	o.ProjectId = all.ProjectId
	return nil
}

type NullableLogsArchiveIntegrationGCS struct {
	value *LogsArchiveIntegrationGCS
	isSet bool
}

func (v NullableLogsArchiveIntegrationGCS) Get() *LogsArchiveIntegrationGCS {
	return v.value
}

func (v *NullableLogsArchiveIntegrationGCS) Set(val *LogsArchiveIntegrationGCS) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsArchiveIntegrationGCS) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsArchiveIntegrationGCS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsArchiveIntegrationGCS(val *LogsArchiveIntegrationGCS) *NullableLogsArchiveIntegrationGCS {
	return &NullableLogsArchiveIntegrationGCS{value: val, isSet: true}
}

func (v NullableLogsArchiveIntegrationGCS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsArchiveIntegrationGCS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
