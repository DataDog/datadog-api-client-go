/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// MetricVolumesResponse Response object which includes a single metric's volume.
type MetricVolumesResponse struct {
	Data *MetricVolumes `json:"data,omitempty"`
}

// NewMetricVolumesResponse instantiates a new MetricVolumesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricVolumesResponse() *MetricVolumesResponse {
	this := MetricVolumesResponse{}
	return &this
}

// NewMetricVolumesResponseWithDefaults instantiates a new MetricVolumesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricVolumesResponseWithDefaults() *MetricVolumesResponse {
	this := MetricVolumesResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *MetricVolumesResponse) GetData() MetricVolumes {
	if o == nil || o.Data == nil {
		var ret MetricVolumes
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricVolumesResponse) GetDataOk() (*MetricVolumes, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *MetricVolumesResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given MetricVolumes and assigns it to the Data field.
func (o *MetricVolumesResponse) SetData(v MetricVolumes) {
	o.Data = &v
}

func (o MetricVolumesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableMetricVolumesResponse struct {
	value *MetricVolumesResponse
	isSet bool
}

func (v NullableMetricVolumesResponse) Get() *MetricVolumesResponse {
	return v.value
}

func (v *NullableMetricVolumesResponse) Set(val *MetricVolumesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricVolumesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricVolumesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricVolumesResponse(val *MetricVolumesResponse) *NullableMetricVolumesResponse {
	return &NullableMetricVolumesResponse{value: val, isSet: true}
}

func (v NullableMetricVolumesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricVolumesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
