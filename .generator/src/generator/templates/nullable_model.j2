// Nullable{{ name }} handles when a null is used for {{ name }}.
type Nullable{{ name }} struct {
	value *{{ name }}
	isSet bool
}

// Get returns the associated value.
func (v Nullable{{ name }}) Get() *{{ name }} {
	return v.value
}

// Set changes the value and indicates it's been called.
func (v *Nullable{{ name }}) Set(val *{{ name }}) {
	v.value = val
	v.isSet = true
}

// IsSet returns whether Set has been called.
func (v Nullable{{ name }}) IsSet() bool {
	return v.isSet
}

// Unset sets the value to nil and resets the set flag/
func (v *Nullable{{ name }}) Unset() {
	v.value = nil
	v.isSet = false
}

// NewNullable{{ name }} initializes the struct as if Set has been called.
func NewNullable{{ name }}(val *{{ name }}) *Nullable{{ name }} {
	return &Nullable{{ name }}{value: val, isSet: true}
}

// MarshalJSON serializes the associated value.
func (v Nullable{{ name }}) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

// UnmarshalJSON deserializes the payload and sets the flag as if Set has been called.
func (v *Nullable{{ name }}) UnmarshalJSON(src []byte) error {
	v.isSet = true

	// this object is nullable so check if the payload is null or empty string
	if string(src) == "" || string(src) == "{}" {
		return nil
	}

	return json.Unmarshal(src, &v.value)
}
