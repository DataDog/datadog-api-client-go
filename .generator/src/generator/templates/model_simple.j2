// {{ name }} {{ model.description|block_comment(prefix="//", first_line=False) }}{% if model.deprecated %}
//
// Deprecated: This model is deprecated.{% endif %}
type {{ name }} struct {
{#-
{{^isMap}}
{{^isArray}}
	{{{parent}}}
{{/isArray}}
{{/isMap}}
-#}
{%- if model.type == "array" %}
	Items []{{ get_type(model.get("items", {}), alternative_name=name + "Item") }}

	// UnparsedObject contains the raw value of the array if there was an error when deserializing into the struct
	UnparsedObject []interface{} `json:"-"`
{%- else %}
{%- for attr, schema in model.get("properties", {}).items() %}
{%- set propertyName = attr|attribute_name %}
{%- set dataType = get_type(schema, alternative_name=name + propertyName, render_nullable=True) %}
	// {{ schema.description|block_comment(prefix="//", first_line=False)|indent("\t") }}
{%- if schema.deprecated %}
	// Deprecated
{%- endif %}
	{{ propertyName }} {% if model|is_reference(attr) %}*{% endif %}{{ dataType }} `json:"{{ attr }}{% if attr not in model.get("required", []) %},omitempty{% endif %}"`
{%- endfor %}
	// UnparsedObject contains the raw value of the object if there was an error when deserializing into the struct
	UnparsedObject map[string]interface{} `json:"-"`
{%- if model.additionalProperties is not false %}
	AdditionalProperties map[string]{{ get_type(model.get("additionalProperties", True)) }} `json:"-"`
{%- endif %}
{%- endif %}
}


// New{{ name }} instantiates a new {{ name }} object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func New{{ name }}({%- for attr, spec in model.get("properties", {}).items() if attr in model.get("required", []) %}{{ attr|variable_name }} {{ get_type(spec, alternative_name=name + attr|attribute_name, render_nullable=True) }}{% if not loop.last %}, {% endif %}{% endfor %}) *{{ name }} {
	this := {{ name }}{}
{%- for attr, spec in model.get("properties", {}).items() %}
{%- if attr in model.get("required", []) %}
	this.{{ attr|attribute_name }} = {{ attr|variable_name }}
{%- elif spec.default is defined and spec.get("type", "object") != "object" and spec.type != "array" and not spec.get("readOnly", False) %}
	{%- set dataType = get_type(spec, alternative_name=name + attr|attribute_name, render_nullable=True) %}
	{%- set newDataType = get_type(spec, alternative_name=name + attr|attribute_name, render_nullable=True, render_new=True) %}
	{%- set baseType = get_type(spec, alternative_name=name + attr|attribute_name) %}
	{%- if spec.nullable %}
	{%- if spec.default == None %}
	this.{{ attr|attribute_name }} = *{{ newDataType }}(nil)
	{%- else %}
{#- we use datatypeWithEnum here, since it will represent the non-nullable name of the datatype, e.g. int64 for NullableInt64 #}
	var {{ attr|variable_name }} {{ baseType }} = {{ spec.default|format_value(schema=spec) }}
	this.{{ attr|attribute_name }} = *{{ newDataType }}(&{{ attr|variable_name }})
	{%- endif %}
	{%- else %}
	var {{ attr|variable_name }} {{ dataType }} = {{ spec.default|format_value(schema=spec) }}
	this.{{ attr|attribute_name }} = &{{ attr|variable_name }}
	{%- endif %}
{%- endif %}
{%- endfor %}
	return &this
}

// New{{ name }}WithDefaults instantiates a new {{ name }} object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set.
func New{{ name }}WithDefaults() *{{ name }} {
	this := {{ name }}{}
{%- for attr, spec in model.get("properties", {}).items() %}
{%- if spec.default is defined and spec.get("type", "object") != "object" and spec.type != "array" and not spec.get("readOnly", False) %}
	{%- set dataType = get_type(spec, alternative_name=name + attr|attribute_name, render_nullable=True) %}
	{%- set newDataType = get_type(spec, alternative_name=name + attr|attribute_name, render_nullable=True, render_new=True) %}
	{%- set baseType = get_type(spec, alternative_name=name + attr|attribute_name) %}
	{%- if spec.nullable %}
	{%- if spec.default == None %}
	this.{{ attr|attribute_name }} = *{{ newDataType }}(nil)
	{%- else %}
{#- we use datatypeWithEnum here, since it will represent the non-nullable name of the datatype, e.g. int64 for NullableInt64 #}
	var {{ attr|variable_name }} {{ baseType }} = {{ spec.default|format_value(schema=spec) }}
	this.{{ attr|attribute_name }} = *{{ newDataType }}(&{{ attr|variable_name }})
	{%- endif %}
	{%- else %}
	var {{ attr|variable_name }} {{ dataType }} = {{ spec.default|format_value(schema=spec) }}
	this.{{ attr|attribute_name }} = {% if attr not in model.get("required", []) %}&{% endif %}{{ attr|variable_name }}
	{%- endif %}
{%- endif %}
{%- endfor %}
	return &this
}

{%- for attr, spec in model.get("properties", {}).items() %}
{%- set propertyName = attr|attribute_name %}
{%- set dataType = get_type(spec, alternative_name=name + propertyName, render_nullable=True) %}
{%- set baseType = get_type(spec, alternative_name=name + propertyName) %}
{%- set isNullable = spec.nullable %}
{%- set isContainer = spec.type == "array" %}
{%- set isAdditionalPropertiesContainer = spec.type == "object" and spec.additionalProperties is defined and spec.additionalProperties is not false and not spec.get("properties") %}
{%- set isPrimitiveContainer = spec.type == "array" and spec["items"]|is_primitive %}
{%- set isAnyType = not dataType.startswith("[]") and not dataType.startswith("map[") %}
{%- if attr in model.get("required", []) %}
// Get{{ propertyName }} returns the {{ propertyName }} field value.
{%- if isNullable %}
// If the value is explicit nil, the zero value for {{ baseType }} will be returned.
{%- endif %}
{%- if spec.deprecated %}
// Deprecated
{%- endif %}
func (o *{{ name }}) Get{{ propertyName }}() {{ baseType }} {
	if o == nil{%- if isNullable %}{% if not ((isContainer and not isPrimitiveContainer) or isAdditionalPropertiesContainer) %} || o.{{ propertyName }}.Get() == nil{%- endif %}{%- endif %} {
		var ret {{ baseType }}
		return ret
	}

{%- if isNullable %}
{%- if (isContainer and not isPrimitiveContainer) or isAdditionalPropertiesContainer %}
	return o.{{ propertyName }}
{%- else %}
	return *o.{{ propertyName }}.Get()
{%- endif %}
{%- else %}
	return o.{{ propertyName }}
{%- endif %}
}

// Get{{ propertyName }}Ok returns a tuple with the {{ propertyName }} field value
// and a boolean to check if the value has been set.
{%- if isNullable %}
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
{%- endif %}
{%- if spec.deprecated %}
// Deprecated
{%- endif %}
func (o *{{ name }}) Get{{ propertyName }}Ok() (*{{ baseType }}, bool) {
	if o == nil {%- if isNullable and ((isContainer and not isPrimitiveContainer) or isAdditionalPropertiesContainer) %}|| o.{{ propertyName }} == nil{%- endif %} {
		return nil, false
	}
{%- if isNullable %}
{%- if (isContainer and not isPrimitiveContainer) or isAdditionalPropertiesContainer %}
	return &o.{{ propertyName }}, true
{%- else %}
	return o.{{ propertyName }}.Get(), o.{{ propertyName }}.IsSet()
{%- endif %}
{%- else %}
	return &o.{{ propertyName }}, true
{%- endif %}
}

// Set{{ propertyName }} sets field value.
{%- if spec.deprecated %}
// Deprecated
{%- endif %}
func (o *{{ name }}) Set{{ propertyName }}(v {{ baseType }}) {
{%- if isNullable %}
{%- if (isContainer and not isPrimitiveContainer) or isAdditionalPropertiesContainer %}
	o.{{ propertyName }} = v
{%- else %}
	o.{{ propertyName }}.Set(&v)
{%- endif %}
{%- else %}
	o.{{ propertyName }} = v
{%- endif %}
}

{% endif %}
{%- if attr not in model.get("required", []) %}
// Get{{ propertyName }} returns the {{ propertyName }} field value if set, zero value otherwise{%- if isNullable %} (both if not set or set to explicit null){%- endif %}.
{%- if spec.deprecated %}
// Deprecated
{%- endif %}
func (o *{{ name }}) Get{{ propertyName }}() {{ baseType }} {
	if o == nil {% if not isNullable %}|| o.{{ propertyName }} == nil{%- endif %}{%- if isNullable %}{% if not ((isContainer and not isPrimitiveContainer) or isAdditionalPropertiesContainer) %}|| o.{{ propertyName }}.Get() == nil{%- endif %}{%- endif %} {
		var ret {{ baseType }}
		return ret
	}
{%- if isNullable %}
{%- if (isContainer and not isPrimitiveContainer) or isAdditionalPropertiesContainer %}
	return o.{{ propertyName }}
{%- else %}
	return *o.{{ propertyName }}.Get()
{%- endif %}
{%- else %}
	return {% if model|is_reference(attr) %}*{% endif %}o.{{ propertyName }}
{%- endif %}
}

// Get{{ propertyName }}Ok returns a tuple with the {{ propertyName }} field value if set, nil otherwise
// and a boolean to check if the value has been set.
{%- if isNullable %}
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
{%- endif %}
{%- if spec.deprecated %}
// Deprecated
{%- endif %}
func (o *{{ name }}) Get{{ propertyName }}Ok() (*{{ baseType }}, bool) {
	if o == nil {% if not isNullable %}|| o.{{ propertyName }} == nil{%- endif %}{%- if isNullable %}{%- if (isContainer and not isPrimitiveContainer) or isAdditionalPropertiesContainer %}|| o.{{ propertyName }} == nil{%- endif %}{%- endif %} {
		return nil, false
	}
{%- if isNullable %}
{%- if (isContainer and not isPrimitiveContainer) or isAdditionalPropertiesContainer %}
	return &o.{{ propertyName }}, true
{%- else %}
	return o.{{ propertyName }}.Get(), o.{{ propertyName }}.IsSet()
{%- endif %}
{%- else %}
	return {% if not model|is_reference(attr) %}&{% endif %}o.{{ propertyName }}, true
{%- endif %}
}

// Has{{ propertyName }} returns a boolean if a field has been set.
func (o *{{ name }}) Has{{ propertyName }}() bool {
	return o != nil && {% if not isNullable %}o.{{ propertyName }} != nil{%- else %}{%- if (isContainer and not isPrimitiveContainer) or isAdditionalPropertiesContainer %}o.{{ propertyName }} != nil{%- else %}o.{{ propertyName }}.IsSet(){%- endif %}{%- endif %}
}

// Set{{ propertyName }} gets a reference to the given {{ dataType }} and assigns it to the {{ propertyName }} field.
{%- if spec.deprecated %}
// Deprecated
{%- endif %}
func (o *{{ name }}) Set{{ propertyName }}(v {{ baseType }}) {
{%- if isNullable %}
{%- if (isContainer and not isPrimitiveContainer) or isAdditionalPropertiesContainer %}
	o.{{ propertyName }} = v
{%- else %}
	o.{{ propertyName }}.Set(&v)
{%- endif %}
{%- else %}
	o.{{ propertyName }} = {% if model|is_reference(attr) %}&{% endif %}v
{%- endif %}
}
{%- if isNullable %}
{%- if (isContainer and not isPrimitiveContainer) or isAdditionalPropertiesContainer %}
{%- else %}
// Set{{ propertyName }}Nil sets the value for {{ propertyName }} to be an explicit nil.
func (o *{{ name }}) Set{{ propertyName }}Nil() {
	o.{{ propertyName }}.Set(nil)
}

// Unset{{ propertyName }} ensures that no value is present for {{ propertyName }}, not even an explicit nil.
func (o *{{ name }}) Unset{{ propertyName }}() {
	o.{{ propertyName }}.Unset()
}
{%- endif %}
{%- endif %}

{% endif %}
{%- endfor %}

// MarshalJSON serializes the struct using spec logic.
func (o {{ name }}) MarshalJSON() ([]byte, error) {
	toSerialize := {% if model.type == "array" %}make([]interface{}, len(o.Items)){% else %}map[string]interface{}{}{% endif %}
	if o.UnparsedObject != nil {
		return datadog.Marshal(o.UnparsedObject)
	}
{%- if model.type == "array" %}
	for i, item := range o.Items {
		toSerialize[i] = item
	}
{%- endif %}
	{%- for attr, spec in model.get("properties", {}).items() %}
	{%- set propertyName = attr|attribute_name %}
	{%- set dataType = get_type(spec, alternative_name=name + propertyName, render_nullable=True) %}
	{%- set dataType = get_type(spec, alternative_name=name + propertyName) %}
	{%- set isRequired = attr in model.get("required", []) %}
	{%- set isNullable = spec.nullable %}
	{%- set isContainer = spec.type == "array" %}
	{%- set isAdditionalPropertiesContainer = spec.type == "object" and spec.additionalProperties is defined and spec.additionalProperties is not false and not spec.get("properties") %}
	{%- set isPrimitiveContainer = spec.type == "array" and spec["items"]|is_primitive %}
	{%- set isAnyType = not dataType.startswith("[]") and not dataType.startswith("map[") %}
	{#- if argument is nullable, only serialize it if it is set #}
	{%- if isNullable %}
	{%- if (isContainer and not isPrimitiveContainer) or isAdditionalPropertiesContainer %}
	if o.{{ propertyName }} != nil {
		toSerialize["{{ attr }}"] = o.{{ propertyName }}
	}
	{%- endif %}
	{%- if not ((isContainer and not isPrimitiveContainer) or isAdditionalPropertiesContainer) %}
	{%- if isRequired %}
	toSerialize["{{ attr }}"] = o.{{ propertyName }}.Get()
	{%- else %}
	if o.{{ propertyName }}.IsSet() {
		toSerialize["{{ attr }}"] = o.{{ propertyName }}.Get()
	}
	{%- endif %}
	{%- endif %}
	{%- else %}
	{#- if argument is not nullable, don't set it if it is nil #}
{%- macro toSerizalize(attr, propertyName, spec) -%}
{%- if spec.format == "date-time" -%}
if o.{{ propertyName }}.Nanosecond() == 0 {
	toSerialize["{{ attr }}"] = o.{{ propertyName }}.Format("2006-01-02T15:04:05Z07:00")
} else {
	toSerialize["{{ attr }}"] = o.{{ propertyName }}.Format("2006-01-02T15:04:05.000Z07:00")
}
{%- else -%}
toSerialize["{{ attr }}"] = o.{{ propertyName }}
{%- endif %}
{%- endmacro %}
	{%- if isRequired %}
	{{ toSerizalize(attr, propertyName, spec)|indent("\t") }}
	{%- else %}
	if o.{{ propertyName }} != nil {
		{{ toSerizalize(attr, propertyName, spec)|indent("\t\t") }}
	}
	{%- endif %}
	{%- endif %}
	{%- endfor %}
	{%- if model.type != "array" and model.additionalProperties is not false %}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	{%- endif %}
	return datadog.Marshal(toSerialize)
}

// UnmarshalJSON deserializes the given payload.
{%- if model.type == "array" %}
{%- set isPrimitiveContainer = model.get("items")|is_primitive %}
func (o *{{ name }}) UnmarshalJSON(bytes []byte) (err error) {
	if err = datadog.Unmarshal(bytes, &o.Items); err != nil {
		return datadog.Unmarshal(bytes, &o.UnparsedObject)
	}

	{%- if not isPrimitiveContainer %}

	if o.Items != nil && len(o.Items) > 0 {
		for _, v := range o.Items {
			if v.UnparsedObject != nil {
				return datadog.Unmarshal(bytes, &o.UnparsedObject)
			}
		}
	}
	{%- endif %}

	return nil
}

{%- else %}
func (o *{{ name }}) UnmarshalJSON(bytes []byte) (err error) {
	all := struct {
	{%- for attr, spec in model.get("properties", {}).items() %}
	{%- set propertyName = attr|attribute_name %}
	{%- set dataType = get_type(spec, alternative_name=name + propertyName, render_nullable=True) %}
	{%- if attr in model.get("required", []) %}
		{{ propertyName }} {% if not spec.nullable %}*{% endif %}{{ dataType }} `json:"{{ attr }}"`
	{%- else %}
		{{ propertyName }} {% if model|is_reference(attr) %}*{% endif %}{{ dataType }} `json:"{{ attr }},omitempty"`
	{%- endif %}
	{%- endfor %}
	}{}
	if err = datadog.Unmarshal(bytes, &all); err != nil {
		return datadog.Unmarshal(bytes, &o.UnparsedObject)
	}
	{%- for attr, spec in model.get("properties", {}).items() if attr in model.get("required", []) %}
	{%- set propertyName = attr|attribute_name %}
	{%- if not spec.nullable %}
	if all.{{ propertyName }} == nil {
	{%- else %}
	if !all.{{ propertyName }}.IsSet() {
	{%- endif %}
		return fmt.Errorf("required field {{ attr }} missing")
	}
	{%- endfor %}

	{%- if model.additionalProperties is not false %}
	additionalProperties := make(map[string]{{ get_type(model.get("additionalProperties", True)) }})
	if err = datadog.Unmarshal(bytes, &additionalProperties); err == nil {
		datadog.DeleteKeys(additionalProperties, &[]string{ {% for attr, schema in model.get("properties", {}).items()%}"{{ attr }}", {% endfor %} })
	} else {
		return err
	}
	{%- endif %}

	{%- set ns = namespace(hasCheckedFields=False) %}
	{%- for attr, spec in model.get("properties", {}).items() %}
	{%- set propertyName = attr|attribute_name %}
	{%- set dataType = get_type(spec, alternative_name=name + propertyName, render_nullable=True) %}
	{%- if spec.enum is defined %}
	{%- set ns.hasCheckedFields = True %}
	{%- endif %}
	{%- if dataType in models and not spec.enum and not spec.oneOf %}
	{%- set ns.hasCheckedFields = True %}
	{%- endif %}
	{%- endfor %}

	{%- if ns.hasCheckedFields %}

	hasInvalidField := false
	{%- endif %}

	{#- check enums #}
	{%- for attr, spec in model.get("properties", {}).items() %}
	{%- set propertyName = attr|attribute_name %}
	{%- set dataType = get_type(spec, alternative_name=name + propertyName, render_nullable=True) %}
	{%- set isNullable = spec.nullable %}

	{%- if spec.enum is defined %}
	if {% if attr not in model.get("required", []) and not isNullable %}all.{{ propertyName }} != nil && {%- endif %}{%- if isNullable %}all.{{ propertyName }}.Get() != nil && !all.{{ propertyName }}.Get(){% else %}!all.{{ propertyName }}{%- endif %}.IsValid() {
		hasInvalidField = true
	} else {
		{%- if attr in model.get("required", []) and not isNullable %}
		o.{{ propertyName }} = *all.{{ propertyName }}
		{%- else %}
		o.{{ propertyName }} = all.{{ propertyName }}
		{%- endif %}
	}
	{%- elif dataType in models and not spec.enum and not spec.oneOf %}
	if {% if model|is_reference(attr) %} all.{{ propertyName }} != nil && {% endif %}all.{{ propertyName }}.UnparsedObject != nil && o.UnparsedObject == nil {
		hasInvalidField = true
	}
	{%- if attr in model.get("required", []) and not isNullable %}
	o.{{ propertyName }} = *all.{{ propertyName }}
	{%- else %}
	o.{{ propertyName }} = all.{{ propertyName }}
	{%- endif %}

	{%- else %}

	{%- if attr in model.get("required", []) and not isNullable %}
	o.{{ propertyName }} = *all.{{ propertyName }}
        {%- else %}
	o.{{ propertyName }} = all.{{ propertyName }}
        {%- endif %}
	{%- endif %}
	{%- endfor %}

	{%- if model.additionalProperties is not false %}

	if len(additionalProperties) > 0 {
		o.AdditionalProperties = additionalProperties
	}
	{%- endif %}

	{%- if ns.hasCheckedFields %}

	if hasInvalidField {
		return datadog.Unmarshal(bytes, &o.UnparsedObject)
	}
	{%- endif %}

	return nil
}

{%- endif %}

{%- if model.get("nullable") %}
{% include "nullable_model.j2" %}
{%- endif %}
