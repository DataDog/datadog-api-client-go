// {{ scenario.name|wordwrap(width=120, wrapstring="\n// ")}}

package main
{# package {{ context.api_request.operation_id|snake_case }} #}

{%- if context._given -%}
    {# Include 'from os import environ' used in given statements. #}
    {%- set given = context._imports["os"].add("environ") -%}
{%- endif -%}
{%- set variables = given_variables(context) %}
{%- set parameters = format_parameters(context.api_request.kwargs, spec=operation_spec, replace_values=context._replace_values, has_body=context.body, variables=variables, version=version|upper) %}
{%- if context.body %}
{%- set body = format_data_with_schema(context.body.value, context.api_request.schema.spec, name_prefix="datadog" ~ version|upper ~ ".", replace_values=context._replace_values, required=True, variables=variables, version=version|upper)%}
{%- endif %}

{%- set response_has_three_values = context.status_code != 204 and context.api_response.content %}

import (
	"context"
{%- if not response_has_three_values %}
	"encoding/json"
{%- endif %}
	"fmt"
	"os"

    "github.com/DataDog/datadog-api-client-go/v2/api/datadog"
	"github.com/DataDog/datadog-api-client-go/v2/api/datadog{{ version|upper }}"
	"github.com/google/uuid"
)

func main() {
{%- for name, values in context._given.items() %}
	// {{ name|wordwrap(width=120, wrapstring="\n	// ") }}
	{%- for value, schema in values.items()|sort %}
	{%- if context._replace_values.is_used(value) %}
	{#- // {{ schema.description + ' ' + schema.type|wordwrap(width=120, wrapstring="\n	// ") }}) #}
	{%- if schema.type == 'string' and schema.format != 'uuid'%}
	{{ value|go_name }} := os.Getenv("{{ value }}")
	{%- elif schema.type == 'string' and schema.format == 'uuid' %}
	{{ value|go_name }} := uuid.MustParse(os.Getenv("{{ value }}"))
	{%- elif schema.type == 'integer' %}
	{{ value|go_name }}, _ := strconv.ParseInt(os.Getenv("{{ value }}"), 10, {{ '64' if schema.format == 'int64' else '32' }})
	{%- elif schema.type == 'boolean' %}
	{{ value|go_name }}, _ := strconv.ParseBool(os.Getenv("{{ value }}"))
	{%- else %}
	{{ 1/0 }}
	{%- endif %}
	{%- endif %}
	{%- endfor %}

{% endfor %}
{%- if context.body %}
	body := {{ body }}
{%- endif%}
	ctx := datadog.NewDefaultContext(context.Background())
	configuration := datadog.NewConfiguration()
{%- for operation in context._enable_operations %}
	configuration.SetUnstableOperationEnabled("{{ version }}.{{ operation }}", true)
{%- endfor %}
	apiClient := datadog.NewAPIClient(configuration)
	api := datadog{{ version|upper }}.New{{ context.api_instance.name }}Api(apiClient)
{%- if context.pagination %}
	resp, _ := api.{{ context.api_request.operation_id }}WithPagination(ctx{% if parameters %}, {{ parameters }}{% endif %})

        for paginationResult := range resp {
            if paginationResult.Error != nil {
                fmt.Fprintf(os.Stderr, "Error when calling `{{ context.api_instance.name }}Api.{{ context.api_request.operation_id }}`: %v\n", paginationResult.Error)
            }
            responseContent, _ := json.MarshalIndent(paginationResult.Item, "", "  ")
            fmt.Fprintf(os.Stdout, "%s\n", responseContent)
	}
{%- else %}
{%- if response_has_three_values %}
	resp, r, err := api.{{ context.api_request.operation_id }}(ctx{% if parameters %}, {{ parameters }}{% endif %})

	if err != nil {
		fmt.Fprintf(os.Stderr, "Error when calling `{{ context.api_instance.name }}Api.{{ context.api_request.operation_id }}`: %v\n", err)
		fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
	}

	{%- for contentType, schema in context.api_response.content.items() %}
	{%- if contentType.startswith("application/json") or contentType.startswith("text/json") %}

	responseContent, _ := json.MarshalIndent(resp, "", "  ")
	fmt.Fprintf(os.Stdout, "Response from `{{ context.api_instance.name }}Api.{{ context.api_request.operation_id }}`:\n%s\n", responseContent)
	{%- elif contentType.startswith("text/csv") %}

	fmt.Fprintf(os.Stdout, "Response from `{{ context.api_instance.name }}Api.{{ context.api_request.operation_id }}`:\n%s\n", resp)
	{%- elif schema.get("schema", {}).get("format") == "binary" %}

	responseContent, _ := ioutil.ReadAll(resp)
	fmt.Fprintf(os.Stdout, "Response from `{{ context.api_instance.name }}Api.{{ context.api_request.operation_id }}`:\n%s\n", responseContent)
	{%- endif %}
	{%- endfor %}
{%- else %}
	r, err := api.{{ context.api_request.operation_id }}(ctx, {% if parameters %}{{ parameters }}{% endif %})

	if err != nil {
		fmt.Fprintf(os.Stderr, "Error when calling `{{ context.api_instance.name }}Api.{{ context.api_request.operation_id }}`: %v\n", err)
		fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
	}
{%- endif %}
{%- endif %}
}
