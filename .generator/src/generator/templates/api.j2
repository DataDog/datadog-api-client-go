{% include "partial_header.j2" %}
package {{ package_name }}

import (
	"bytes"
	_context "context"
	_fmt "fmt"
	_io "io"
	_log "log"
	_nethttp "net/http"
	_neturl "net/url"

	"{{ module }}/api/{{ common_package_name }}"
)

{%- set classname = name.replace(" ", "") + "Api" %}

// {{ classname }} service type
type {{ classname }} {{ common_package_name }}.Service
{%- for path, method, operation in operations|sort(attribute="2.operationId", case_sensitive=True) %}
{%- set httpMethod = method.upper() %}
{%- set returnType = operation|return_type %}
{%- set formParameter = operation|form_parameter %}

{%- for name, parameter in operation|parameters if not parameter.required and parameter.in != "path" %}
{%- if loop.first %}

// {{ operation.operationId }}OptionalParameters holds optional parameters for {{ operation.operationId }}.
type {{ operation.operationId }}OptionalParameters struct {
{%- endif %}
	{{ name|attribute_name }} {% if parameter.in != "path" %}*{% endif %}{{ get_type_for_parameter(parameter) }}
{%- if loop.last %}
}
{% endif %}
{%- endfor %}

{%- for name, parameter in operation|parameters if not parameter.required and parameter.in != "path" %}
{%- if loop.first %}
// New{{ operation.operationId }}OptionalParameters creates an empty struct for parameters.
func New{{ operation.operationId }}OptionalParameters() *{{ operation.operationId }}OptionalParameters {
	this := {{ operation.operationId }}OptionalParameters{}
	return &this
}
{%- endif %}
// With{{ name|camel_case }} sets the corresponding parameter name and returns the struct.
func (r *{{ operation.operationId }}OptionalParameters) With{{ name|camel_case }}({{ name|variable_name}} {{ get_type_for_parameter(parameter) }}) *{{ operation.operationId }}OptionalParameters {
	r.{{ name|attribute_name }} = &{{ name|variable_name}}
	return r
}
{%- endfor %}

// {{ operation.operationId }} {{ operation.summary }}.
{{ operation.description|block_comment(prefix="//") }}{% if operation.deprecated %}
//
// Deprecated: This API is deprecated.{% endif %}
func (a *{{ classname }}) {{ operation.operationId }}(ctx _context.Context{% for name, parameter in operation|parameters if parameter.required or parameter.in == "path" %}, {{ name|variable_name}} {{ get_type_for_parameter(parameter) }}{% endfor %}{%- for name, parameter in operation|parameters if not parameter.required and parameter.in != "path" %}{%- if loop.first %}, o ...{{ operation.operationId }}OptionalParameters{% endif %}{% endfor %}) ({% if returnType %}{{ returnType }}, {% endif %}*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.Method{{ httpMethod.lower().title() }}
		localVarPostBody     interface{}
		{%- if returnType %}
		localVarReturnValue  {{ returnType }}
		{%- endif %}
		{%- for name, parameter in operation|parameters if not parameter.required and parameter.in != "path" %}{%- if loop.first %}
		optionalParams {{ operation.operationId }}OptionalParameters
		{%- endif %}{% endfor %}
	)

    {% for name, parameter in operation|parameters if not parameter.required and parameter.in != "path" %}{%- if loop.first %}
    if len(o) > 1 {
        return {% if returnType %} localVarReturnValue, {% endif %}nil, {{ common_package_name }}.ReportError("only one argument of type {{ operation.operationId }}OptionalParameters is allowed")
    }
    if len(o) == 1 {
        optionalParams = o[0]
    }
    {% endif %}{% endfor %}

	{%- if "x-unstable" in operation %}

	operationId := "{{ version }}.{{ operation.operationId }}"
	if a.Client.Cfg.IsUnstableOperationEnabled(operationId) {
		_log.Printf("WARNING: Using unstable operation '%s'", operationId);
	} else {
		return {% if returnType %} localVarReturnValue, {% endif %}nil, {{ common_package_name }}.GenericOpenAPIError{ErrorMessage: _fmt.Sprintf("Unstable operation '%s' is disabled", operationId)}
	}
	{%- endif %}

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(ctx, "{{ version }}.{{ classname }}.{{ operation.operationId }}")
	if err != nil {
		return {% if returnType %}localVarReturnValue, {% endif %}nil, {{ common_package_name }}.GenericOpenAPIError{ErrorMessage: err.Error()}
	}

	localVarPath := localBasePath + "{{ path }}"
	{%- for name, parameter in operation|parameters if parameter.in == "path" %}
	localVarPath = strings.Replace(localVarPath, "{"+"{{ name }}"+"}", _neturl.PathEscape({{ common_package_name }}.ParameterToString({{ name|variable_name}}, "{{ parameter|collection_format }}")), -1)
	{%- endfor %}

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	{%- for name, parameter in operation|parameters if parameter.required %}
	{%- set schema = parameter.get("schema") %}
	{%- set isOptional = True if parameter.in != "path" and not parameter.required else False %}
	{%- if parameter.in != "path" %}
	{%- endif %}
	{%- if schema.minItems is defined %}
	if len({% if isOptional %}optionalParams.{{ name|attribute_name }}{% else %}{{ name|variable_name}}{% endif %}) < {{ schema.minItems }} {
		return {% if returnType %}localVarReturnValue, {% endif %}nil, {{ common_package_name }}.ReportError("{{ name|variable_name}} must have at least {{ schema.minItems }} elements")
	}
	{%- endif %}
	{%- if schema.maxItems is defined %}
	if len({% if isOptional %}optionalParams.{{ name|attribute_name }}{% else %}{{ name|variable_name}}{% endif %}) > {{ schema.maxItems }} {
		return {% if returnType %}localVarReturnValue, {% endif %}nil, {{ common_package_name }}.ReportError("{{ name|variable_name}} must have less than {{ schema.maxItems }} elements")
	}
	{%- endif %}
	{%- if schema.minLength is defined %}
	if datadog.Strlen({% if isOptional %}optionalParams.{{ name|attribute_name }}{% else %}{{ name|variable_name}}{% endif %}) < {{ schema.minLength }} {
		return {% if returnType %}localVarReturnValue, {% endif %}nil, {{ common_package_name }}.ReportError("{{ name|variable_name}} must have at least {{ schema.minLength }} elements")
	}
	{%- endif %}
	{%- if schema.maxLength is defined %}
	if datadog.Strlen({% if isOptional %}optionalParams.{{ name|attribute_name }}{% else %}{{ name|variable_name}}{% endif %}) > {{ schema.maxLength }} {
		return {% if returnType %}localVarReturnValue, {% endif %}nil, {{ common_package_name }}.ReportError("{{ name|variable_name}} must have less than {{ schema.maxLength }} elements")
	}
	{%- endif %}
	{%- if schema.minimum is defined %}
	{%- if parameter.type == "string" %}
	{{ name|variable_name}}Txt, err := atoi({% if isOptional %}optionalParams.{{ name|attribute_name }}{% else %}{{ name|variable_name}}{% endif %})
	if {{ name|variable_name}}Txt < {{minimum}} {
	{%- else %}
	if {% if isOptional %}optionalParams.{{ name|attribute_name }}{% else %}{{ name|variable_name}}{% endif %} < {{ schema.minimum}} {
	{%- endif %}
		return {% if returnType %}localVarReturnValue, {% endif %}nil, {{ common_package_name }}.ReportError("{{ name|variable_name}} must be greater than {{ schema.minimum }}")
	}
	{%- endif %}
	{%- if schema.maximum is defined %}
	{%- if parameter.type == "string" %}
	{{ name|variable_name}}Txt, err := atoi({% if isOptional %}optionalParams.{{ name|attribute_name }}{% else %}{{ name|variable_name}}{% endif %})
	if {{ name|variable_name}}Txt > {{ schema.maximum }} {
	{%- else %}
	if {% if isOptional %}optionalParams.{{ name|attribute_name }}{% else %}{{ name|variable_name}}{% endif %} > {{ schema.maximum }} {
	{%- endif %}
		return {% if returnType %}localVarReturnValue, {% endif %}nil, {{ common_package_name }}.ReportError("{{ name|variable_name}} must be less than {{ schema.maximum }}")
	}
	{%- endif %}
	{%- endfor %}
{%- macro add_local_var_query_params(name, parameter) %}
{%- set collectionFormat = parameter|collection_format %}
{%- set isOptional = True if parameter.in != "path" and not parameter.required else False %}
{%- if collectionFormat == "multi" -%}
t := {% if isOptional %}*optionalParams.{{ name|attribute_name }}{% else %}{{ name|variable_name}}{% endif %}
if reflect.TypeOf(t).Kind() == reflect.Slice {
	s := reflect.ValueOf(t)
	for i := 0; i < s.Len(); i++ {
		localVarQueryParams.Add("{{ parameter.name }}", {{ common_package_name }}.ParameterToString(s.Index(i), "{{ collectionFormat }}"))
	}
} else {
	localVarQueryParams.Add("{{ parameter.name }}", {{ common_package_name }}.ParameterToString(t, "{{ collectionFormat }}"))
}
{%- else -%}
localVarQueryParams.Add("{{ parameter.name }}", {{ common_package_name }}.ParameterToString({% if isOptional %}*optionalParams.{{ name|attribute_name }}{% else %}{{ name|variable_name}}{% endif %}, "{{collectionFormat}}"))
{%- endif %}
{%- endmacro %}
	{%- for name, parameter in operation|parameters if parameter.in == "query" %}
	{%- if parameter.required %}
	{{ add_local_var_query_params(name, parameter)|indent("\t") }}
	{%- else %}
	if optionalParams.{{ name|attribute_name }} != nil {
		{{ add_local_var_query_params(name, parameter)|indent("\t\t") }}
	}
	{%- endif %}
	{%- endfor %}
	{%- if operation.requestBody %}

	{%- set contentTypeHeaders = operation.requestBody.content.keys()|list %}
	{%- if contentTypeHeaders %}
	{%- if "application/json" in contentTypeHeaders %}
	localVarHeaderParams["Content-Type"] = "application/json"
	{%- else  %}
	localVarHeaderParams["Content-Type"] =  "{{ contentTypeHeaders[0] }}"
	{%- endif %}
	{%- endif %}

	{%- endif %}
	{%- if operation.responses %}

	{%- set acceptHeaders = operation|accept_headers %}
	{%- if acceptHeaders %}
	{%- if "application/json" in acceptHeaders %}
	localVarHeaderParams["Accept"] = "application/json"
	{%- else  %}
	localVarHeaderParams["Accept"] =  "{{ acceptHeaders|join(",") }}"
	{%- endif %}
	{%- endif %}

	{% endif %}

	{%- for name, parameter in operation|parameters if parameter.in == "header" %}
	{%- if parameter.required %}

	localVarHeaderParams["{{ parameter.name }}"] = {{ common_package_name }}.ParameterToString({{ name|variable_name}}, "{{collectionFormat}}")
	{%- else %}

	if optionalParams.{{ name|attribute_name }} != nil {
		localVarHeaderParams["{{ parameter.name }}"] = {{ common_package_name }}.ParameterToString(*optionalParams.{{ name|attribute_name }}, "{{collectionFormat}}")
	}
	{%- endif %}
	{%- endfor %}

	{%- if formParameter %}
    formFile := {{ common_package_name }}.FormFile{}
	formFile.FormFileName = "{{ formParameter.name }}"
	{%- if formParameter.required %}
	localVarFile := {{ formParameter.name|variable_name}}
	{%- else %}
	var localVarFile {{ get_type_for_parameter(formParameter) }}
	if optionalParams.{{ formParameter.name|attribute_name }} != nil {
		localVarFile = *optionalParams.{{ formParameter.name|attribute_name }}
	}
	{%- endif %}
	if localVarFile != nil {
		fbs, _ := _io.ReadAll(localVarFile)
		formFile.FileBytes = fbs
	}
	{%- endif %}

	{%- if operation.requestBody is defined and not formParameter %}
    {%- set isBodyOptional = False if "required" in operation.requestBody and operation.requestBody.required else True %}

	// body params
	{%- if isBodyOptional %}
	if optionalParams.Body != nil {
		localVarPostBody = &optionalParams.{{ operation.get("x-codegen-request-body-name", "body")|attribute_name }}
	}
	{%- else %}
	localVarPostBody = &{{ operation.get("x-codegen-request-body-name", "body")|variable_name }}
	{%- endif %}
	{%- endif %}

	{%- set authMethods = operation.security if "security" in operation else openapi.security %}
	{%- if authMethods %}
        {{ common_package_name }}.SetAuthKeys(
		ctx,
		&localVarHeaderParams,
	{%- for authMethod in authMethods %}
	{%- for name in authMethod %}
	{%- set schema = openapi.components.securitySchemes[name] %}
	{%- if schema.type == "apiKey" and schema.in != "cookie" %}
		[2]string{"{{ name }}", "{{ schema.name }}"},
	{%- endif %}
	{%- endfor %}
	{%- endfor %}
	)
	{%- endif %}
	req, err := a.Client.PrepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, {% if formParameter %}&formFile{% else %}nil{% endif %})
	if err != nil {
		return {% if returnType %}localVarReturnValue, {% endif %}nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return {% if returnType %}localVarReturnValue, {% endif %}localVarHTTPResponse, err
	}
	{%- if returnType != '_io.Reader' %}

	localVarBody, err := datadog.ReadBody(localVarHTTPResponse)
	if err != nil {
		return {% if returnType %}localVarReturnValue, {% endif %}localVarHTTPResponse, err
	}
	{%- endif %}
	{%- for responseType, (response, responseCodes) in operation|responses_by_types %}
	{%- if loop.first %}

	if localVarHTTPResponse.StatusCode >= 300 {
		{%- if returnType == '_io.Reader' %}

		localVarBody, err := datadog.ReadBody(localVarHTTPResponse)
		if err != nil {
			return {% if returnType %}localVarReturnValue, {% endif %}localVarHTTPResponse, err
		}
		{%- endif %}
		newErr := {{ common_package_name }}.GenericOpenAPIError{
			ErrorBody:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
	{%- endif %}
		if
		{% for responseCode in responseCodes -%}
                {%- set code = responseCode|int %}
		{%- if not loop.first -%} || {%- endif -%} localVarHTTPResponse.StatusCode == {{ code }}
		{%- endfor -%} {
			var v {{ responseType }}
			err = a.Client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				return {% if returnType %}localVarReturnValue, {% endif %}localVarHTTPResponse, newErr
			}
			newErr.ErrorModel = v
			{%- if not loop.last %}
			return {% if returnType %}localVarReturnValue, {% endif %}localVarHTTPResponse, newErr
			{%- endif %}
		}
	{%- if loop.last %}
		return {% if returnType %}localVarReturnValue, {% endif %}localVarHTTPResponse, newErr
	}
	{%- endif %}
	{%- endfor %}
	{%- if returnType %}
	{%- if returnType != '_io.Reader' %}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := {{ common_package_name }}.GenericOpenAPIError{
			ErrorBody:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return {% if returnType %}localVarReturnValue, {% endif %}localVarHTTPResponse, newErr
	}
	{%- else %}
	localVarReturnValue = localVarHTTPResponse.Body
	{%- endif %}
	{%- endif %}

	return {% if returnType %}localVarReturnValue, {% endif %}localVarHTTPResponse, nil
}

{%- if operation["x-pagination"] %}
{%- set pagination = operation["x-pagination"] %}
// {{ operation.operationId }}WithPagination provides a paginated version of {{ operation.operationId }} returning a channel with all items.
{%- set itemType = get_type_at_path(operation, pagination.resultsPath) %}
func (a *{{ classname }}) {{ operation.operationId }}WithPagination(ctx _context.Context{% for name, parameter in operation|parameters if parameter.required or parameter.in == "path" %}, {{ name|variable_name}} {{ get_type_for_parameter(parameter) }}{% endfor %}{%- for name, parameter in operation|parameters if not parameter.required and parameter.in != "path" %}{%- if loop.first %}, o ...{{ operation.operationId }}OptionalParameters{% endif %}{% endfor %}) (<-chan datadog.PaginationResult[{{ itemType }}], func()) {
	ctx, cancel := _context.WithCancel(ctx)

	{%- set pageSizeType = get_container_type(operation, pagination.limitParam) %}
	pageSize_ := {{ pageSizeType }}({{ get_default(operation, pagination.limitParam) }})
	{%- for name, parameter in operation|parameters if not parameter.required and parameter.in != "path" %}
	{%- if loop.first %}
	if len(o) == 0 {
		o = append(o, {{ operation.operationId }}OptionalParameters{})
	}
	{%- set limitParamParts = pagination.limitParam.split(".") %}
	{%- for numberOfParts in range(1, limitParamParts|length) %}
	{%- set limitParam = ".".join(limitParamParts[:numberOfParts]) %}
	if {{ get_container(operation, limitParam) }} == nil {
		{{ get_container(operation, limitParam) }} = New{{ get_container_type(operation, limitParam) }}()
	}
	{%- endfor %}
	if {{ get_container(operation, pagination.limitParam) }} != nil {
		pageSize_ = *{{ get_container(operation, pagination.limitParam) }}
	}
	{{ get_container(operation, pagination.limitParam) }} = &pageSize_
	{%- if pagination.pageParam %}
	{%- set pageType = get_container_type(operation, pagination.pageParam) %}
        page_ := {{ pageType }}(0)
	{{ get_container(operation, pagination.pageParam) }} = &page_
	{%- endif %}
	{%- endif %}
	{%- else %}
	{%- set limitParamParts = pagination.limitParam.split(".") %}
	{%- for numberOfParts in range(2, limitParamParts|length) %}
	{%- set limitParam = ".".join(limitParamParts[:numberOfParts]) %}
	if {{ get_container(operation, limitParam) }} == nil {
		{{ get_container(operation, limitParam) }} = New{{ get_container_type(operation, limitParam) }}()
	}
	{%- endfor %}
	if {{ get_container(operation, pagination.limitParam) }} == nil {
		// {{ get_container_type(operation, pagination.limitParam) }}
		{{ get_container(operation, pagination.limitParam) }} = &pageSize_
	} else {
		pageSize_ = *{{ get_container(operation, pagination.limitParam) }}
	}
	{%- endfor %}

	items := make(chan datadog.PaginationResult[{{ itemType }}], pageSize_)
	go func() {
		for {
			resp, _, err := a.{{ operation.operationId }}(ctx{% for name, parameter in operation|parameters if parameter.required or parameter.in == "path" %}, {{ name|variable_name}}{% endfor %}{%- for name, parameter in operation|parameters if not parameter.required and parameter.in != "path" %}{%- if loop.first %}, o...{% endif %}{% endfor %})
			if err != nil {
				var returnItem {{ itemType }}
				items <- datadog.PaginationResult[{{ itemType }}]{Item: returnItem, Error: err}
				break
			}
                        {%- if pagination.resultsPath %}
			{%- set previous = {"part": ""} %}
			{%- for part in pagination.resultsPath.split(".") %}
			resp{{ previous["part"] + (part|attribute_name) }}, ok := resp{{ previous["part"] }}.Get{{ part|attribute_name }}Ok()
			if !ok {
				break
			}
			{%- set _ = previous.update({"part": previous["part"] + (part|attribute_name)}) %}
			{%- if loop.last %}
			results := *resp{{ previous["part"] }}
			{%- endif %}
			{%- endfor %}
			{%- else %}
			results := resp
			{%- endif %}

			for _, item := range results {
				select {
				case items <- datadog.PaginationResult[{{ itemType }}]{Item: item, Error: nil}:
				case <-ctx.Done():
				close(items)
				return
				}
			}
			if len(results) < int(pageSize_) {
				break
			}
			{%- if pagination.pageOffsetParam %}
			if {{ get_container(operation, pagination.pageOffsetParam) }} == nil {
				{{ get_container(operation, pagination.pageOffsetParam) }} = &pageSize_
			} else {
				pageOffset_ := *{{ get_container(operation, pagination.pageOffsetParam) }} + pageSize_
				{{ get_container(operation, pagination.pageOffsetParam) }} = &pageOffset_
			}

			{%- endif %}

			{%- if pagination.cursorParam %}
			{%- set previous = {"cursor": ""} %}
			{%- for part in pagination.cursorPath.split(".") %}
			{%- if loop.first %}
			cursor{{ previous["cursor"] + (part|attribute_name) }}, ok := resp.Get{{ part|attribute_name }}Ok()
			{%- else %}
			cursor{{ previous["cursor"] + (part|attribute_name) }}, ok := cursor{{ previous["cursor"] }}.Get{{ part|attribute_name }}Ok()
			{%- endif %}
			if !ok {
				break
			}
			{%- if loop.last %}

			{{ get_container(operation, pagination.cursorParam) }} = cursor{{ previous["cursor"] + (part|attribute_name) }}
			{%- endif %}
			{%- set _ = previous.update({"cursor": previous["cursor"] + (part|attribute_name)}) %}
			{%- endfor %}

			{%- endif %}

			{%- if pagination.pageParam %}
			pageOffset_ := *{{ get_container(operation, pagination.pageParam) }} + 1
			{{ get_container(operation, pagination.pageParam) }} = &pageOffset_
			{%- endif %}
		}
		close(items)
	}()
	return items, cancel
}
{%- endif %}

{%- endfor %}

// New{{ classname }} Returns New{{ classname }}.
func New{{ classname }}(client *{{ common_package_name }}.APIClient) *{{ classname }} {
	return &{{ classname }}{
		Client: client,
	}
}
{# keep new line at the end of file #}
