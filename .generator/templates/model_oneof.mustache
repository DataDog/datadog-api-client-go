// {{classname}} - {{#description}}{{{description}}}{{/description}}{{^description}}struct for {{{classname}}}{{/description}}
type {{classname}} struct {
	{{#oneOf}}
	{{#lambda.titlecase}}{{{.}}}{{/lambda.titlecase}} *{{{.}}}
	{{/oneOf}}

	// UnparsedObject contains the raw value of the object if there was an error when deserializing into the struct
	UnparsedObject interface{}
}

{{#oneOf}}
// {{#lambda.titlecase}}{{{.}}}{{/lambda.titlecase}}As{{classname}} is a convenience function that returns {{{.}}} wrapped in {{classname}}
func {{#lambda.titlecase}}{{{.}}}{{/lambda.titlecase}}As{{classname}}(v *{{{.}}}) {{classname}} {
	return {{classname}}{ {{#lambda.titlecase}}{{{.}}}{{/lambda.titlecase}}: v}
}

{{/oneOf}}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *{{classname}}) UnmarshalJSON(data []byte) error {
	var err error
	{{#isNullable}}
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	{{/isNullable}}
	{{#useOneOfDiscriminatorLookup}}
	{{#discriminator}}
	{{#mappedModels}}
	{{#-first}}
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	{{/-first}}
	// check if the discriminator value is '{{{mappingName}}}'
	if jsonDict["{{{propertyBaseName}}}"] == "{{{mappingName}}}" {
		// try to unmarshal JSON data into {{{modelName}}}
		err = json.Unmarshal(data, &dst.{{{modelName}}})
		if err == nil {
			return nil // data stored in dst.{{{modelName}}}, return on the first match
		} else {
			dst.{{{modelName}}} = nil
			return fmt.Errorf("Failed to unmarshal {{classname}} as {{{modelName}}}: %s", err.Error())
		}
	}

	{{/mappedModels}}
	{{/discriminator}}
	return nil
	{{/useOneOfDiscriminatorLookup}}
	{{^useOneOfDiscriminatorLookup}}
	match := 0
	{{#vendorExtensions.x-oneOf-as-properties}}
	// try to unmarshal data into {{{name}}}
	err = json.Unmarshal(data, &dst.{{#lambda.titlecase}}{{{name}}}{{/lambda.titlecase}})
	if err == nil {
		if dst.{{#lambda.titlecase}}{{{name}}}{{/lambda.titlecase}} != nil {{#isModel}}&& dst.{{#lambda.titlecase}}{{{name}}}{{/lambda.titlecase}}.UnparsedObject == nil {{/isModel}}{
			json{{{name}}}, _ := json.Marshal(dst.{{#lambda.titlecase}}{{{name}}}{{/lambda.titlecase}})
			if string(json{{{name}}}) == "{}" { // empty struct
				dst.{{#lambda.titlecase}}{{{name}}}{{/lambda.titlecase}} = nil
			} else {
				match++
			}
		} else {
			dst.{{#lambda.titlecase}}{{{name}}}{{/lambda.titlecase}} = nil
		}
	} else {
		dst.{{#lambda.titlecase}}{{{name}}}{{/lambda.titlecase}} = nil
	}

	{{/vendorExtensions.x-oneOf-as-properties}}
	if match != 1 { // more than 1 match
		// reset to nil
		{{#oneOf}}
		dst.{{#lambda.titlecase}}{{{.}}}{{/lambda.titlecase}} = nil
		{{/oneOf}}
		return json.Unmarshal(data, &dst.UnparsedObject)
	} else {
		return nil // exactly one match
	}
	{{/useOneOfDiscriminatorLookup}}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src {{classname}}) MarshalJSON() ([]byte, error) {
{{#oneOf}}
	if src.{{#lambda.titlecase}}{{{.}}}{{/lambda.titlecase}} != nil {
		return json.Marshal(&src.{{#lambda.titlecase}}{{{.}}}{{/lambda.titlecase}})
	}

{{/oneOf}}
	if src.UnparsedObject != nil {
		return json.Marshal(src.UnparsedObject)
	}
	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *{{classname}}) GetActualInstance() (interface{}) {
{{#oneOf}}
	if obj.{{#lambda.titlecase}}{{{.}}}{{/lambda.titlecase}} != nil {
		return obj.{{#lambda.titlecase}}{{{.}}}{{/lambda.titlecase}}
	}

{{/oneOf}}
	// all schemas are nil
	return nil
}

{{>nullable_model}}
